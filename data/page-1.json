{
  "servers": [
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.containers/kubernetes-mcp-server",
      "description": "A Model Context Protocol (MCP) server for Kubernetes and OpenShift",
      "status": "active",
      "repository": {
        "url": "https://github.com/containers/kubernetes-mcp-server",
        "source": "github"
      },
      "version": "0.0.50",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "bcee55b5-2316-4f92-8b66-db907496714b",
          "versionId": "00636d73-03c1-4107-a591-84b271cd1646",
          "publishedAt": "2025-09-16T13:14:05.094878294Z",
          "updatedAt": "2025-09-16T13:14:05.094878294Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.waystation/gmail",
      "description": "Read emails, send messages, and manage labels in your Gmail account.",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/gmail/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/gmail/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c8058a02-9f65-448b-9301-209d429efd74",
          "versionId": "00b9d4aa-56ab-4f32-9f9f-3b9d48ed023f",
          "publishedAt": "2025-09-09T14:46:07.969809594Z",
          "updatedAt": "2025-09-09T14:46:07.969809594Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "status": "active",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.9.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
          "versionId": "00bfe736-db44-46f0-8528-173b960c7fc9",
          "publishedAt": "2025-09-21T07:40:13.389325937Z",
          "updatedAt": "2025-09-21T07:40:13.389325937Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.biodnd/agent-ip",
      "description": "Agent IP: MCP server with patents search tools",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/ip"
      },
      "version": "0.1.2",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-ip.biodnd.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "30c71c78-e9f2-480d-969f-a352e650a85c",
          "versionId": "01b8ec9c-fcc1-4608-89c0-02072bf95738",
          "publishedAt": "2025-09-23T09:47:07.378272466Z",
          "updatedAt": "2025-09-23T09:47:07.378272466Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.make/mcp-server",
      "description": "MCP server for building, running, and managing Make automations.",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.make.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "fbb08138-f8ab-4448-82a8-e99ff64af1ef",
          "versionId": "02056adc-cfef-41c1-9961-fbf923ef2374",
          "publishedAt": "2025-09-19T16:35:03.495242848Z",
          "updatedAt": "2025-09-19T16:35:03.495242848Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "status": "active",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.4.0",
      "packages": [
        {
          "registryType": "oci",
          "registryBaseUrl": "https://docker.io",
          "identifier": "teamwork/mcp",
          "version": "v1.4.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8e1daf12-8a74-4718-93ec-86b05728241d",
          "versionId": "028de86b-0027-4eb9-875b-c40b9b089215",
          "publishedAt": "2025-09-17T18:13:49.724857292Z",
          "updatedAt": "2025-09-17T18:13:49.724857292Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.kirbah/mcp-youtube",
      "description": "YouTube MCP server for token-optimized, structured data using the YouTube Data API v3.",
      "status": "active",
      "repository": {
        "url": "https://github.com/kirbah/mcp-youtube",
        "source": "github"
      },
      "version": "0.2.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@kirbah/mcp-youtube",
          "version": "0.2.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "YouTube Data API v3 key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUTUBE_API_KEY"
            },
            {
              "description": "MongoDB connection string for caching",
              "format": "string",
              "isSecret": true,
              "name": "MDB_MCP_CONNECTION_STRING"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a3813f05-35d7-43db-91b6-2380417e81b7",
          "versionId": "0319ba85-54bd-44eb-97a7-58ee04d05b6e",
          "publishedAt": "2025-09-12T17:28:32.237060053Z",
          "updatedAt": "2025-09-12T17:28:32.237060053Z",
          "isLatest": true
        }
      }
    },
    {
      "name": "io.github.jkakar/cookwith-mcp",
      "description": "AI-powered recipe generation and transformation tools by Cookwith",
      "repository": {
        "url": "https://github.com/blaideinc/cookwith-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ad9ef150-dd99-4913-b5f4-3769ff823300",
          "versionId": "03c1834c-c917-43f5-a8aa-787996969f4f",
          "publishedAt": "2025-09-11T23:27:56.196697697Z",
          "updatedAt": "2025-09-12T19:23:45.415878267Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "app.getdialer/dialer",
      "description": "An MCP server that provides your you make outbound phone calls using your own phone number",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://getdialer.app/mcp"
        },
        {
          "type": "sse",
          "url": "https://getdialer.app/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c8eaffb8-57a8-4d66-8a32-fa6e25f5bcb9",
          "versionId": "04f25b17-331d-48d7-b08b-37baece208a7",
          "publishedAt": "2025-09-08T23:47:09.452137971Z",
          "updatedAt": "2025-09-09T00:16:49.162620072Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "garden.stanislav.svelte-llm/svelte-llm-mcp",
      "description": "An MCP server that provides access to Svelte 5 and SvelteKit documentation",
      "status": "active",
      "repository": {
        "url": "https://github.com/khromov/svelte-llm-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://svelte-llm.stanislav.garden/mcp/mcp"
        },
        {
          "type": "sse",
          "url": "https://svelte-llm.stanislav.garden/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ceb541f5-8e46-4f9d-ad55-e68ae484875f",
          "versionId": "058b0ef7-4f48-4bab-a29f-00c43e88baca",
          "publishedAt": "2025-09-11T15:24:28.061183844Z",
          "updatedAt": "2025-09-11T15:24:28.061183844Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.joelverhagen.mcp/Knapcode.SampleMcpServer",
      "description": "A sample MCP server using the MCP C# SDK. Generates random numbers and random weather.",
      "repository": {
        "url": "https://github.com/joelverhagen/Knapcode.SampleMcpServer.git",
        "source": "github"
      },
      "version": "0.7.0-beta",
      "packages": [
        {
          "registryType": "nuget",
          "registryBaseUrl": "https://api.nuget.org",
          "identifier": "Knapcode.SampleMcpServer",
          "version": "0.7.0-beta",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional",
              "valueHint": "mcp"
            },
            {
              "value": "start",
              "type": "positional",
              "valueHint": "start"
            }
          ],
          "environmentVariables": [
            {
              "value": "{weather_choices}",
              "variables": {
                "weather_choices": {
                  "description": "Comma separated list of weather descriptions to randomly select.",
                  "isRequired": true
                }
              },
              "name": "WEATHER_CHOICES"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "4b516701-57e7-41dc-95a4-eebf8b37ff58",
          "versionId": "0670bddb-8db1-41dd-b5c4-0957401e29b7",
          "publishedAt": "2025-09-12T15:58:51.492613035Z",
          "updatedAt": "2025-09-12T15:58:51.492613035Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.jepto/mcp",
      "description": "Jepto MCP server that provides access to client knowledgebase & analytics for connected data sources",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.jepto.com"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "65f5a97d-f50e-40b9-a13f-ca1c7f16f262",
          "versionId": "06fd2413-e1aa-4b5e-83c1-6dbfdba84c74",
          "publishedAt": "2025-09-15T11:36:02.956033052Z",
          "updatedAt": "2025-09-15T11:36:02.956033052Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.huoshuiai42/huoshui-file-search",
      "description": "An MCP server that provides fast Spotlight file search capabilities for macOS",
      "status": "active",
      "repository": {
        "url": "https://github.com/huoshuiai42/huoshui-file-search",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "huoshui-file-search",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "6e5033a3-e2e4-41a7-87ed-f80a9c1a49ce",
          "versionId": "0733c292-e9cd-42f4-8260-3886dd762460",
          "publishedAt": "2025-09-09T15:19:22.241726816Z",
          "updatedAt": "2025-09-09T15:19:22.241726816Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Lyellr88/marm-mcp-server",
      "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
      "repository": {
        "url": "https://github.com/Lyellr88/MARM-Systems",
        "source": "github"
      },
      "version": "2.2.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "marm-mcp-server",
          "version": "2.2.1",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "lyellr88/marm-mcp-server",
          "version": "2.2.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "73eda8a1-8138-43c0-ac0e-5f953d1d304e",
          "versionId": "0760bf55-1b79-4018-9d07-b1344286092e",
          "publishedAt": "2025-09-19T01:23:00.859132392Z",
          "updatedAt": "2025-09-19T04:27:24.541089113Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.biodnd/agent-press",
      "description": "Agent Press: news MCP server streaming company headlines",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/press"
      },
      "version": "0.1.1",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-press.biodnd.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8475fdbb-a38f-4d19-95ad-00e601276b42",
          "versionId": "078a7b91-4b4f-4caa-b696-1c1f11478b00",
          "publishedAt": "2025-09-23T09:08:14.844607103Z",
          "updatedAt": "2025-09-23T09:47:04.199964082Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.53-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.53-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
          "versionId": "085cf170-4e61-449a-8fdf-18508f251382",
          "publishedAt": "2025-09-19T21:00:37.853652239Z",
          "updatedAt": "2025-09-22T16:13:17.248942811Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.cmpxchg16/mcp-ethical-hacking",
      "description": "An MCP server that provides LinkedIn & Reddit data",
      "status": "active",
      "repository": {
        "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.0.0/server.mcpb",
          "version": "1.1.0",
          "fileSha256": "fe333e598595000ae021bd27117db32ec69af6987f507ba7a63c90638ff633ce",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ebe9848e-d092-4007-88bc-09b67823681b",
          "versionId": "08854c3d-f63f-4e09-b762-3703e6af752b",
          "publishedAt": "2025-09-15T11:11:03.268175466Z",
          "updatedAt": "2025-09-15T12:55:00.139476327Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.mintmcp/gmail",
      "description": "A MCP server for Gmail that lets you search, read, and draft emails and replies.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.5",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gmail.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "108ee330-287d-40a7-98c6-6806dbb9eeac",
          "versionId": "095ef563-ac9f-46d0-bc67-8b0f122ab4f9",
          "publishedAt": "2025-09-09T19:53:13.486381454Z",
          "updatedAt": "2025-09-09T19:53:13.486381454Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "status": "active",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "auto",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ipybox",
          "version": "auto",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Required MCP server subcommand",
              "isRequired": true,
              "value": "mcp",
              "type": "positional"
            },
            {
              "description": "Directory allowed for host filesystem operations",
              "type": "named",
              "name": "--allowed-dir",
              "isRepeated": true,
              "valueHint": "directory_path"
            },
            {
              "description": "Domain, IP address, or CIDR range allowed for outbound network access",
              "type": "named",
              "name": "--allowed-domain",
              "isRepeated": true,
              "valueHint": "domain_or_ip"
            },
            {
              "description": "Docker image tag to use",
              "type": "named",
              "name": "--container-tag",
              "valueHint": "docker_image_tag"
            },
            {
              "description": "Environment variable for container (KEY=VALUE format)",
              "type": "named",
              "name": "--container-env-var",
              "isRepeated": true,
              "valueHint": "env_var"
            },
            {
              "description": "Path to file containing container environment variables",
              "type": "named",
              "name": "--container-env-file",
              "valueHint": "file_path"
            },
            {
              "description": "Bind mount for container (host_path:container_path format)",
              "type": "named",
              "name": "--container-bind",
              "isRepeated": true,
              "valueHint": "bind_mount"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2310a088-c5ba-429e-84b2-82d92622023b",
          "versionId": "0963e3d3-30f2-4ed3-bf44-4941546f2690",
          "publishedAt": "2025-09-14T08:07:06.940202842Z",
          "updatedAt": "2025-09-14T08:07:06.940202842Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.yuna0x0/anilist-mcp",
      "description": "AniList MCP server for accessing AniList API data",
      "status": "active",
      "repository": {
        "url": "https://github.com/yuna0x0/anilist-mcp",
        "source": "github"
      },
      "version": "1.3.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "anilist-mcp",
          "version": "1.3.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "oci",
          "registryBaseUrl": "https://docker.io",
          "identifier": "yuna0x0/anilist-mcp",
          "version": "1.3.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/anilist-mcp/releases/download/v1.3.3/anilist-mcp-1.3.3.mcpb",
          "version": "1.3.3",
          "fileSha256": "17f509167680edc3923940b31853fe2b27bbae1d5ab9b071525a4260704006ec",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "6bdae0fa-dff2-4ae3-82f9-03710c1ffb86",
          "versionId": "096d4f24-45f6-4a52-906f-5e7c13e69765",
          "publishedAt": "2025-09-13T07:58:52.37605769Z",
          "updatedAt": "2025-09-21T13:14:02.759136115Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "status": "active",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.9.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.9.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "bd0c41d1-2209-4c3f-8602-d40900053217",
          "versionId": "09bac2ad-8fbe-458f-8832-c465f2e020e7",
          "publishedAt": "2025-09-20T04:37:07.839680863Z",
          "updatedAt": "2025-09-20T04:37:07.839680863Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.augmnt/augments-mcp-server",
      "description": "Augments MCP Server - A comprehensive framework documentation provider for Claude Code",
      "status": "active",
      "repository": {
        "url": "https://github.com/augmnt/augments-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "augments-mcp-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c76dece6-08e7-4a57-af81-2e6209f8e884",
          "versionId": "09f7ad69-47d4-444a-86c5-499a993a408f",
          "publishedAt": "2025-09-12T16:36:52.743796173Z",
          "updatedAt": "2025-09-12T16:52:50.977430499Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "status": "active",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.4.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
          "versionId": "0a5a9ada-cc20-4a8f-8cf6-78be9c377014",
          "publishedAt": "2025-09-17T14:43:14.554349016Z",
          "updatedAt": "2025-09-17T15:07:56.628066042Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.biodnd/agent-fin",
      "description": "Agent Fin: finance MCP server with market data tools",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/fin"
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-fin.biodnd.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ff2fd401-9a5b-4e68-90c2-442e8adfce1c",
          "versionId": "0a5e2f2f-3292-4617-9b0d-f48d0b1764c5",
          "publishedAt": "2025-09-23T08:26:54.846586034Z",
          "updatedAt": "2025-09-23T09:08:15.445609211Z",
          "isLatest": false
        }
      }
    },
    {
      "name": "io.github.ruvnet/ruv-swarm",
      "description": "Neural network swarm orchestration with WebAssembly acceleration and MCP integration",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.18",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ed5d3336-d432-45a4-93c3-4274d45f82ea",
          "versionId": "0a9cda7f-2b73-4839-844b-6582f335de42",
          "publishedAt": "2025-09-10T17:15:32.69690433Z",
          "updatedAt": "2025-09-10T17:21:34.92137012Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.peek/mcp",
      "description": "Build travel itineraries with Peek's 300k+ experiences. Search, details, and availability.",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.peek.com"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "f5a3b348-99db-403f-802e-b8647339f119",
          "versionId": "0aaf5507-40c0-4780-b24f-5d36c4f851ad",
          "publishedAt": "2025-09-10T18:22:01.353357685Z",
          "updatedAt": "2025-09-10T18:22:01.353357685Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "status": "active",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.10",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.10",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "fe2e0e07-1466-499a-bcdd-16d07b8ccb40",
          "versionId": "0d2d9f39-6ac9-452e-b1d9-41ebc0147c5c",
          "publishedAt": "2025-09-19T13:21:42.73531992Z",
          "updatedAt": "2025-09-19T13:21:42.73531992Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.browserbase/mcp-server-browserbase",
      "description": "MCP server for AI web browser automation using Browserbase and Stagehand",
      "status": "active",
      "repository": {
        "url": "https://github.com/browserbase/mcp-server-browserbase",
        "source": "github"
      },
      "version": "2.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@browserbasehq/mcp-server-browserbase",
          "version": "2.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Browserbase API key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BROWSERBASE_API_KEY"
            },
            {
              "description": "Your Browserbase Project ID",
              "isRequired": true,
              "format": "string",
              "name": "BROWSERBASE_PROJECT_ID"
            },
            {
              "description": "Your Gemini API key (default model)",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GEMINI_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b6b21715-f68c-4714-9282-b892957865c6",
          "versionId": "0d63e37e-b288-4914-9b84-b88c4897e832",
          "publishedAt": "2025-09-12T21:10:44.068065305Z",
          "updatedAt": "2025-09-12T21:10:44.068065305Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "status": "active",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.90.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.90.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Anthropic API key for Claude AI integration (required for deployments)",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ANTHROPIC_API_KEY"
            },
            {
              "description": "OpenAI API key for embeddings (patterns, policies, capabilities)",
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            },
            {
              "description": "Qdrant Vector DB URL for patterns, policies, and capabilities storage",
              "format": "string",
              "default": "http://localhost:6333",
              "name": "QDRANT_URL"
            },
            {
              "description": "Qdrant API key for authentication",
              "format": "string",
              "isSecret": true,
              "name": "QDRANT_API_KEY"
            },
            {
              "description": "Path to kubeconfig file for Kubernetes access",
              "format": "string",
              "name": "KUBECONFIG"
            },
            {
              "description": "Session storage directory for workflow persistence",
              "format": "string",
              "name": "DOT_AI_SESSION_DIR"
            },
            {
              "description": "Enable debug logging",
              "format": "string",
              "name": "DEBUG_DOT_AI"
            },
            {
              "description": "Documentation file pattern for discovery",
              "format": "string",
              "name": "DOT_AI_DOC_PATTERN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "6836138f-2ad2-4feb-8043-ea425ecb0d71",
          "versionId": "0d69f0ab-96b0-454a-96b5-60aeaaa4fbbc",
          "publishedAt": "2025-09-13T10:28:59.278154953Z",
          "updatedAt": "2025-09-13T10:28:59.278154953Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.cameroncooke/XcodeBuildMCP",
      "description": "XcodeBuildMCP provides tools for Xcode project management, simulator management, and app utilities.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cameroncooke/XcodeBuildMCP",
        "source": "github"
      },
      "version": "1.12.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "xcodebuildmcp",
          "version": "1.12.7",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "18e95b25-4c50-4d4f-836b-0d47f4ef98f4",
          "versionId": "0db74a8b-5a5f-49de-8f78-fd983d4a9c11",
          "publishedAt": "2025-09-09T19:05:37.138310617Z",
          "updatedAt": "2025-09-09T19:54:23.231288713Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "status": "active",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.2.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.2.6",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a90d8a5b-ca0c-4e52-a82c-36027fdf7de2",
          "versionId": "0df0a91b-c0f0-4054-b53c-0472b408ba70",
          "publishedAt": "2025-09-24T08:32:44.48646114Z",
          "updatedAt": "2025-09-24T12:57:07.92042999Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/pinkpixel-dev-web-scout-mcp",
      "description": "Search the web and extract clean, readable text from webpages. Process multiple URLs at once to sp…",
      "status": "active",
      "repository": {
        "url": "https://github.com/pinkpixel-dev/web-scout-mcp",
        "source": "github"
      },
      "version": "1.5.5",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pinkpixel-dev/web-scout-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b81da317-d978-4f5f-9532-fa88b6a5799a",
          "versionId": "0e6f4d1f-a207-422e-a517-962c98b88c21",
          "publishedAt": "2025-09-20T03:40:04.418820494Z",
          "updatedAt": "2025-09-20T03:40:04.418820494Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.waystation/postgres",
      "description": "Connect to your PostgreSQL database to query data and schemas.",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/postgres/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/postgres/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2587da38-df7c-4131-bf77-c33cb6ce7ba7",
          "versionId": "0e8d3570-c4fa-485a-87a0-b978a16f7910",
          "publishedAt": "2025-09-09T14:46:09.489651945Z",
          "updatedAt": "2025-09-09T14:46:09.489651945Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.pshivapr/selenium-mcp",
      "description": "Selenium Tools for MCP",
      "status": "active",
      "repository": {
        "url": "https://github.com/pshivapr/selenium-mcp",
        "source": "github"
      },
      "version": "0.4.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "selenium-webdriver-mcp",
          "version": "0.4.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "e6648a72-6a2f-4b64-991e-4be3ed59ed3c",
          "versionId": "0f9ce6bc-c6b5-4901-ba87-ac6dbf3bbc25",
          "publishedAt": "2025-09-11T13:43:51.350537778Z",
          "updatedAt": "2025-09-11T13:43:51.350537778Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.redpanda/docs-mcp",
      "description": "Get authoritative answers to questions about Redpanda.",
      "status": "active",
      "repository": {
        "url": "https://github.com/redpanda-data/docs-site",
        "source": "github",
        "subfolder": "netlify"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://docs.redpanda.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2a581223-2940-486f-8905-e30db3e84951",
          "versionId": "0fb59115-b315-4b68-92db-8046316b8ba8",
          "publishedAt": "2025-09-24T16:34:00.228680722Z",
          "updatedAt": "2025-09-24T16:34:00.228680722Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.DeanWard/HAL",
      "description": "HAL (HTTP API Layer) - An MCP server that provides HTTP API capabilities to Large Language Models",
      "status": "active",
      "repository": {
        "url": "https://github.com/DeanWard/HAL",
        "source": "github"
      },
      "version": "1.0.14",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "hal-mcp",
          "version": "1.0.14",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ffe90b1f-e0e3-4999-aa8b-022e4e2187a6",
          "versionId": "10d39bdb-2500-4fbc-a54d-e651d6aa05f4",
          "publishedAt": "2025-09-09T13:04:11.860929514Z",
          "updatedAt": "2025-09-09T13:04:11.860929514Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.2",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "364d771b-c515-4071-805d-75513fa308ce",
          "versionId": "10d59353-ba49-44fa-91c3-bfdef4234ef6",
          "publishedAt": "2025-09-20T22:17:46.112363947Z",
          "updatedAt": "2025-09-20T22:27:49.332529599Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/pinkpixel-dev-web-scout-mcp",
      "description": "Search the web and extract clean, readable text from webpages. Process multiple URLs at once to sp…",
      "status": "active",
      "repository": {
        "url": "https://github.com/pinkpixel-dev/web-scout-mcp",
        "source": "github"
      },
      "version": "1.5.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pinkpixel-dev/web-scout-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b81da317-d978-4f5f-9532-fa88b6a5799a",
          "versionId": "10f39b73-0bd7-4cad-9b8f-6321876bdb6f",
          "publishedAt": "2025-09-20T03:20:23.182803591Z",
          "updatedAt": "2025-09-20T03:40:04.425108177Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.zine/mcp",
      "description": "Your memory, everywhere AI goes. Build knowledge once, access it via MCP anywhere.",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://www.zine.ai/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "4ebda2a7-88c7-4ff1-8333-09bca54fecbf",
          "versionId": "11139d6c-3cd1-43a3-bedf-94c30ba8b55b",
          "publishedAt": "2025-09-10T18:02:28.773521652Z",
          "updatedAt": "2025-09-10T18:02:28.773521652Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/mjucius-cozi_mcp",
      "description": "Manage your family's calendars and lists in Cozi. View, create, and update appointments; organize…",
      "status": "active",
      "repository": {
        "url": "https://github.com/mjucius/cozi_mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@mjucius/cozi_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ebe0ea3c-061c-4882-a3e5-f9fc4d9a2710",
          "versionId": "11664738-d823-4b8e-9ea6-092e8aa450b8",
          "publishedAt": "2025-09-13T23:46:02.266315306Z",
          "updatedAt": "2025-09-13T23:46:02.266315306Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.10",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
          "versionId": "119ac356-7e94-4445-98e3-49ecea76cf07",
          "publishedAt": "2025-09-12T05:10:59.806509357Z",
          "updatedAt": "2025-09-18T00:54:49.018200576Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "status": "active",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.0.18",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.0.18",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "e4bf9279-bd3f-43d4-8c82-8b26d237876b",
          "versionId": "11e180e3-c035-41fa-b4e4-5866525a817a",
          "publishedAt": "2025-09-20T09:03:36.622899248Z",
          "updatedAt": "2025-09-20T16:12:47.919618105Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.snyk/mcp",
      "description": "Easily find and fix security issues in your applications leveraging Snyk platform capabilities.",
      "status": "active",
      "repository": {
        "url": "https://github.com/snyk/snyk-ls",
        "source": "github",
        "subfolder": "mcp_extension"
      },
      "version": "1.1299.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "snyk",
          "version": "1.1299.1",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional"
            },
            {
              "value": "stdio",
              "type": "named",
              "name": "-t"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1302015a-5b8c-4b50-ab63-58c4c04648d3",
          "versionId": "1208b4cd-51b9-4f90-a3d0-520ed037bc4d",
          "publishedAt": "2025-09-24T13:33:59.9152605Z",
          "updatedAt": "2025-09-24T13:33:59.9152605Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/blockscout-mcp-server",
      "description": "Provide AI agents and automation tools with contextual access to blockchain data including balance…",
      "status": "active",
      "repository": {
        "url": "https://github.com/blockscout/mcp-server",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@blockscout/mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "581797d5-ac0b-453b-b82f-4280bd6aa608",
          "versionId": "12f9bf42-5702-44ee-9f39-a85d6bf7e7c1",
          "publishedAt": "2025-09-20T00:50:33.619951617Z",
          "updatedAt": "2025-09-20T00:50:33.619951617Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.SamYuan1990/i18n-agent-action",
      "description": "An i18n github action for language translate",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "mcp",
      "packages": [
        {
          "registryType": "oci",
          "registryBaseUrl": "https://ghcr.io",
          "identifier": "SamYuan1990/i18n-agent-action",
          "version": "mcp",
          "runtimeHint": "docker",
          "transport": {
            "type": "sse",
            "url": "https://example.com:8080/sse"
          },
          "runtimeArguments": [
            {
              "description": "Port mapping from host to container",
              "value": "8080:8080",
              "type": "named",
              "name": "-p"
            },
            {
              "description": "API key for the i18n service",
              "value": "api_key={api_key}",
              "variables": {
                "api_key": {
                  "description": "Your API key for the translation service",
                  "isRequired": true,
                  "format": "string",
                  "isSecret": true
                }
              },
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Volume mount for model files",
              "value": "{models_path}:/app/models",
              "variables": {
                "models_path": {
                  "description": "Path to your models directory on the host",
                  "isRequired": true,
                  "format": "filepath",
                  "default": "/path/to/your/models"
                }
              },
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Encoder model file path",
              "value": "encoder={encoder_file}",
              "variables": {
                "encoder_file": {
                  "description": "Encoder model file name",
                  "isRequired": true,
                  "format": "string",
                  "default": "/app/models/your-encoder.onnx"
                }
              },
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Decoder model file path",
              "value": "decoder={decoder_file}",
              "variables": {
                "decoder_file": {
                  "description": "Decoder model file name",
                  "isRequired": true,
                  "format": "string",
                  "default": "/app/models/your-decoder.onnx"
                }
              },
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Tokens model file path",
              "value": "tokens={tokens_file}",
              "variables": {
                "tokens_file": {
                  "description": "Tokens model file name",
                  "isRequired": true,
                  "format": "string",
                  "default": "/app/models/your-tokens.onnx"
                }
              },
              "type": "named",
              "name": "-e"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "26b74645-f671-4e10-b47a-751373353dc6",
          "versionId": "131fbf7d-e6c3-4059-acb0-6de5943bfe82",
          "publishedAt": "2025-09-24T12:17:46.198378149Z",
          "updatedAt": "2025-09-24T12:17:46.198378149Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.marlenezw/publish-mcp-server",
      "description": "An MCP server that helps developers publish their MCP servers to the registry",
      "status": "active",
      "repository": {
        "url": "https://github.com/marlenezw/publish-mcp-server",
        "source": "github"
      },
      "version": "0.1.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "publish-mcp-server",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8ae04d6a-da1e-419e-abc9-8c36f3d1f358",
          "versionId": "1357cfee-84de-4f73-b696-a06de4bd0ebf",
          "publishedAt": "2025-09-18T22:42:06.320770941Z",
          "updatedAt": "2025-09-18T22:42:06.320770941Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "status": "active",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "fe2e0e07-1466-499a-bcdd-16d07b8ccb40",
          "versionId": "13d05765-2c60-453e-8f8d-2a2ecd247fe3",
          "publishedAt": "2025-09-19T11:51:13.375441364Z",
          "updatedAt": "2025-09-19T13:21:42.772286946Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/callmybot-hello-mcp-server",
      "description": "Generate quick, friendly greetings by name. Personalize salutations for any context. Explore the o…",
      "status": "active",
      "repository": {
        "url": "https://github.com/callmybot/hello-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@callmybot/hello-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a2ef84c4-253e-4f1f-abba-9a3ecb20cf2d",
          "versionId": "13e18ea1-9b63-4967-abde-7e8eac896218",
          "publishedAt": "2025-09-18T07:48:26.611267285Z",
          "updatedAt": "2025-09-18T07:48:26.611267285Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://registry.modelcontextprotocol.io/schema/mcp-server-v0.json",
      "name": "io.github.Lungshot/ninjaone",
      "description": "MCP server for NinjaONE RMM with device management, monitoring, and automation",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.2.9",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "32389d4c-f3b8-4702-87a7-d6880ecd8bb2",
          "versionId": "13fa19a2-024f-412b-93dd-41620933bc23",
          "publishedAt": "2025-09-22T17:51:28.941427211Z",
          "updatedAt": "2025-09-22T17:51:28.941427211Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.florentine-ai/mcp",
      "description": "MCP server for Florentine.ai - Natural language to MongoDB aggregations",
      "status": "active",
      "repository": {
        "url": "https://github.com/florentine-ai/mcp",
        "source": "github"
      },
      "version": "0.1.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@florentine-ai/mcp",
          "version": "0.1.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "isRequired": true,
              "value": "@florentine-ai/mcp@latest",
              "type": "named",
              "name": "-y"
            }
          ],
          "packageArguments": [
            {
              "description": "The mode to run the MCP server in ('static' or 'dynamic')",
              "isRequired": true,
              "value": "static",
              "type": "named",
              "name": "--mode"
            },
            {
              "description": "Set to true to enable debug logging",
              "format": "boolean",
              "type": "named",
              "name": "--debug"
            },
            {
              "description": "The path to the log file, must be provided if debug is true",
              "format": "filepath",
              "type": "named",
              "name": "--logpath"
            }
          ],
          "environmentVariables": [
            {
              "description": "Your Florentine.ai API key, get it from https://florentine.ai/dashboard",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "FLORENTINE_TOKEN"
            },
            {
              "description": "The LLM service to use, one of 'openai', 'anthropic', 'google' or 'deepseek' (must only be provided if you did not set it in your Florentine.ai account)",
              "format": "string",
              "name": "LLM_SERVICE"
            },
            {
              "description": "Your API key for the LLM service (must only be provided if you did not set it in your Florentine.ai account)",
              "format": "string",
              "isSecret": true,
              "name": "LLM_KEY"
            },
            {
              "description": "Session ID for maintaining server-side context across requests",
              "format": "string",
              "name": "SESSION_ID"
            },
            {
              "description": "Stringified JSON array of return types for the response",
              "format": "string",
              "name": "RETURN_TYPES"
            },
            {
              "description": "Stringified JSON array of values for required inputs keys",
              "format": "string",
              "name": "REQUIRED_INPUTS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1c220829-98d0-47a3-8b2e-09d7d5314f02",
          "versionId": "142bc4e2-698d-494c-b700-ae62b468fbb7",
          "publishedAt": "2025-09-10T14:43:00.786960372Z",
          "updatedAt": "2025-09-19T10:37:43.039348731Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.indragiek/uniprof",
      "description": "Universal CPU profiler designed for humans and AI agents",
      "status": "active",
      "repository": {
        "url": "https://github.com/indragiek/uniprof",
        "source": "github"
      },
      "version": "0.3.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "uniprof",
          "version": "0.3.4",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional"
            },
            {
              "value": "run",
              "type": "positional"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8c32fd44-3a81-4866-9f18-4b7af91690e0",
          "versionId": "14b08127-6083-4132-a35f-34eb832f08c4",
          "publishedAt": "2025-09-11T00:59:36.873368238Z",
          "updatedAt": "2025-09-11T00:59:36.873368238Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/PabloLec-keyprobe-mcp",
      "description": "Audit certificates and keystores to surface expiry risks, weak algorithms, and misconfigurations.…",
      "status": "active",
      "repository": {
        "url": "https://github.com/PabloLec/KeyProbe-MCP",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@PabloLec/keyprobe-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "771d6227-76a6-49f4-9aeb-de301d6a9439",
          "versionId": "14b6f291-19f8-4bfc-9e64-82cc728c7708",
          "publishedAt": "2025-09-10T18:08:11.479456255Z",
          "updatedAt": "2025-09-10T18:08:11.479456255Z",
          "isLatest": true
        }
      }
    },
    {
      "name": "io.github.ruvnet/ruv-swarm",
      "description": "Neural network swarm orchestration with WebAssembly acceleration and MCP integration",
      "repository": {
        "url": "https://github.com/ruvnet/ruv-FANN",
        "source": "github",
        "subfolder": "ruv-swarm"
      },
      "version": "1.0.19",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "ruv-swarm",
          "version": "1.0.19",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Log level for ruv-swarm operations",
              "format": "string",
              "default": "info",
              "choices": [
                "debug",
                "info",
                "warn",
                "error"
              ],
              "name": "RUV_SWARM_LOG_LEVEL"
            },
            {
              "description": "Database path for persistence storage",
              "format": "string",
              "name": "RUV_SWARM_DB_PATH"
            },
            {
              "description": "Enable WebAssembly SIMD optimizations",
              "format": "boolean",
              "default": "true",
              "choices": [
                "true",
                "false"
              ],
              "name": "RUV_SWARM_ENABLE_SIMD"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ed5d3336-d432-45a4-93c3-4274d45f82ea",
          "versionId": "160a7800-734c-43ab-84ba-81d2f04c042d",
          "publishedAt": "2025-09-10T17:21:34.916674805Z",
          "updatedAt": "2025-09-10T17:21:34.916674805Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.domdomegg/airtable-mcp-server",
      "description": "Read and write access to Airtable database schemas, tables, and records.",
      "status": "active",
      "repository": {
        "url": "https://github.com/domdomegg/airtable-mcp-server.git",
        "source": "github"
      },
      "version": "1.7.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "airtable-mcp-server",
          "version": "1.7.2",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
              "isRequired": true,
              "isSecret": true,
              "name": "AIRTABLE_API_KEY"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "domdomegg/airtable-mcp-server",
          "version": "1.7.2",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
              "isRequired": true,
              "isSecret": true,
              "name": "AIRTABLE_API_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/domdomegg/airtable-mcp-server/releases/download/v1.7.2/airtable-mcp-server.mcpb",
          "version": "1.7.2",
          "fileSha256": "8220de07a08ebe908f04da139ea03dbfe29758141347e945da60535fb7bcca20",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c4d153eb-b252-4e8e-832b-fe3684fe47ec",
          "versionId": "16e0a153-bf00-44e1-9eec-80c7c82d4773",
          "publishedAt": "2025-09-09T04:31:18.387709537Z",
          "updatedAt": "2025-09-12T03:19:04.504086728Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.mintmcp/gmail",
      "description": "A MCP server server for Gmail that lets you search, read, and draft emails and replies.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gmail.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "108ee330-287d-40a7-98c6-6806dbb9eeac",
          "versionId": "16f913d5-3f6f-450c-b786-76d38d374b10",
          "publishedAt": "2025-09-09T19:44:30.662664985Z",
          "updatedAt": "2025-09-09T19:49:24.179849796Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.jkakar/recipe-mcp",
      "description": "Generate and remix recipes using cookwith.co",
      "status": "active",
      "repository": {
        "url": "https://github.com/blaideinc/recipe-mcp",
        "source": "github"
      },
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cookwith/recipe-mcp",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c3b3c3c7-4e0d-4529-bc19-85c18239baf4",
          "versionId": "1742332b-fc04-4efd-ad35-64d5ef1a1227",
          "publishedAt": "2025-09-11T18:33:51.803815048Z",
          "updatedAt": "2025-09-11T18:33:51.803815048Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/pinion05-supabase-mcp-lite",
      "description": "Same functionality, consuming only 1/20 of the context window tokens.",
      "status": "active",
      "repository": {
        "url": "https://github.com/pinion05/supabase-mcp-lite",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pinion05/supabase-mcp-lite/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "d2df22c5-6e10-4670-9847-4dc7ac600520",
          "versionId": "175bfcef-d334-420a-bedd-80f47cb1a53d",
          "publishedAt": "2025-09-17T09:26:34.424829695Z",
          "updatedAt": "2025-09-17T09:26:34.424829695Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.xcodebuildmcp/XcodeBuildMCP",
      "description": "XcodeBuildMCP provides tools for Xcode project management, simulator management, and app utilities.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cameroncooke/XcodeBuildMCP",
        "source": "github",
        "id": "945551361"
      },
      "version": "1.14.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "xcodebuildmcp",
          "version": "1.14.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Enable experimental xcodemake incremental builds (true/false or 1/0).",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false",
                "1",
                "0"
              ],
              "name": "INCREMENTAL_BUILDS_ENABLED"
            },
            {
              "description": "Enable AI-powered dynamic tool discovery to load only relevant workflows.",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "XCODEBUILDMCP_DYNAMIC_TOOLS"
            },
            {
              "description": "Comma-separated list of workflows to load in Static Mode (e.g., 'simulator,device,project-discovery').",
              "format": "string",
              "name": "XCODEBUILDMCP_ENABLED_WORKFLOWS"
            },
            {
              "description": "Disable Sentry error reporting (preferred flag).",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "XCODEBUILDMCP_SENTRY_DISABLED"
            },
            {
              "description": "Enable verbose debug logging from the server.",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "XCODEBUILDMCP_DEBUG"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "be9105fb-f8cb-4151-b6f8-21b49fd71fed",
          "versionId": "1796acca-2fb5-431d-9fd0-4f5f5be0f020",
          "publishedAt": "2025-09-22T20:19:27.621246958Z",
          "updatedAt": "2025-09-22T20:19:27.621246958Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.remote-mcp/registry-mcp",
      "description": "An MCP server that serves informtaion from the official MCP registry",
      "status": "active",
      "repository": {
        "url": "https://github.com/jaw9c/mcp-registry-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://registry-mcp.remote-mcp.com"
        },
        {
          "type": "sse",
          "url": "https://registry-mcp.remote-mcp.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b90f6378-c952-4081-8c7b-2865bf8409bb",
          "versionId": "17de8cb0-997b-43c7-9bef-b3f1a59c188c",
          "publishedAt": "2025-09-09T11:30:24.582712708Z",
          "updatedAt": "2025-09-09T11:30:24.582712708Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.scorecard/mcp",
      "description": "MCP server providing access to the Scorecard API to evaluate and optimize LLM systems.",
      "status": "active",
      "repository": {
        "url": "https://github.com/scorecard-ai/scorecard-node",
        "source": "github"
      },
      "version": "2.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "scorecard-ai-mcp",
          "version": "2.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Scorecard API key for authentication. Get your API key from https://app.scorecard.io/settings",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "SCORECARD_API_KEY"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.scorecard.io/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "0ea5c5ff-6a19-454d-a596-e0753501f0fd",
          "versionId": "17f67eb6-fd05-4299-b453-ec64f85b2c50",
          "publishedAt": "2025-09-12T04:07:55.578778925Z",
          "updatedAt": "2025-09-12T04:07:55.578778925Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "app.zenable/zenable",
      "description": "Zenable cleans up sloppy AI code and prevents vulnerabilities with deterministic guardrails",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.www.zenable.app/"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "06d38121-a76a-47ba-9827-dc181b7cc167",
          "versionId": "18d8185d-62e2-4d83-bbbc-37675b55ef26",
          "publishedAt": "2025-09-10T14:04:47.647565515Z",
          "updatedAt": "2025-09-10T14:04:47.647565515Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.19-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.19-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
          "versionId": "18e0107f-76d1-4655-ad09-1c17763150aa",
          "publishedAt": "2025-09-10T16:00:22.183688927Z",
          "updatedAt": "2025-09-16T22:11:37.318046537Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-perplexity-search",
      "description": "Enable AI assistants to perform web searches using Perplexity's Sonar Pro.",
      "status": "active",
      "repository": {
        "url": "https://github.com/arjunkmrm/perplexity-search",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/perplexity-search/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "e931a883-4772-46cc-a9a7-dd1bc42e5cc4",
          "versionId": "19236d9d-7d7e-40ea-bcb8-5ab23a75d4a7",
          "publishedAt": "2025-09-10T13:59:26.758557156Z",
          "updatedAt": "2025-09-10T13:59:26.758557156Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.king-of-the-grackles/reddit-research-mcp",
      "description": "Turn Reddit's chaos into structured insights with full citations - MCP server for Reddit research",
      "status": "active",
      "repository": {
        "url": "https://github.com/king-of-the-grackles/reddit-research-mcp",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "reddit-research-mcp",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "6a863ccf-8152-40c9-9805-3d66ce2d2366",
          "versionId": "195f28fb-411d-4e9b-8b97-0ee69c44c7d6",
          "publishedAt": "2025-09-09T03:30:11.721350071Z",
          "updatedAt": "2025-09-09T03:30:11.721350071Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.augmnt/augments-mcp-server",
      "description": "Augments MCP Server - A comprehensive framework documentation provider for Claude Code",
      "status": "active",
      "repository": {
        "url": "https://github.com/augmnt/augments-mcp-server",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "augments-mcp-server",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c76dece6-08e7-4a57-af81-2e6209f8e884",
          "versionId": "19c65252-d9f4-4e5c-9a87-b57990b03b5e",
          "publishedAt": "2025-09-12T16:52:50.968512218Z",
          "updatedAt": "2025-09-12T16:52:50.968512218Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/hustcc-mcp-mermaid",
      "description": "Generate dynamic Mermaid diagrams and charts with AI assistance. Customize styles and export diagr…",
      "status": "active",
      "repository": {
        "url": "https://github.com/hustcc/mcp-mermaid",
        "source": "github"
      },
      "version": "0.1.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@hustcc/mcp-mermaid/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c9040f9c-9d06-4bff-8628-414f6e078979",
          "versionId": "19e98005-9ca2-4eca-84a9-6af3a8c689d0",
          "publishedAt": "2025-09-13T06:08:16.370383217Z",
          "updatedAt": "2025-09-13T06:08:16.370383217Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "status": "active",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.100.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.100.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "6836138f-2ad2-4feb-8043-ea425ecb0d71",
          "versionId": "1b4d9835-1839-4365-b9bc-0b689c371247",
          "publishedAt": "2025-09-24T21:49:38.605228419Z",
          "updatedAt": "2025-09-24T21:49:38.605228419Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.nesquikm/rubber-duck",
      "description": "An MCP server that bridges to multiple OpenAI-compatible LLMs - your AI rubber duck debugging panel",
      "status": "active",
      "repository": {
        "url": "https://github.com/nesquikm/mcp-rubber-duck",
        "source": "github"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-rubber-duck",
          "version": "1.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "OpenAI API key (starts with sk-)",
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            },
            {
              "description": "Google Gemini API key",
              "format": "string",
              "isSecret": true,
              "name": "GEMINI_API_KEY"
            },
            {
              "description": "Groq API key (starts with gsk_)",
              "format": "string",
              "isSecret": true,
              "name": "GROQ_API_KEY"
            },
            {
              "description": "Default LLM provider to use",
              "format": "string",
              "name": "DEFAULT_PROVIDER"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "dbd4508f-845e-46ef-829d-505c9d3a67b4",
          "versionId": "1be3d1ef-0844-4f16-a4b9-e34e458b5485",
          "publishedAt": "2025-09-17T13:24:12.420293436Z",
          "updatedAt": "2025-09-17T13:24:12.420293436Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.karanb192/reddit-mcp-buddy",
      "description": "Reddit MCP server - browse posts, search content, analyze users.",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "reddit-mcp-buddy",
          "version": "1.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "bc98ac4e-cb60-435b-a426-f18a6b1c0076",
          "versionId": "1cbefa81-a37b-45ad-bca6-cefce39cad21",
          "publishedAt": "2025-09-17T15:39:49.253376736Z",
          "updatedAt": "2025-09-20T10:45:00.302258169Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.ref-tools/ref-tools-mcp",
      "description": "Token efficient search for coding agents over public and private documentation.",
      "status": "active",
      "repository": {
        "url": "https://github.com/ref-tools/ref-tools-mcp",
        "source": "github"
      },
      "version": "3.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "ref-tools-mcp",
          "version": "3.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for Ref",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "REF_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "9cae00f1-5399-4189-836a-537b154e31a6",
          "versionId": "1cc2e5dc-cf3d-48d2-bd0b-79c31dd6edd7",
          "publishedAt": "2025-09-09T20:04:16.022584551Z",
          "updatedAt": "2025-09-09T20:04:16.022584551Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "co.pipeboard/meta-ads-mcp",
      "description": "Facebook / Meta Ads automation with AI: analyze performance, test creatives, optimize spend.",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.11",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.pipeboard.co/meta-ads-mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "51e23615-8cdd-47f0-84d3-df448e34a4e7",
          "versionId": "1dfd25e7-717b-4f95-a6be-5c41f761baf3",
          "publishedAt": "2025-09-24T15:11:32.888511284Z",
          "updatedAt": "2025-09-24T16:14:42.455796841Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "status": "active",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "0.6.3-p1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ipybox",
          "version": "0.6.3-p1",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Required MCP server subcommand",
              "isRequired": true,
              "value": "mcp",
              "type": "positional"
            },
            {
              "description": "Directory allowed for host filesystem operations",
              "type": "named",
              "name": "--allowed-dir",
              "isRepeated": true,
              "valueHint": "directory_path"
            },
            {
              "description": "Domain, IP address, or CIDR range allowed for outbound network access",
              "type": "named",
              "name": "--allowed-domain",
              "isRepeated": true,
              "valueHint": "domain_or_ip"
            },
            {
              "description": "Docker image tag to use",
              "type": "named",
              "name": "--container-tag",
              "valueHint": "docker_image_tag"
            },
            {
              "description": "Environment variable for container (KEY=VALUE format)",
              "type": "named",
              "name": "--container-env-var",
              "isRepeated": true,
              "valueHint": "env_var"
            },
            {
              "description": "Path to file containing container environment variables",
              "type": "named",
              "name": "--container-env-file",
              "valueHint": "file_path"
            },
            {
              "description": "Bind mount for container (host_path:container_path format)",
              "type": "named",
              "name": "--container-bind",
              "isRepeated": true,
              "valueHint": "bind_mount"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2310a088-c5ba-429e-84b2-82d92622023b",
          "versionId": "1e90334c-ebe1-4973-afe7-68b76da27b52",
          "publishedAt": "2025-09-14T08:06:30.959441839Z",
          "updatedAt": "2025-09-14T08:06:30.959441839Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.supabase/mcp",
      "description": "MCP server for interacting with the Supabase platform",
      "status": "active",
      "repository": {
        "url": "https://github.com/supabase-community/supabase-mcp",
        "source": "github",
        "subfolder": "packages/mcp-server-supabase"
      },
      "version": "0.5.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@supabase/mcp-server-supabase",
          "version": "0.5.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "Supabase project reference ID",
              "format": "string",
              "type": "named",
              "name": "--project-ref"
            },
            {
              "description": "Enable read-only mode",
              "format": "boolean",
              "type": "named",
              "name": "--read-only"
            },
            {
              "description": "Comma-separated list of features to enable",
              "format": "string",
              "type": "named",
              "name": "--features"
            },
            {
              "description": "Custom API URL",
              "format": "string",
              "type": "named",
              "name": "--api-url"
            }
          ],
          "environmentVariables": [
            {
              "description": "Personal access token for Supabase API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "SUPABASE_ACCESS_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b7c21a79-6a4a-42e2-a194-944a1d1ed9f7",
          "versionId": "1f03f6b8-4a9d-45b3-9f7c-704390897d0b",
          "publishedAt": "2025-09-15T20:35:36.816470801Z",
          "updatedAt": "2025-09-18T21:32:17.517420898Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.ruvnet/flow-nexus",
      "description": "Cloud-powered AI platform with multi-agent swarms, sandboxes, and workflow automation",
      "status": "active",
      "repository": {
        "url": "https://github.com/ruvnet/flow-nexus",
        "source": "github"
      },
      "version": "0.1.121",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "flow-nexus",
          "version": "0.1.121",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key for Flow Nexus authentication",
              "format": "string",
              "isSecret": true,
              "name": "FLOW_NEXUS_API_KEY"
            },
            {
              "description": "Base URL for Flow Nexus API",
              "format": "string",
              "name": "FLOW_NEXUS_BASE_URL"
            },
            {
              "description": "E2B API key for sandbox creation",
              "format": "string",
              "isSecret": true,
              "name": "E2B_API_KEY"
            },
            {
              "description": "Anthropic API key for Claude integration",
              "format": "string",
              "isSecret": true,
              "name": "ANTHROPIC_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b3bb56af-1134-4509-8d39-6e0ea641e4f1",
          "versionId": "2052b35f-4321-4d32-88b9-0c4ca09771a0",
          "publishedAt": "2025-09-10T16:22:10.934865687Z",
          "updatedAt": "2025-09-10T16:22:10.934865687Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
      "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
      "status": "active",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/confluence",
          "version": "0.9.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "CONFLUENCE_HOST"
            },
            {
              "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
              "format": "string",
              "name": "CONFLUENCE_API_BASE_PATH"
            },
            {
              "description": "Confluence Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CONFLUENCE_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b6e7826e-d1cb-43c9-8c12-391ed0538937",
          "versionId": "2117fb24-f585-49b9-aa0e-e1633980e5ac",
          "publishedAt": "2025-09-13T13:29:18.54035901Z",
          "updatedAt": "2025-09-13T13:29:18.54035901Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "app.thoughtspot/mcp-server",
      "description": "MCP Server for ThoughtSpot - provides OAuth authentication and tools for querying data",
      "status": "active",
      "repository": {
        "url": "https://github.com/thoughtspot/mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://agent.thoughtspot.app/mcp"
        },
        {
          "type": "sse",
          "url": "https://agent.thoughtspot.app/sse"
        },
        {
          "type": "streamable-http",
          "url": "https://agent.thoughtspot.app/bearer/mcp",
          "headers": [
            {
              "description": "Bearer token for authentication, have the ts-host as 'token@ts-host' or as a separate 'x-ts-host' header",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            },
            {
              "description": "ThoughtSpot instance URL, if not provided in the authorization header",
              "isRequired": true,
              "name": "X-TS-Host"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://agent.thoughtspot.app/bearer/sse",
          "headers": [
            {
              "description": "Bearer token for authentication, have the ts-host as 'token@ts-host' or as a separate 'x-ts-host' header",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            },
            {
              "description": "ThoughtSpot instance URL, if not provided in the authorization header",
              "isRequired": true,
              "name": "X-TS-Host"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c695356d-8607-402e-b15d-651af6d3cac7",
          "versionId": "218d380f-328d-43a2-8811-1e38078fb7ab",
          "publishedAt": "2025-09-17T20:14:22.451730803Z",
          "updatedAt": "2025-09-17T20:15:17.375784438Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/smithery-notion",
      "description": "A Notion workspace is a collaborative environment where teams can organize work, manage projects,…",
      "status": "active",
      "repository": {
        "url": "https://github.com/smithery-ai/mcp-servers",
        "source": "github",
        "subfolder": "notion"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery/notion/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "e6bcbeb4-84b4-4cba-b0fc-c4e910e6d117",
          "versionId": "21d4f4da-932c-4f65-8b5f-9cc4e24b7406",
          "publishedAt": "2025-09-10T18:26:59.341637458Z",
          "updatedAt": "2025-09-10T18:26:59.341637458Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.7",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
          "versionId": "221fc588-c202-4bdf-ad8a-8b5843e604f7",
          "publishedAt": "2025-09-12T04:24:04.024827907Z",
          "updatedAt": "2025-09-12T04:28:40.56365786Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.pkolawa/mcp-krs-poland",
      "description": "Polish National government's registry of all businesses, foundations, and other legal entities.",
      "status": "active",
      "repository": {
        "url": "https://github.com/pkolawa/mcp-krs-poland",
        "source": "github"
      },
      "version": "1.0.11",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "krs-poland-mcp-server",
          "version": "1.0.11",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "71338ebf-dc34-4aaa-a84e-0926053a07f5",
          "versionId": "2384ee5f-1c12-429b-980f-f26c38c2d6f9",
          "publishedAt": "2025-09-21T06:20:54.765527461Z",
          "updatedAt": "2025-09-21T06:20:54.765527461Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.jjlabsio/korea-stock-mcp",
      "description": "MCP server for korea stock",
      "status": "active",
      "repository": {
        "url": "https://github.com/jjlabsio/korea-stock-mcp",
        "source": "github"
      },
      "version": "1.1.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "korea-stock-mcp",
          "version": "1.1.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "DART API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "DART_API_KEY"
            },
            {
              "description": "KRX API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "KRX_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "02439721-a2d0-48d9-88ce-98494ba8e97f",
          "versionId": "242d7040-4e0c-4736-a478-9815b9754c10",
          "publishedAt": "2025-09-19T09:51:42.286475103Z",
          "updatedAt": "2025-09-19T09:51:42.286475103Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/rfdez-pvpc-mcp-server",
      "description": "Retrieve daily PVPC electricity tariffs for 2.0 TD consumers, published by Red Eléctrica.",
      "status": "active",
      "repository": {
        "url": "https://github.com/rfdez/pvpc-mcp-server",
        "source": "github"
      },
      "version": "3.2.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@rfdez/pvpc-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "351f53a0-7d2d-40aa-adeb-a203878ff560",
          "versionId": "24646991-b0ea-4ad2-b588-37034ff85880",
          "publishedAt": "2025-09-10T16:57:17.590562136Z",
          "updatedAt": "2025-09-10T16:57:17.590562136Z",
          "isLatest": true
        }
      }
    },
    {
      "name": "io.github.jkakar/cookwith-mcp",
      "description": "AI-powered recipe generation and transformation tools by Cookwith",
      "repository": {
        "url": "https://github.com/blaideinc/cookwith-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ad9ef150-dd99-4913-b5f4-3769ff823300",
          "versionId": "2483b5fd-74cb-482a-8d83-364b07fc6a2b",
          "publishedAt": "2025-09-12T19:23:45.409934957Z",
          "updatedAt": "2025-09-12T19:27:49.34612908Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.shawndurrani/mcp-merchant",
      "description": "Search-only commerce MCP server backed by Stripe (test)",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-merchant",
          "version": "0.1.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Stripe secret key (test mode)",
              "isRequired": true,
              "isSecret": true,
              "name": "STRIPE_SECRET_KEY"
            },
            {
              "description": "Max products to cache",
              "default": "100",
              "name": "PRODUCT_LIMIT"
            },
            {
              "description": "Catalog refresh interval in seconds",
              "default": "600",
              "name": "REFRESH_INTERVAL_SEC"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.shawndurrani.ai/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8681fb6c-725d-4896-b15e-1088ffe74743",
          "versionId": "24a55245-1997-4508-bb34-05d67c9795ad",
          "publishedAt": "2025-09-14T02:22:00.475570659Z",
          "updatedAt": "2025-09-16T22:54:28.465114324Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.anyproto/anytype-mcp",
      "description": "Official MCP server for Anytype API - your encrypted, local and collaborative wiki.",
      "status": "active",
      "repository": {
        "url": "https://github.com/anyproto/anytype-mcp",
        "source": "github"
      },
      "version": "1.0.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@anyproto/anytype-mcp",
          "version": "1.0.7",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "JSON string of headers for Anytype API. Example: {\"Authorization\":\"Bearer <YOUR_API_KEY>\", \"Anytype-Version\":\"2025-05-20\"}",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "OPENAPI_MCP_HEADERS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "26028bb5-46f8-4478-9948-a9213fb52ce8",
          "versionId": "24ac8760-a6df-4111-bcb6-b2d77f2c42c1",
          "publishedAt": "2025-09-17T11:42:47.920301036Z",
          "updatedAt": "2025-09-17T11:42:47.920301036Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "net.nymbo/tools",
      "description": "Remote MCP server: fetch, search, Python, TTS, memory, image, video.",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.nymbo.net/gradio_api/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "4ab22cda-40f6-4ac1-95eb-dc96474ae75f",
          "versionId": "251bf0dd-c4b0-4889-a9e1-447bd23d3d36",
          "publishedAt": "2025-09-13T23:56:21.830662858Z",
          "updatedAt": "2025-09-13T23:56:21.830662858Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.formulahendry/code-runner",
      "description": "Code Runner MCP Server which can run code in various programming languages.",
      "status": "active",
      "repository": {
        "url": "https://github.com/formulahendry/mcp-server-code-runner",
        "source": "github"
      },
      "version": "0.1.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-code-runner",
          "version": "0.1.8",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b835c535-cd49-4a14-85b0-88f2aa27738d",
          "versionId": "25a214da-4b05-45e3-832e-601fd8092aa1",
          "publishedAt": "2025-09-09T04:42:11.802682449Z",
          "updatedAt": "2025-09-09T04:42:11.802682449Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.mfukushim/map-traveler-mcp",
      "description": "Virtual traveler library for MCP",
      "status": "active",
      "repository": {
        "url": "https://github.com/mfukushim/map-traveler-mcp",
        "source": "github"
      },
      "version": "0.1.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mfukushim/map-traveler-mcp",
          "version": "0.1.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "[Map] Google Map API key",
              "format": "string",
              "isSecret": true,
              "name": "MT_GOOGLE_MAP_KEY"
            },
            {
              "description": "[Image.gemini] Gemini Image Api key",
              "format": "string",
              "isSecret": true,
              "name": "MT_GEMINI_IMAGE_KEY"
            },
            {
              "description": "[Image.gemini] Number of retries when generating Gemini images Default: 0",
              "format": "string",
              "name": "MT_MAX_RETRY_GEMINI"
            },
            {
              "description": "[Image.gemini] Character reference image uri (file:// or https://) when generating Gemini image. Multiple settings can be made by separating them with the '|'. When multiple settings are made, they will be selected randomly.",
              "format": "string",
              "name": "MT_AVATAR_IMAGE_URI"
            },
            {
              "description": "[Map.etc] Optional: Map API custom endpoint. Example: direction=https://xxxx,places=https://yyyy ",
              "format": "string",
              "name": "MT_MAP_API_URL"
            },
            {
              "description": "[Map] Optional:Scale of travel time on real roads duration. default 4",
              "format": "string",
              "name": "MT_TIME_SCALE"
            },
            {
              "description": "[db.local] db save path: e.g. %USERPROFILE%/Desktop/traveler.sqlite ,$HOME/traveler.sqlite ",
              "format": "string",
              "name": "MT_SQLITE_PATH"
            },
            {
              "description": "[db.api] Turso sqlite API URL",
              "format": "string",
              "name": "MT_TURSO_URL"
            },
            {
              "description": "[db.api] Turso sqlite API access token",
              "format": "string",
              "isSecret": true,
              "name": "MT_TURSO_TOKEN"
            },
            {
              "description": "[rembg.local] absolute path of the installed rembg cli",
              "format": "string",
              "name": "MT_REMBG_PATH"
            },
            {
              "description": "[rembg.api] withoutbg.com rembg API URL",
              "format": "string",
              "name": "MT_REMBG_URL"
            },
            {
              "description": "[rembg.api] withoutbg.com rembg API key",
              "format": "string",
              "isSecret": true,
              "name": "MT_REMBG_WO_KEY"
            },
            {
              "description": "[Image.pixAi] pixAi API key",
              "format": "string",
              "isSecret": true,
              "name": "MT_PIXAI_KEY"
            },
            {
              "description": "[Image.sd] Stability.ai image generation API key",
              "format": "string",
              "isSecret": true,
              "name": "MT_SD_KEY"
            },
            {
              "description": "[Image.pixAi] Optional: pixAi ModelId, if not set use default model 1648918127446573124 ",
              "format": "string",
              "name": "MT_PIXAI_MODEL_ID"
            },
            {
              "description": "[Image.local.ComfyUi] Option: Generate image using ComfyUI API at specified URL. Example: http://192.168.1.100:8188",
              "format": "string",
              "name": "MT_COMFY_URL"
            },
            {
              "description": "[Image.local.ComfyUi] Optional: Path to API workflow file when using text to image with ComfyUI. If not specified: assets/comfy/t2i_sample.json",
              "format": "string",
              "name": "MT_COMFY_WORKFLOW_T2I"
            },
            {
              "description": "[Image.local.ComfyUi] Optional: Path of API workflow file when image to image in ComfyUI. If not specified: assets/comfy/i2i_sample.json",
              "format": "string",
              "name": "MT_COMFY_WORKFLOW_I2I"
            },
            {
              "description": "[Image.local.ComfyUi] Optional: Variable values to send to the workflow via comfyUI API",
              "format": "string",
              "name": "MT_COMFY_PARAMS"
            },
            {
              "description": "[Image] Optional: Fixed avatar generation prompt. You will no longer be able to change your avatar during conversations.",
              "format": "string",
              "name": "MT_FIXED_MODEL_PROMPT"
            },
            {
              "description": "[Image] Optional: Acceptable avatar image area ratio. default 0.042",
              "format": "string",
              "name": "MT_BODY_AREA_RATIO"
            },
            {
              "description": "[Image] Optional: Acceptable avatar image aspect ratios. default 1.5~2.3",
              "format": "string",
              "name": "MT_BODY_HW_RATIO"
            },
            {
              "description": "[Image] Optional: Avatar composite window horizontal ratio. default 0.5",
              "format": "string",
              "name": "MT_BODY_WINDOW_RATIO_W"
            },
            {
              "description": "[Image] Optional: Avatar composite window aspect ratio. default 0.75",
              "format": "string",
              "name": "MT_BODY_WINDOW_RATIO_H"
            },
            {
              "description": "[Sns.Bs] Bluesky sns registration address",
              "format": "string",
              "name": "MT_BS_ID"
            },
            {
              "description": "[Sns.Bs] bluesky sns password",
              "format": "string",
              "isSecret": true,
              "name": "MT_BS_PASS"
            },
            {
              "description": "[Sns.Bs] bluesky sns handle name: e.g. xxxxxxxx.bsky.social ",
              "format": "string",
              "name": "MT_BS_HANDLE"
            },
            {
              "description": "[etc] Optional: Directly filter the tools to be used. All are available if not specified. e.g. tips,set_traveler_location",
              "format": "string",
              "name": "MT_FILTER_TOOLS"
            },
            {
              "description": "[etc] Option: Specify whether the movement mode is 'realtime' or 'skip'. default realtime",
              "format": "string",
              "name": "MT_MOVE_MODE"
            },
            {
              "description": "[Image] Option: Output image width (pixels) Default is 512",
              "format": "string",
              "name": "MT_IMAGE_WIDTH"
            },
            {
              "description": "[Image] Options: 'true' = do not output image, not specified = output image if possible, default is not specified",
              "format": "string",
              "name": "MT_NO_IMAGE"
            },
            {
              "description": "[Image] Option: 'true' = Output StreetView image as is without avatar superimposition. Not specified = Superimpose avatar image. Default is not specified.",
              "format": "string",
              "name": "MT_NO_AVATAR"
            },
            {
              "description": "[Sns] Optional: Specify the feed tag when posting to SNS (#required, 15 characters or more) Default is #geo_less_traveler",
              "format": "string",
              "name": "MT_FEED_TAG"
            },
            {
              "description": "[Streamable-http] Maximum number of sessions when using Streamable-http",
              "format": "string",
              "name": "MT_MAX_SESSIONS"
            },
            {
              "description": "[Streamable-http] Session TTL when using Streamable-http",
              "format": "string",
              "name": "MT_SESSION_TTL_MS"
            },
            {
              "description": "[Streamable-http] Service TTL when using Streamable-http",
              "format": "string",
              "name": "MT_SERVICE_TTL_MS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "700a297c-8d86-4f69-889c-7d3c1b20b7cf",
          "versionId": "25d413a1-8cc0-491e-bfdd-cb759305516b",
          "publishedAt": "2025-09-11T12:17:16.508389545Z",
          "updatedAt": "2025-09-11T12:17:16.508389545Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/alphago2580-naramarketmcp",
      "description": "Access Korea’s G2B procurement and Nara Market data for bid notices, awards, contracts, statistics…",
      "status": "active",
      "repository": {
        "url": "https://github.com/alphago2580/naramarketmcp",
        "source": "github"
      },
      "version": "1.14.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@alphago2580/naramarketmcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "df96996d-30f8-49ea-9012-02117777747c",
          "versionId": "25e1e4ce-1eae-45d6-9b48-0ae6ae00d59d",
          "publishedAt": "2025-09-19T02:36:55.167644104Z",
          "updatedAt": "2025-09-19T02:36:55.167644104Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.MasonChow/source-map-parser-mcp",
      "description": "Parse JavaScript error stack traces back to original source code using source maps",
      "status": "active",
      "repository": {
        "url": "https://github.com/MasonChow/source-map-parser-mcp",
        "source": "github"
      },
      "version": "1.3.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "source-map-parser-mcp",
          "version": "1.3.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Context lines around error locations in source code",
              "format": "string",
              "name": "SOURCE_MAP_PARSER_CONTEXT_OFFSET_LINE"
            },
            {
              "description": "Maximum memory cache size in MB for source maps",
              "format": "string",
              "name": "SOURCE_MAP_PARSER_RESOURCE_CACHE_MAX_SIZE"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c3b2f423-320c-4bee-8463-ec298459b767",
          "versionId": "26bccebb-a881-4993-b339-5d2ea18fd2cb",
          "publishedAt": "2025-09-10T15:03:12.048715379Z",
          "updatedAt": "2025-09-10T15:03:12.048715379Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.jkakar/recipe-mcp",
      "description": "Generate and remix recipes using cookwith.co",
      "status": "active",
      "repository": {
        "url": "https://github.com/blaideinc/recipe-mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cookwith/recipe-mcp",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c3b3c3c7-4e0d-4529-bc19-85c18239baf4",
          "versionId": "2735b14b-33d9-43d1-905f-1166e419ed82",
          "publishedAt": "2025-09-11T18:27:40.577812923Z",
          "updatedAt": "2025-09-11T18:30:58.534722167Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.dba-i/mssql-dba",
      "description": "An MCP server that provides [describe what your server does]",
      "status": "active",
      "repository": {
        "url": "https://github.com/dba-i/mssql-dba",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mssql-dba",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "faf601ec-41a1-4c62-af8d-b81461383e9c",
          "versionId": "27519bf0-ff62-4be2-8806-6d0c9c7cd079",
          "publishedAt": "2025-09-16T16:43:44.243434061Z",
          "updatedAt": "2025-09-16T16:43:44.243434061Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.railwayapp/mcp-server",
      "description": "Official Railway MCP server",
      "status": "active",
      "repository": {
        "url": "https://github.com/railwayapp/railway-mcp-server",
        "source": "github"
      },
      "version": "0.1.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@railway/mcp-server",
          "version": "0.1.5",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "12a26f79-9d5d-41a3-a4c4-a1e855f3545f",
          "versionId": "27d9860e-1449-4ff1-ab18-7adb02c09159",
          "publishedAt": "2025-09-10T20:31:27.714450245Z",
          "updatedAt": "2025-09-10T20:31:27.714450245Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.delorenj/mcp-server-trello",
      "description": "MCP server for Trello boards with rate limiting, type safety, and comprehensive API integration.",
      "status": "active",
      "repository": {
        "url": "https://github.com/delorenj/mcp-server-trello",
        "source": "github"
      },
      "version": "1.5.5",
      "websiteUrl": "https://delorenj.github.io/mcp-server-trello",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@delorenj/mcp-server-trello",
          "version": "1.5.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Trello API key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TRELLO_API_KEY"
            },
            {
              "description": "Your Trello token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TRELLO_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "9b94aaa3-e02f-4538-972e-f332b1428a1d",
          "versionId": "280397f6-cca9-4a7f-8aa9-c82ec4f4518b",
          "publishedAt": "2025-09-21T23:11:11.731178823Z",
          "updatedAt": "2025-09-24T08:48:44.278992465Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.28-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.28-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
          "versionId": "282edfdd-a4e5-46cb-877f-eae2ef06897c",
          "publishedAt": "2025-09-17T01:27:02.813144548Z",
          "updatedAt": "2025-09-17T01:44:26.048539235Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Antonytm/mcp-sitecore-server",
      "description": "A Model Context Protocol server for Sitecore",
      "status": "active",
      "repository": {
        "url": "https://github.com/Antonytm/mcp-sitecore-server",
        "source": "github"
      },
      "version": "1.3.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-sitecore-server",
          "version": "1.3.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": ""
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "397fbabe-4af0-4772-84f5-d660b761255c",
          "versionId": "28732cec-512d-49ec-940e-832ee19277bc",
          "publishedAt": "2025-09-17T16:49:19.073211847Z",
          "updatedAt": "2025-09-17T16:49:19.073211847Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.xcodebuildmcp/XcodeBuildMCP",
      "description": "XcodeBuildMCP provides tools for Xcode project management, simulator management, and app utilities.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cameroncooke/XcodeBuildMCP",
        "source": "github",
        "id": "945551361"
      },
      "version": "1.12.10",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "xcodebuildmcp",
          "version": "1.12.10",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Enable experimental xcodemake incremental builds (true/false or 1/0).",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false",
                "1",
                "0"
              ],
              "name": "INCREMENTAL_BUILDS_ENABLED"
            },
            {
              "description": "Enable AI-powered dynamic tool discovery to load only relevant workflows.",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "XCODEBUILDMCP_DYNAMIC_TOOLS"
            },
            {
              "description": "Comma-separated list of workflows to load in Static Mode (e.g., 'simulator,device,project-discovery').",
              "format": "string",
              "name": "XCODEBUILDMCP_ENABLED_WORKFLOWS"
            },
            {
              "description": "Disable Sentry error reporting (preferred flag).",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "XCODEBUILDMCP_SENTRY_DISABLED"
            },
            {
              "description": "Enable verbose debug logging from the server.",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "XCODEBUILDMCP_DEBUG"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "be9105fb-f8cb-4151-b6f8-21b49fd71fed",
          "versionId": "288ccf72-1fde-4754-8d0e-9d67a9795125",
          "publishedAt": "2025-09-10T14:44:46.398091571Z",
          "updatedAt": "2025-09-22T20:19:27.627630397Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.mintmcp/outlook-email",
      "description": "A MCP server for Outlook email that lets you search, read, and draft emails and replies.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://outlook-email.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c331c604-5fd3-409f-b076-7790b9acbb20",
          "versionId": "29029c32-4067-48c0-b831-058bc34623a1",
          "publishedAt": "2025-09-09T20:02:38.025522049Z",
          "updatedAt": "2025-09-09T20:02:38.025522049Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/smithery-toolbox",
      "description": "Toolbox dynamically routes to all MCPs in the Smithery registry based on your agent's need. When a…",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery/toolbox/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "35c6a9c3-9439-440a-9d97-b5d539c08b9d",
          "versionId": "292995df-7000-4eda-9cdb-2048ac93e8c4",
          "publishedAt": "2025-09-10T20:39:40.188723394Z",
          "updatedAt": "2025-09-10T20:39:40.188723394Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.jkawamoto/mcp-florence2",
      "description": "An MCP server for processing images using Florence-2",
      "status": "active",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-florence2",
        "source": "github"
      },
      "version": "0.3.2",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-florence2/releases/download/v0.3.2/mcp-florence2.mcpb",
          "version": "0.3.2",
          "fileSha256": "58fcb84d444c01f3d7e9a3dd3ea6fa45dc7515663141527936ee8daec2cd0f63",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "dcf30ab3-ffde-4a3f-8d36-522b9e3016e3",
          "versionId": "296598bd-aa8c-4ec5-acc8-4d57ad677139",
          "publishedAt": "2025-09-18T22:50:50.36439604Z",
          "updatedAt": "2025-09-19T00:50:28.853946312Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.spences10/mcp-sqlite-tools",
      "description": "MCP server for local SQLite database operations",
      "status": "active",
      "repository": {
        "url": "https://github.com/spences10/mcp-sqlite-tools",
        "source": "github"
      },
      "version": "0.0.11",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-sqlite-tools",
          "version": "0.0.11",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "7650c939-7113-4dc9-a03d-54d191d03139",
          "versionId": "2a4159ec-d44c-4b6b-85c5-67aa9d054fa0",
          "publishedAt": "2025-09-10T19:01:31.903922632Z",
          "updatedAt": "2025-09-10T19:01:31.903922632Z",
          "isLatest": true
        }
      }
    }
  ]
}