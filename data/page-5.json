{
  "servers": [
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/skr-cloudify-clickup-mcp-server-new",
      "description": "Manage your ClickUp workspace by creating, updating, and organizing tasks, lists, folders, and tag…",
      "status": "active",
      "repository": {
        "url": "https://github.com/skr-cloudify/clickup-mcp-server-new",
        "source": "github"
      },
      "version": "0.8.5",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@skr-cloudify/clickup-mcp-server-new/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8804ecb7-d50a-45ca-b698-3700ebfcf4b5",
          "versionId": "9e7720d9-3476-4dbd-b063-8dc664705ba7",
          "publishedAt": "2025-09-21T11:44:55.497078792Z",
          "updatedAt": "2025-09-21T11:44:55.497078792Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "status": "active",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.5.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
          "versionId": "9ef1c5fc-0d30-4038-b8c0-93f9aaffd1b2",
          "publishedAt": "2025-09-17T15:11:26.206910319Z",
          "updatedAt": "2025-09-17T15:13:14.51544383Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.GabrielaHdzMicrosoft/mcp-server",
      "description": "An MCP server that provides visual memory and context storage with knowledge graph capabilities",
      "status": "active",
      "repository": {
        "url": "https://github.com/testing9384/mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "visual-memory-context-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Path to the memory.json file for knowledge graph storage",
              "format": "string",
              "name": "MEMORY_FILE_PATH"
            },
            {
              "description": "Comma-separated list of directories the server can access, or JSON array format",
              "format": "string",
              "name": "ALLOWED_DIRECTORIES"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2d498eef-9457-47c3-9a42-75c47c70355a",
          "versionId": "9fbd370f-ab2b-446e-a141-37365aa329cd",
          "publishedAt": "2025-09-20T03:14:43.524547161Z",
          "updatedAt": "2025-09-20T03:14:43.524547161Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.5",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a10fab8f-cce3-42a0-b3e4-e34e2f71c41c",
          "versionId": "a001613e-8575-4e5e-821a-46da25cfe8fc",
          "publishedAt": "2025-09-20T22:47:38.649029129Z",
          "updatedAt": "2025-09-20T23:26:41.758996151Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
          "versionId": "a0bcd673-292a-4ba3-8dbc-eaf2ff92e7fc",
          "publishedAt": "2025-09-14T10:06:30.723296411Z",
          "updatedAt": "2025-09-15T13:43:27.500265535Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.balldontlie/mcp",
      "description": "MCP server for BALLDONTLIE API",
      "status": "active",
      "repository": {
        "url": "https://github.com/balldontlie-api/mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.balldontlie.io/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "d5a785f7-4fae-4365-b408-71e79c58a387",
          "versionId": "a1338208-2314-4d5d-bf1b-073348067148",
          "publishedAt": "2025-09-18T00:33:15.822454699Z",
          "updatedAt": "2025-09-18T00:35:55.651573674Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/aryankeluskar-poke-video-mcp",
      "description": "Search your Flashback video library with natural language to instantly find relevant moments. Get…",
      "status": "active",
      "repository": {
        "url": "https://github.com/aryankeluskar/poke-video-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@aryankeluskar/poke-video-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "662c7dac-4f01-4eab-919b-8ba09361e5e4",
          "versionId": "a1ca2e8c-20e7-44f7-a0ad-eb2aef2faf78",
          "publishedAt": "2025-09-14T17:42:05.006813829Z",
          "updatedAt": "2025-09-14T17:42:05.006813829Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.linxule/lotus-wisdom",
      "description": "An MCP server for problem-solving using the Lotus Sutra's wisdom framework.",
      "status": "active",
      "repository": {
        "url": "https://github.com/linxule/lotus-wisdom-mcp",
        "source": "github",
        "id": "963596268"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "lotus-wisdom-mcp",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c87b3c0b-a17f-452b-ab16-ae5b399c6f75",
          "versionId": "a2e1778e-50cf-4972-a9cb-e31a89068e6f",
          "publishedAt": "2025-09-16T23:53:10.712981505Z",
          "updatedAt": "2025-09-16T23:53:10.712981505Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.leshchenko1979/fast-mcp-telegram",
      "description": "Telegram MCP server with search and messaging capabilities",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.4.4",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a1a4d761-5635-480b-b636-4b6fef3c9a77",
          "versionId": "a31f1b64-c682-4771-a4a8-76b0a9d96ec9",
          "publishedAt": "2025-09-11T16:40:10.557651314Z",
          "updatedAt": "2025-09-15T08:03:29.365893275Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.docfork/docfork-mcp",
      "description": "MCP server for Docfork",
      "status": "active",
      "repository": {
        "url": "https://github.com/docfork/docfork-mcp",
        "source": "github"
      },
      "version": "0.7.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "docfork",
          "version": "0.7.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.docfork.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "6dc13ffa-1930-496c-ae98-fded862d1353",
          "versionId": "a6ab98ca-2224-4dc5-b7ce-91f97c40cb56",
          "publishedAt": "2025-09-17T14:44:53.975619664Z",
          "updatedAt": "2025-09-17T14:44:53.975619664Z",
          "isLatest": true
        }
      }
    },
    {
      "name": "io.github.Skills03/scrimba-teaching",
      "description": "Interactive programming teacher using Scrimba methodology for 10x retention",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.2.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "scrimba-teaching-mcp",
          "version": "1.2.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "db943fb5-a144-442c-8cc3-d76be306b58b",
          "versionId": "a6decd3c-fe0b-4537-b0a6-e882cfa50106",
          "publishedAt": "2025-09-21T14:49:14.675603849Z",
          "updatedAt": "2025-09-21T15:36:57.844409094Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.florentine-ai/mcp",
      "description": "MCP server for Florentine.ai - Natural language to MongoDB aggregations",
      "status": "active",
      "repository": {
        "url": "https://github.com/florentine-ai/mcp",
        "source": "github"
      },
      "version": "0.2.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@florentine-ai/mcp",
          "version": "0.1.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "isRequired": true,
              "value": "@florentine-ai/mcp@latest",
              "type": "named",
              "name": "-y"
            }
          ],
          "packageArguments": [
            {
              "description": "The mode to run the MCP server in ('static' or 'dynamic')",
              "isRequired": true,
              "value": "static",
              "type": "named",
              "name": "--mode"
            },
            {
              "description": "Set to true to enable debug logging",
              "format": "boolean",
              "type": "named",
              "name": "--debug"
            },
            {
              "description": "The path to the log file, must be provided if debug is true",
              "format": "filepath",
              "type": "named",
              "name": "--logpath"
            }
          ],
          "environmentVariables": [
            {
              "description": "Your Florentine.ai API key, get it from https://florentine.ai/dashboard",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "FLORENTINE_TOKEN"
            },
            {
              "description": "The LLM service to use, one of 'openai', 'anthropic', 'google' or 'deepseek' (must only be provided if you did not set it in your Florentine.ai account)",
              "format": "string",
              "name": "LLM_SERVICE"
            },
            {
              "description": "Your API key for the LLM service (must only be provided if you did not set it in your Florentine.ai account)",
              "format": "string",
              "isSecret": true,
              "name": "LLM_KEY"
            },
            {
              "description": "Session ID for maintaining server-side context across requests",
              "format": "string",
              "name": "SESSION_ID"
            },
            {
              "description": "Stringified JSON array of return types for the response",
              "format": "string",
              "name": "RETURN_TYPES"
            },
            {
              "description": "Stringified JSON array of values for required inputs keys",
              "format": "string",
              "name": "REQUIRED_INPUTS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1c220829-98d0-47a3-8b2e-09d7d5314f02",
          "versionId": "a7001433-3351-44ed-9efc-c0597677bc94",
          "publishedAt": "2025-09-19T10:37:42.953745468Z",
          "updatedAt": "2025-09-19T10:37:42.953745468Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
      "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
      "status": "active",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/confluence",
          "version": "0.9.7",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "CONFLUENCE_HOST"
            },
            {
              "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
              "format": "string",
              "name": "CONFLUENCE_API_BASE_PATH"
            },
            {
              "description": "Confluence Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CONFLUENCE_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b6e7826e-d1cb-43c9-8c12-391ed0538937",
          "versionId": "a77e222c-d64a-4cd2-a44a-b4e46bdcbfed",
          "publishedAt": "2025-09-13T13:17:33.200471952Z",
          "updatedAt": "2025-09-13T13:18:50.974154729Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.yuna0x0/hackmd-mcp",
      "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
      "status": "active",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github"
      },
      "version": "1.5.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "hackmd-mcp",
          "version": "1.5.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "oci",
          "registryBaseUrl": "https://docker.io",
          "identifier": "yuna0x0/hackmd-mcp",
          "version": "1.5.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.5.0/hackmd-mcp-1.5.0.mcpb",
          "version": "1.5.0",
          "fileSha256": "6035e3082ffaf5627e1293a2c8a5d7f42496010431c9b026859dae3bbaa9ce38",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "e679729a-74ca-4b31-a7f5-80cddd5fa24d",
          "versionId": "a793348b-c4ba-457a-aa80-6b7269adc4ce",
          "publishedAt": "2025-09-15T03:10:52.965842649Z",
          "updatedAt": "2025-09-21T14:08:58.295677993Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.mintmcp/gcal",
      "description": "A MintMCP server that works with Google Calendar to manage event listing, reading, and updates.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gcal.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "7b265ff1-5cd1-43fe-92c4-54cc6a0fd4d7",
          "versionId": "a7aa8d87-ead3-4ee3-9021-f41edf303f72",
          "publishedAt": "2025-09-09T19:28:43.15437668Z",
          "updatedAt": "2025-09-09T19:35:28.126060102Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.himorishige/hatago-mcp-hub",
      "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
      "status": "active",
      "repository": {
        "url": "https://github.com/himorishige/hatago-mcp-hub",
        "source": "github"
      },
      "version": "0.0.12",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@himorishige/hatago-mcp-hub",
          "version": "0.0.12",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "27980499-f44a-453a-8b3c-6450b5c0947b",
          "versionId": "a7fef886-c01c-4752-877e-b0da11049d3d",
          "publishedAt": "2025-09-13T13:55:18.531630059Z",
          "updatedAt": "2025-09-13T14:40:04.494030232Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.chris-schra/mcp-funnel",
      "description": "MCP proxy that aggregates multiple servers with tool filtering and customization",
      "status": "active",
      "repository": {
        "url": "https://github.com/chris-schra/mcp-funnel",
        "source": "github"
      },
      "version": "0.0.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-funnel",
          "version": "0.0.6",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1efb077e-f618-4258-8924-6e3dae14ef8b",
          "versionId": "a8a5c761-c1dc-4d1d-9100-b57df4c9ec0d",
          "publishedAt": "2025-09-17T18:33:35.912597Z",
          "updatedAt": "2025-09-17T18:55:31.893305521Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Aman-Amith-Shastry-scientific_computation_mcp",
      "description": "This MCP server enables users to perform scientific computations regarding linear algebra and vect…",
      "status": "active",
      "repository": {
        "url": "https://github.com/Aman-Amith-Shastry/scientific_computation_mcp",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Aman-Amith-Shastry/scientific_computation_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "41f4e655-f368-4219-b79c-b0098dd1fc67",
          "versionId": "a8f1ddcb-c162-4a50-8295-74ffbfbf76a7",
          "publishedAt": "2025-09-12T01:14:07.078270174Z",
          "updatedAt": "2025-09-12T01:14:07.078270174Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.OpenCageData/opencage-geocoding-mcp",
      "description": "MCP server for OpenCage geocoding API",
      "status": "active",
      "repository": {
        "url": "https://github.com/OpenCageData/opencage-geocoding-mcp",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@opencage/mcp-opencage-server",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "dfbaac20-a659-45a2-b3e9-dcafb70c703f",
          "versionId": "a953ea94-b7e7-415c-8766-33c4d5b64b4d",
          "publishedAt": "2025-09-11T18:24:40.318380733Z",
          "updatedAt": "2025-09-11T18:24:40.318380733Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.domdomegg/airtable-mcp-server",
      "description": "Read and write access to Airtable database schemas, tables, and records.",
      "status": "active",
      "repository": {
        "url": "https://github.com/domdomegg/airtable-mcp-server.git",
        "source": "github"
      },
      "version": "1.7.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "airtable-mcp-server",
          "version": "1.7.3",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
              "isRequired": true,
              "isSecret": true,
              "name": "AIRTABLE_API_KEY"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "domdomegg/airtable-mcp-server",
          "version": "1.7.3",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
              "isRequired": true,
              "isSecret": true,
              "name": "AIRTABLE_API_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/domdomegg/airtable-mcp-server/releases/download/v1.7.3/airtable-mcp-server.mcpb",
          "version": "1.7.3",
          "fileSha256": "0f28a9129cfebd262dfb77854c872355d21401bb3e056575b3027081f5d570ca",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c4d153eb-b252-4e8e-832b-fe3684fe47ec",
          "versionId": "a9ab84c2-d56e-4bf2-8dc2-ad725fdb8d27",
          "publishedAt": "2025-09-12T03:19:04.49211253Z",
          "updatedAt": "2025-09-12T03:19:04.49211253Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/plainyogurt21-sec-edgar-mcp",
      "description": "Provide AI assistants with real-time access to official SEC EDGAR filings and financial data. Enab…",
      "status": "active",
      "repository": {
        "url": "https://github.com/plainyogurt21/sec-edgar-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@plainyogurt21/sec-edgar-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "eb1e35b7-1b58-4236-a861-544e7c7e35f3",
          "versionId": "aa5b856a-de58-4023-b828-489a606c4fba",
          "publishedAt": "2025-09-13T21:20:44.610657663Z",
          "updatedAt": "2025-09-13T21:20:44.610657663Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "status": "active",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "0.6.6",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ipybox",
          "version": "0.6.6",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Required MCP server subcommand",
              "isRequired": true,
              "value": "mcp",
              "type": "positional"
            },
            {
              "description": "Directory allowed for host filesystem operations",
              "type": "named",
              "name": "--allowed-dir",
              "isRepeated": true,
              "valueHint": "directory_path"
            },
            {
              "description": "Domain, IP address, or CIDR range allowed for outbound network access",
              "type": "named",
              "name": "--allowed-domain",
              "isRepeated": true,
              "valueHint": "domain_or_ip"
            },
            {
              "description": "Docker image tag to use",
              "type": "named",
              "name": "--container-tag",
              "valueHint": "docker_image_tag"
            },
            {
              "description": "Environment variable for container (KEY=VALUE format)",
              "type": "named",
              "name": "--container-env-var",
              "isRepeated": true,
              "valueHint": "env_var"
            },
            {
              "description": "Path to file containing container environment variables",
              "type": "named",
              "name": "--container-env-file",
              "valueHint": "file_path"
            },
            {
              "description": "Bind mount for container (host_path:container_path format)",
              "type": "named",
              "name": "--container-bind",
              "isRepeated": true,
              "valueHint": "bind_mount"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2310a088-c5ba-429e-84b2-82d92622023b",
          "versionId": "aa8580fa-a837-4ca7-83b3-181bed182529",
          "publishedAt": "2025-09-14T09:57:57.864977026Z",
          "updatedAt": "2025-09-14T09:57:57.864977026Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.iunera/druid-mcp-server",
      "description": "AI-powered MCP server for Apache Druid cluster management and analytic",
      "status": "active",
      "repository": {
        "url": "https://github.com/iunera/druid-mcp-server",
        "source": "github"
      },
      "version": "1.2.2",
      "packages": [
        {
          "registryType": "oci",
          "registryBaseUrl": "https://docker.io",
          "identifier": "iunera/druid-mcp-server",
          "version": "1.2.2",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Druid router URL for connecting to the Druid cluster",
              "format": "string",
              "name": "DRUID_ROUTER_URL"
            },
            {
              "description": "Username for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_USERNAME"
            },
            {
              "description": "Password for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_PASSWORD"
            },
            {
              "description": "Enable SSL/TLS support for Druid connections",
              "format": "boolean",
              "name": "DRUID_SSL_ENABLED"
            },
            {
              "description": "Skip SSL certificate verification (for development/testing only)",
              "format": "boolean",
              "name": "DRUID_SSL_SKIP_VERIFICATION"
            },
            {
              "description": "Enable read-only mode (only GET requests and SQL queries allowed)",
              "format": "boolean",
              "name": "DRUID_MCP_READONLY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c232e17d-152d-41f2-a532-85e8fa68d73e",
          "versionId": "aac509bd-d725-46a5-9533-655552ccbdb8",
          "publishedAt": "2025-09-24T07:04:32.1707733Z",
          "updatedAt": "2025-09-24T07:04:32.1707733Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a10fab8f-cce3-42a0-b3e4-e34e2f71c41c",
          "versionId": "aacebc3d-14c4-4be3-8b83-384359b8b260",
          "publishedAt": "2025-09-20T21:32:48.546366642Z",
          "updatedAt": "2025-09-20T22:47:38.657176821Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.waystation/monday",
      "description": "Access and manage your Monday.com boards, items, and updates seamlessly",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/monday/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/monday/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "106108da-a505-40bd-b8df-7f82b7cb1d48",
          "versionId": "aaf0e62a-eaa9-49d9-a6f1-c10cf459274e",
          "publishedAt": "2025-09-09T14:20:40.836347203Z",
          "updatedAt": "2025-09-09T14:20:40.836347203Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.3.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.3",
          "runtimeHint": "node",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "stdio",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.3",
          "runtimeHint": "node",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "http",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The host interface for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The HTTP endpoint path for MCP requests.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_STRATEGY"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "69052f97-2b99-4ab4-9d81-0de12a92b966",
          "versionId": "ab48df60-848e-4f96-b5d0-9fa505deb331",
          "publishedAt": "2025-09-15T12:59:07.492836786Z",
          "updatedAt": "2025-09-15T12:59:07.492836786Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.pab1it0/prometheus-mcp-server",
      "description": "MCP server for Prometheus, enabling AI assistants to query metrics and monitor system health",
      "status": "active",
      "repository": {
        "url": "https://github.com/pab1it0/prometheus-mcp-server",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registryType": "oci",
          "registryBaseUrl": "https://ghcr.io",
          "identifier": "pab1it0/prometheus-mcp-server",
          "version": "1.3.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Prometheus server URL (e.g., http://localhost:9090)",
              "isRequired": true,
              "format": "string",
              "name": "PROMETHEUS_URL"
            },
            {
              "description": "Username for Prometheus basic authentication",
              "format": "string",
              "name": "PROMETHEUS_USERNAME"
            },
            {
              "description": "Password for Prometheus basic authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_PASSWORD"
            },
            {
              "description": "Bearer token for Prometheus authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_TOKEN"
            },
            {
              "description": "Organization ID for multi-tenant Prometheus setups",
              "format": "string",
              "name": "ORG_ID"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "e50bf758-19d5-4384-8623-dce5d3e16cf4",
          "versionId": "ab4c5352-d52c-4ce3-8d15-cf55697c4756",
          "publishedAt": "2025-09-21T08:44:02.039810197Z",
          "updatedAt": "2025-09-21T08:44:02.039810197Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.grupo-avispa/dsr_mcp_server",
      "description": "An MCP server that provides tools for interacting with Deep State Representation (DSR) graphs.",
      "status": "active",
      "repository": {
        "url": "https://github.com/grupo-avispa/dsr_mcp_server",
        "source": "github"
      },
      "version": "1.0.0",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a7e371ee-5904-46c1-8b7f-8416cc9b5994",
          "versionId": "aba25196-788f-4923-8fc8-836533ad0745",
          "publishedAt": "2025-09-17T10:15:32.830670599Z",
          "updatedAt": "2025-09-17T10:22:23.142839077Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.abelljs/abell",
      "description": "AI tools related to Abell. Currently includes MCP of Abell",
      "status": "active",
      "repository": {
        "url": "https://github.com/abelljs/abell",
        "source": "github"
      },
      "version": "0.0.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "abell-ai",
          "version": "0.0.9",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "7617c5d3-5ab2-4624-844d-e8cccdaebe52",
          "versionId": "ac1b1492-c254-4727-85e5-21c7efaa26f5",
          "publishedAt": "2025-09-17T14:53:07.562174808Z",
          "updatedAt": "2025-09-17T14:53:07.562174808Z",
          "isLatest": true
        }
      }
    },
    {
      "name": "io.github.ruvnet/claude-flow",
      "description": "AI orchestration with hive-mind swarms, neural networks, and 87 MCP tools for enterprise dev.",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "2.0.0-alpha.105",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "claude-flow",
          "version": "2.0.0-alpha.105",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8362811b-c6cc-401d-92d9-6288295e9104",
          "versionId": "aca46879-069c-4052-99a4-b6941bc6fb26",
          "publishedAt": "2025-09-10T16:46:39.96638146Z",
          "updatedAt": "2025-09-10T16:55:33.075242785Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/MetehanGZL-pokemcp",
      "description": "Provide detailed Pokémon data and information through a standardized MCP interface. Enable LLMs an…",
      "status": "active",
      "repository": {
        "url": "https://github.com/MetehanGZL/PokeMCP",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@MetehanGZL/pokemcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "67952a30-96dc-43c9-95d0-f4e9604d8863",
          "versionId": "ace42071-ecbd-472a-9738-a4701d427aef",
          "publishedAt": "2025-09-15T17:56:16.252320146Z",
          "updatedAt": "2025-09-15T17:56:16.252320146Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.jkakar/recipe-mcp",
      "description": "Generate and remix recipes using cookwith.co",
      "status": "active",
      "repository": {
        "url": "https://github.com/blaideinc/recipe-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cookwith/recipe-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c3b3c3c7-4e0d-4529-bc19-85c18239baf4",
          "versionId": "ad491a05-3439-4f9b-ac52-d3801bdffba4",
          "publishedAt": "2025-09-11T18:11:49.433940965Z",
          "updatedAt": "2025-09-11T18:27:40.596727222Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.notion/mcp",
      "description": "Official Notion MCP server",
      "status": "active",
      "repository": {
        "url": "https://github.com/makenotion/notion-next",
        "source": "github",
        "subfolder": "src/cloudflare-mcp"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.notion.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.notion.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "18044703-a51d-4947-9112-9aff34f8f7a2",
          "versionId": "ad85ae5f-c107-4d47-b2c1-af82a1a9a7af",
          "publishedAt": "2025-09-11T22:19:32.446786781Z",
          "updatedAt": "2025-09-11T22:25:50.746839158Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.biodnd/agent-fin",
      "description": "Agent Fin: finance MCP server with market data tools",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/fin"
      },
      "version": "0.1.2",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-fin.biodnd.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ff2fd401-9a5b-4e68-90c2-442e8adfce1c",
          "versionId": "adc63447-c622-468a-830c-ab9c09d78b92",
          "publishedAt": "2025-09-23T09:47:11.441639121Z",
          "updatedAt": "2025-09-23T09:47:11.441639121Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "status": "active",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.8.4",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.8.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "bd0c41d1-2209-4c3f-8602-d40900053217",
          "versionId": "add45668-2a60-42e1-aed8-09a9f957c589",
          "publishedAt": "2025-09-14T14:57:56.266090296Z",
          "updatedAt": "2025-09-19T15:45:51.337482291Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.26-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.26-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
          "versionId": "ae385caf-a601-48d2-8ff4-eea1cbc424da",
          "publishedAt": "2025-09-16T22:11:37.310707427Z",
          "updatedAt": "2025-09-16T22:30:54.36195718Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.zine/mcp",
      "description": "Your memory, everywhere AI goes. Build knowledge once, access it via MCP anywhere.",
      "status": "active",
      "repository": {
        "url": "https://github.com/graphlit/graphlit-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://www.zine.ai/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "4ebda2a7-88c7-4ff1-8333-09bca54fecbf",
          "versionId": "b082814d-7200-439d-9ebf-9683529e2b33",
          "publishedAt": "2025-09-09T20:16:56.788715831Z",
          "updatedAt": "2025-09-10T18:02:28.779912076Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.tuannvm/mcp-trino",
      "description": "MCP server for Trino distributed SQL query engine access",
      "status": "active",
      "repository": {
        "url": "https://github.com/tuannvm/mcp-trino",
        "source": "github"
      },
      "version": "2.2.1",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/tuannvm/mcp-trino/releases/download/v2.2.1/mcp-trino_2.2.1_darwin_arm64.tar.gz",
          "version": "2.2.1",
          "fileSha256": "1a18882ab43243e17420f3562118a4c3e7fff12bc6b145066ae64b90b2dc0159",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Trino server hostname",
              "isRequired": true,
              "format": "string",
              "name": "TRINO_HOST"
            },
            {
              "description": "Trino server port",
              "format": "string",
              "name": "TRINO_PORT"
            },
            {
              "description": "Trino username",
              "isRequired": true,
              "format": "string",
              "name": "TRINO_USER"
            },
            {
              "description": "Trino password",
              "format": "string",
              "isSecret": true,
              "name": "TRINO_PASSWORD"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "42f447f0-a20c-4afd-ac20-2819cd4e1c5c",
          "versionId": "b092f116-9b0c-4ffd-abb2-a3d2e554c4fc",
          "publishedAt": "2025-09-09T05:26:17.749412364Z",
          "updatedAt": "2025-09-09T05:26:17.749412364Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
          "versionId": "b0d0defb-6cdd-43ea-bcef-6db41f3906f6",
          "publishedAt": "2025-09-14T09:08:13.356523069Z",
          "updatedAt": "2025-09-14T10:06:30.730167416Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.18-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.18-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
          "versionId": "b0d7e2ec-250a-42a7-bc01-198e42672eeb",
          "publishedAt": "2025-09-10T15:31:23.614864173Z",
          "updatedAt": "2025-09-10T16:00:22.19485388Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Lyellr88/marm-mcp-server",
      "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
      "repository": {
        "url": "https://github.com/Lyellr88/MARM-Systems",
        "source": "github"
      },
      "version": "2.2.5",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "marm-mcp-server",
          "version": "2.2.5",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "lyellr88/marm-mcp-server",
          "version": "2.2.5",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "73eda8a1-8138-43c0-ac0e-5f953d1d304e",
          "versionId": "b1e95860-7055-482d-8d1e-33c2883b09ab",
          "publishedAt": "2025-09-23T06:50:35.598480679Z",
          "updatedAt": "2025-09-23T06:50:35.598480679Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.promplate/hmr",
      "description": "Hot Module Reload (HMR) for Python with reactive programming and MCP tools",
      "repository": {
        "url": "https://github.com/promplate/pyth-on-line",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://promplate.github.io/pyth-on-line/hmr/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c15f3ef5-825c-469f-89d1-7193049d6e86",
          "versionId": "b2342344-c506-4b06-a8e3-931cb18d22ef",
          "publishedAt": "2025-09-17T20:50:30.150753217Z",
          "updatedAt": "2025-09-17T20:50:30.150753217Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/rainbowgore-stealthee-mcp-tools",
      "description": "Spot pre-launch products before they trend. Search the web and tech sites, extract and parse pages…",
      "status": "active",
      "repository": {
        "url": "https://github.com/rainbowgore/stealthee-MCP-tools",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@rainbowgore/stealthee-mcp-tools/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c14b315b-8010-40c2-9917-63f695accde9",
          "versionId": "b302b4d4-9e21-40b3-b3ec-72df9940b81c",
          "publishedAt": "2025-09-18T08:35:04.917712832Z",
          "updatedAt": "2025-09-18T08:35:04.917712832Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.letta/memory-mcp",
      "description": "MCP server for AI memory management using Letta - Standard MCP format",
      "status": "active",
      "repository": {
        "url": "https://github.com/letta-ai/memory-mcp",
        "source": "github"
      },
      "version": "2.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@letta-ai/memory-mcp",
          "version": "2.0.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Letta API key for memory operations",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "LETTA_API_KEY"
            },
            {
              "description": "Unique user identifier for associated memories",
              "format": "string",
              "name": "LETTA_USER_ID"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "47424db0-5d42-47d0-a0b4-6e2e6728728a",
          "versionId": "b305e6df-7c51-4067-a28c-d5964c68bd74",
          "publishedAt": "2025-09-09T06:28:26.340372855Z",
          "updatedAt": "2025-09-09T06:28:26.340372855Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.globalping/mcp",
      "description": "Interact with a global network measurement platform.Run network commands from any point in the world",
      "status": "active",
      "repository": {
        "url": "https://github.com/jsdelivr/globalping-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.globalping.io/sse"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.globalping.io/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "e640fcfa-70f4-4b61-b8c2-b385454f22da",
          "versionId": "b30f06c4-c3de-4734-8996-88c9d13ad12c",
          "publishedAt": "2025-09-09T15:58:08.139458885Z",
          "updatedAt": "2025-09-09T15:58:08.139458885Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "status": "active",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
          "versionId": "b31c9266-d01c-42e7-b5e7-4e003977d220",
          "publishedAt": "2025-09-19T09:19:58.329763807Z",
          "updatedAt": "2025-09-19T09:33:46.378865935Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/browserbasehq-mcp-browserbase",
      "description": "Provides cloud browser automation capabilities using Stagehand and Browserbase, enabling LLMs to i…",
      "status": "active",
      "repository": {
        "url": "https://github.com/browserbase/mcp-server-browserbase",
        "source": "github"
      },
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@browserbasehq/mcp-browserbase/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1c32a561-afc2-44be-bedf-1618da2447fe",
          "versionId": "b35a6287-b91e-4a86-9eaa-776fc7d272dc",
          "publishedAt": "2025-09-16T17:17:18.587291714Z",
          "updatedAt": "2025-09-16T17:17:18.587291714Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.AungMyoKyaw/betterprompt-mcp",
      "description": "MCP server for AI-enhanced prompt engineering and request conversion.",
      "status": "active",
      "repository": {
        "url": "https://github.com/AungMyoKyaw/betterprompt-mcp",
        "source": "github"
      },
      "version": "0.2.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "betterprompt-mcp",
          "version": "0.2.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2720ff16-3e16-48b4-9450-f19565e8436c",
          "versionId": "b361137f-582b-4748-8f7f-eb144fd4ed2c",
          "publishedAt": "2025-09-17T17:15:50.170627394Z",
          "updatedAt": "2025-09-17T17:15:50.170627394Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.getclockwise/clockwise-mcp",
      "description": "An MCP server for managing your calendar, via Clockwise",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.getclockwise.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "0f879882-e77f-4b37-8fda-ed0a58934871",
          "versionId": "b3c4cf45-bfc9-44b2-8b0f-d2b07f801567",
          "publishedAt": "2025-09-15T23:12:29.67036488Z",
          "updatedAt": "2025-09-15T23:12:29.67036488Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
          "versionId": "b3f3ce4a-be05-4483-ace1-854555225f00",
          "publishedAt": "2025-09-12T01:55:40.782813803Z",
          "updatedAt": "2025-09-12T02:03:43.967160658Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/duvomike-mcp",
      "description": "Transform numbers by doubling them and adding 5. Get instant results with a clear breakdown of the…",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@duvomike/mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "0b495a18-7c1c-4ddf-9345-6dd23338d345",
          "versionId": "b4258295-044b-4e99-9bb9-758b499017d3",
          "publishedAt": "2025-09-21T03:33:47.332417515Z",
          "updatedAt": "2025-09-21T03:33:47.332417515Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.stefanoamorelli/fred-mcp-server",
      "description": "Federal Reserve Economic Data (FRED) MCP Server - Access all 800,000+ economic time series",
      "status": "active",
      "repository": {
        "url": "https://github.com/stefanoamorelli/fred-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "fred-mcp-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your FRED API key to access the API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "FRED_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a5d0ce37-1375-4d4e-ba5a-2fc31c5083a0",
          "versionId": "b5251106-16c6-40e7-89d7-b123841d18ea",
          "publishedAt": "2025-09-14T11:16:38.3334627Z",
          "updatedAt": "2025-09-14T11:16:38.3334627Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/zwldarren-akshare-one-mcp",
      "description": "Provide access to Chinese stock market data including historical prices, real-time data, news, and…",
      "status": "active",
      "repository": {
        "url": "https://github.com/zwldarren/akshare-one-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@zwldarren/akshare-one-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "7def3fc1-33a9-45bc-b17b-81126c448a27",
          "versionId": "b54429bf-2285-4bc9-bd62-ec79299fc34b",
          "publishedAt": "2025-09-11T19:15:39.848820116Z",
          "updatedAt": "2025-09-11T19:15:39.848820116Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.dynatrace-oss/Dynatrace-mcp",
      "description": "Model Context Protocol server for Dynatrace - access logs, events, metrics from Dynatrace via MCP.",
      "status": "active",
      "repository": {
        "url": "https://github.com/dynatrace-oss/Dynatrace-mcp",
        "source": "github"
      },
      "version": "0.6.0-rc.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@dynatrace-oss/dynatrace-mcp-server",
          "version": "0.6.0-rc.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Dynatrace Platform Token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "DT_PLATFORM_TOKEN"
            },
            {
              "description": "The URL of your Dynatrace environment (e.g. 'https://abc12345.apps.dynatrace.com')",
              "format": "string",
              "name": "DT_ENVIRONMENT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "d7b297de-f1e3-4ea7-979e-291bff370620",
          "versionId": "b5557497-4ef1-4ae1-a7af-08ebce3f5870",
          "publishedAt": "2025-09-15T11:13:59.272010592Z",
          "updatedAt": "2025-09-18T08:07:03.507178909Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.enigma/enigma-mcp-server",
      "description": "An MCP server that provides access to trusted data about business identity and activity",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0-build1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.enigma.com/http"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.enigma.com/http-key",
          "headers": [
            {
              "description": "Token of Enigma API key. Used to enable authentication without presenting the user with an oAuth login.",
              "isRequired": true,
              "isSecret": true,
              "name": "x-api-key"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.enigma.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2a1822b0-c0d6-414c-9ee2-ea1851f35f28",
          "versionId": "b5c49bdf-07bc-478b-9048-23590f4052fb",
          "publishedAt": "2025-09-10T19:23:14.035830574Z",
          "updatedAt": "2025-09-10T19:23:14.035830574Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/fengyinxia-jimeng-mcp",
      "description": "Create images and videos from prompts, with options for image mixing, reference images, and start/…",
      "status": "active",
      "repository": {
        "url": "https://github.com/fengyinxia/jimeng-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@fengyinxia/jimeng-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1421db43-87bc-46b4-a587-99d203ebaf4f",
          "versionId": "b6c1667c-b54f-4fdf-80cf-3185aa22cc0a",
          "publishedAt": "2025-09-12T13:13:51.71154341Z",
          "updatedAt": "2025-09-12T13:13:51.71154341Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.jkawamoto/mcp-florence2",
      "description": "An MCP server for processing images using Florence-2",
      "status": "active",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-florence2",
        "source": "github"
      },
      "version": "0.3.3",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-florence2/releases/download/v0.3.3/mcp-florence2.mcpb",
          "version": "0.3.3",
          "fileSha256": "4e176c58148fde7ef8a548b5ba2ca5d6b4a2f496fb3ab3b84c7329e1c732147b",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "dcf30ab3-ffde-4a3f-8d36-522b9e3016e3",
          "versionId": "b6d97b5e-f822-4f10-b6fe-1c5d2210e3aa",
          "publishedAt": "2025-09-19T00:50:28.842922547Z",
          "updatedAt": "2025-09-19T00:50:28.842922547Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.gibsonai/mcp",
      "description": "GibsonAI MCP server: manage your databases with natural language",
      "status": "active",
      "repository": {
        "url": "https://github.com/gibsonai/mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.gibsonai.com/"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a136b4b2-643a-4374-a70f-c490b07bbf90",
          "versionId": "b74b994f-aced-4deb-b0a1-74b976056214",
          "publishedAt": "2025-09-22T18:43:05.221834159Z",
          "updatedAt": "2025-09-22T18:43:05.221834159Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.jcucci/dotnet-sherlock-mcp",
      "description": ".NET assembly introspection MCP server with advanced reflection and type analysis capabilities",
      "status": "active",
      "repository": {
        "url": "https://github.com/jcucci/dotnet-sherlock-mcp",
        "source": "github"
      },
      "version": "2.3.0",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "Sherlock.MCP.Server",
          "version": "2.3.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "bd0e05aa-5448-4051-a532-08accbde80de",
          "versionId": "b77cb67a-bf01-4197-b889-e7cfd4c5d094",
          "publishedAt": "2025-09-24T21:21:37.075081266Z",
          "updatedAt": "2025-09-24T21:21:37.075081266Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.burningion/video-editing-mcp",
      "description": "An MCP server that provides [describe what your server does]",
      "status": "active",
      "repository": {
        "url": "https://github.com/burningion/video-editing-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "video-editor-mcp",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Video Jungle API Key (found at https://www.video-jungle.com/user/settings)",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VJ_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "456da657-9a02-4b87-9e16-4eee6db55092",
          "versionId": "b8b7c038-1a6f-4152-9282-6de6ea3fe0ff",
          "publishedAt": "2025-09-10T13:57:16.410605636Z",
          "updatedAt": "2025-09-12T12:58:23.995884425Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Danushkumar-V-mcp-discord",
      "description": "An MCP server that integrates with Discord to provide AI-powered features.",
      "status": "active",
      "repository": {
        "url": "https://github.com/Danushkumar-V/mcp-discord",
        "source": "github"
      },
      "version": "1.2.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Danushkumar-V/mcp-discord/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "0e45649f-58fd-4a9e-a707-943a46fbe688",
          "versionId": "b946c91b-b9b9-49af-b32a-f47f20484a85",
          "publishedAt": "2025-09-13T22:54:39.805524875Z",
          "updatedAt": "2025-09-13T22:54:39.805524875Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/magenie33-quality-dimension-generator",
      "description": "Generate tailored quality criteria and scoring guides from your task descriptions. Refine objectiv…",
      "status": "active",
      "repository": {
        "url": "https://github.com/magenie33/quality-dimension-generator",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@magenie33/quality-dimension-generator/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "fb74c0f6-fb5f-4998-a29a-1b2dcf77e1e4",
          "versionId": "b966b9e6-0904-4305-9d1e-016bfedbf891",
          "publishedAt": "2025-09-20T15:11:34.739057896Z",
          "updatedAt": "2025-09-20T15:11:34.739057896Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.motherduckdb/mcp-server-motherduck",
      "description": "Fast analytics and data processing with DuckDB and MotherDuck",
      "status": "active",
      "repository": {
        "url": "https://github.com/motherduckdb/mcp-server-motherduck",
        "source": "github"
      },
      "version": "0.6.4",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-server-motherduck",
          "version": "0.6.4",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Transport type for MCP server",
              "default": "stdio",
              "choices": [
                "stdio",
                "sse",
                "stream"
              ],
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "Port to listen on for sse and stream transport mode",
              "format": "number",
              "default": "8000",
              "type": "named",
              "name": "--port"
            },
            {
              "description": "Path to local DuckDB database file or MotherDuck database",
              "default": "md:",
              "type": "named",
              "name": "--db-path"
            },
            {
              "description": "Access token to use for MotherDuck database connections",
              "isSecret": true,
              "type": "named",
              "name": "--motherduck-token"
            },
            {
              "description": "Flag for connecting to DuckDB or MotherDuck in read-only mode",
              "type": "named",
              "name": "--read-only"
            },
            {
              "description": "Home directory for DuckDB",
              "type": "named",
              "name": "--home-dir"
            },
            {
              "description": "Flag for connecting to MotherDuck in SaaS mode (disables filesystem and write permissions for local DuckDB)",
              "type": "named",
              "name": "--saas-mode"
            },
            {
              "description": "Enable JSON responses for HTTP stream (only supported for stream transport)",
              "type": "named",
              "name": "--json-response"
            }
          ],
          "environmentVariables": [
            {
              "description": "Access token to use for MotherDuck database connections",
              "isSecret": true,
              "name": "motherduck_token"
            },
            {
              "description": "Home directory for DuckDB (used as default if --home-dir not specified)",
              "name": "HOME"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "304e5985-b5e2-4759-ac4b-cf56b86e8c64",
          "versionId": "b9848a83-605f-4cb3-a9b1-2ed5dd02dd56",
          "publishedAt": "2025-09-10T15:38:28.952824815Z",
          "updatedAt": "2025-09-10T15:38:28.952824815Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.kevincogan/demo-mcp-server",
      "description": "Demo server entry for local testing",
      "status": "active",
      "repository": {
        "url": "https://github.com/kevincogan/demo-mcp-server",
        "source": "github"
      },
      "version": "1.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://kevincogan.github.io/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "78162e28-0738-46be-b2ef-b1c6469a1616",
          "versionId": "b9c67f43-e6e5-412b-b3bf-49d3ea88c530",
          "publishedAt": "2025-09-21T13:59:09.345933804Z",
          "updatedAt": "2025-09-22T08:33:07.216891447Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.46-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.46-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
          "versionId": "b9d93fa8-9d3f-474b-9f50-54c61731bd01",
          "publishedAt": "2025-09-18T21:24:07.737452346Z",
          "updatedAt": "2025-09-18T23:12:00.040130344Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "co.pipeboard/meta-ads-mcp",
      "description": "Facebook / Meta Ads automation with AI: analyze performance, test creatives, optimize spend.",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.13",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "meta-ads-mcp",
          "version": "1.0.13",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.pipeboard.co/meta-ads-mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "51e23615-8cdd-47f0-84d3-df448e34a4e7",
          "versionId": "b9e12cd8-2660-4dc1-9e63-de7491c63002",
          "publishedAt": "2025-09-24T16:24:17.268236123Z",
          "updatedAt": "2025-09-24T16:24:17.268236123Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.spences10/mcp-omnisearch",
      "description": "MCP server for integrating Omnisearch with LLMs",
      "status": "active",
      "repository": {
        "url": "https://github.com/spences10/mcp-omnisearch",
        "source": "github"
      },
      "version": "0.0.15",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-omnisearch",
          "version": "0.0.15",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "573a18a8-3a1e-494b-a88d-dff1af7226e8",
          "versionId": "b9e152e0-8f25-4edb-96be-81e19075dbe6",
          "publishedAt": "2025-09-10T19:32:04.459621013Z",
          "updatedAt": "2025-09-10T19:32:04.459621013Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/MisterSandFR-supabase-mcp-selfhosted",
      "description": "Manage Supabase projects end to end across database, auth, storage, realtime, and migrations. Moni…",
      "status": "active",
      "repository": {
        "url": "https://github.com/MisterSandFR/Supabase-MCP-SelfHosted",
        "source": "github"
      },
      "version": "1.14.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@MisterSandFR/supabase-mcp-selfhosted/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "d07e588e-585e-44b0-a8d4-4cf7ad928ba0",
          "versionId": "babb48c9-0ae5-4436-b957-3fd988656ac2",
          "publishedAt": "2025-09-18T14:42:06.197814736Z",
          "updatedAt": "2025-09-18T14:42:06.197814736Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.saucelabs-sample-test-frameworks/sauce-api-mcp",
      "description": "An open-source MCP server that provides LLM access to the Sauce Labs API",
      "status": "active",
      "repository": {
        "url": "https://github.com/saucelabs/sauce-api-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "sauce-api-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "value": "<sauce-user-name>",
              "name": "SAUCE_USERNAME"
            },
            {
              "value": "<sauce-access-key>",
              "name": "SAUCE_ACCESS_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8b7288a5-d7e6-4139-9ad8-fcb85c1a20df",
          "versionId": "bb04de05-3784-4641-a864-e8eb37b1a901",
          "publishedAt": "2025-09-12T22:36:40.555152268Z",
          "updatedAt": "2025-09-12T22:36:40.555152268Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.0",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "364d771b-c515-4071-805d-75513fa308ce",
          "versionId": "bb9ad48f-71d3-4e68-8701-43bc9eb97cc1",
          "publishedAt": "2025-09-20T21:15:29.259860449Z",
          "updatedAt": "2025-09-20T21:30:51.466951132Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.nrwl/nx-console",
      "description": "A Model Context Protocol server implementation for Nx",
      "status": "active",
      "repository": {
        "url": "https://github.com/nrwl/nx-console",
        "source": "github"
      },
      "version": "0.6.12",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "nx-mcp",
          "version": "0.6.12",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "02e518c5-4348-4600-b521-7a09364276c3",
          "versionId": "bbc51e33-09d6-4830-8406-1712d1907cc1",
          "publishedAt": "2025-09-23T09:55:22.303227162Z",
          "updatedAt": "2025-09-23T09:55:22.303227162Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.kevincogan/demo-mcp-server",
      "description": "Demo server entry for local testing",
      "status": "active",
      "repository": {
        "url": "https://github.com/kevincogan/demo-mcp-server",
        "source": "github"
      },
      "version": "1.0.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://kevincogan.github.io/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "78162e28-0738-46be-b2ef-b1c6469a1616",
          "versionId": "bbcdf831-c7bf-4c52-affb-3750b146a001",
          "publishedAt": "2025-09-22T08:33:07.198215918Z",
          "updatedAt": "2025-09-22T11:43:15.249644873Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.burningion/video-editing-mcp",
      "description": "MCP Server for Video Jungle - Analyze, Search, Generate, and Edit Videos",
      "status": "active",
      "repository": {
        "url": "https://github.com/burningion/video-editing-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "video-editor-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Video Jungle API Key (found at https://www.video-jungle.com/user/settings)",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VJ_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "456da657-9a02-4b87-9e16-4eee6db55092",
          "versionId": "bbf32ba9-5e10-40ed-ba62-186b509b87c5",
          "publishedAt": "2025-09-12T12:58:23.949572999Z",
          "updatedAt": "2025-09-12T12:58:23.949572999Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.waystation/supabase",
      "description": "Connect to your Supabase database to query data and schemas.",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/supabase/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/supabase/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "731d8422-a4d1-4783-95aa-1e17b05099b2",
          "versionId": "bc101c44-3702-449a-b569-74f3078eac9d",
          "publishedAt": "2025-09-09T14:46:10.221625416Z",
          "updatedAt": "2025-09-09T14:46:10.221625416Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.27-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.27-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
          "versionId": "bcafddd0-d2f1-4dfd-8411-433242ee6202",
          "publishedAt": "2025-09-16T22:30:54.35634821Z",
          "updatedAt": "2025-09-17T01:27:02.860023046Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.pab1it0/prometheus-mcp-server",
      "description": "MCP server for Prometheus, enabling AI assistants to query metrics and monitor system health",
      "status": "active",
      "repository": {
        "url": "https://github.com/pab1it0/prometheus-mcp-server",
        "source": "github"
      },
      "version": "1.2.6",
      "packages": [
        {
          "registryType": "oci",
          "registryBaseUrl": "https://ghcr.io",
          "identifier": "pab1it0/prometheus-mcp-server",
          "version": "1.2.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Prometheus server URL (e.g., http://localhost:9090)",
              "isRequired": true,
              "format": "string",
              "name": "PROMETHEUS_URL"
            },
            {
              "description": "Username for Prometheus basic authentication",
              "format": "string",
              "name": "PROMETHEUS_USERNAME"
            },
            {
              "description": "Password for Prometheus basic authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_PASSWORD"
            },
            {
              "description": "Bearer token for Prometheus authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_TOKEN"
            },
            {
              "description": "Organization ID for multi-tenant Prometheus setups",
              "format": "string",
              "name": "ORG_ID"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "e50bf758-19d5-4384-8623-dce5d3e16cf4",
          "versionId": "bd4e9779-1903-456c-b749-4c60e515240a",
          "publishedAt": "2025-09-20T14:17:36.936419738Z",
          "updatedAt": "2025-09-21T08:44:02.056360531Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-lta-mcp",
      "description": "Provide real-time transportation data including bus arrivals, train service alerts, carpark availa…",
      "status": "active",
      "repository": {
        "url": "https://github.com/arjunkmrm/lta-mcp",
        "source": "github"
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/lta-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c11e357b-2b62-4fc7-a6ba-16214082ee0e",
          "versionId": "bdbc5988-0d10-4957-8c87-45678bf5d404",
          "publishedAt": "2025-09-11T16:52:48.059122135Z",
          "updatedAt": "2025-09-11T16:52:48.059122135Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.mintmcp/gcal",
      "description": "A MCP server that works with Google Calendar to manage event listing, reading, and updates.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gcal.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "7b265ff1-5cd1-43fe-92c4-54cc6a0fd4d7",
          "versionId": "bde26216-0984-4c1d-bc1c-7d9096688a79",
          "publishedAt": "2025-09-09T19:42:00.464295781Z",
          "updatedAt": "2025-09-09T19:49:54.017385171Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.8",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "364d771b-c515-4071-805d-75513fa308ce",
          "versionId": "bdf01b68-714f-43fc-95b0-0b8a50edbcc7",
          "publishedAt": "2025-09-20T23:23:20.779152666Z",
          "updatedAt": "2025-09-20T23:23:20.779152666Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.GitHub30/zenn-mcp-server",
      "description": "MCP server that posts to Zenn.",
      "status": "active",
      "repository": {
        "url": "https://github.com/GitHub30/zenn-mcp-server",
        "source": "github"
      },
      "version": "0.1.0",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b8d7738c-c90e-4426-94e8-9cb1cf29d458",
          "versionId": "bf0fd3c3-28a7-4e05-b631-2ea81e208dc4",
          "publishedAt": "2025-09-23T09:04:05.123481393Z",
          "updatedAt": "2025-09-23T09:04:05.123481393Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/faithk7-gmail-mcp",
      "description": "Manage Gmail messages, threads, labels, drafts, and settings from your workflows. Send and organiz…",
      "status": "active",
      "repository": {
        "url": "https://github.com/faithk7/gmail-mcp",
        "source": "github"
      },
      "version": "1.7.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@faithk7/gmail-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8b9fdc45-5231-49ec-8790-36c3708802e7",
          "versionId": "bf89e9e0-a6aa-417a-9295-ac03d9493dd3",
          "publishedAt": "2025-09-14T13:42:20.13425818Z",
          "updatedAt": "2025-09-14T13:42:20.13425818Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/cc25a-openai-api-agent-project123123123",
      "description": "Look up the latest stock prices by ticker symbol across global markets. Get current price and esse…",
      "status": "active",
      "repository": {
        "url": "https://github.com/cc25a/openai-api-agent-project",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@cc25a/openai-api-agent-project123123123/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2e9a1e51-a18b-4599-b56e-b49e1c42c0c2",
          "versionId": "bfcc47f4-8a2f-4c3a-8767-9ab71d609fb1",
          "publishedAt": "2025-09-17T03:32:54.14301964Z",
          "updatedAt": "2025-09-17T03:32:54.14301964Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/pythondev-pro-egw_writings_mcp_server",
      "description": "Search Ellen G. White’s writings by keyword to surface relevant quotations. Retrieve exact passage…",
      "status": "active",
      "repository": {
        "url": "https://github.com/pythondev-pro/egw_writings_mcp_server",
        "source": "github"
      },
      "version": "1.12.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pythondev-pro/egw_writings_mcp_server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "cfa49893-4e64-430d-8ea1-d3af4f8379f9",
          "versionId": "c0a8366b-7531-4a2d-990e-6ba630cd3712",
          "publishedAt": "2025-09-11T12:48:16.278544327Z",
          "updatedAt": "2025-09-11T12:48:16.278544327Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.agilitycms/mcp-server",
      "description": "An MCP server that provides access to Agility CMS.  See https://mcp.agilitycms.com for more details.",
      "status": "active",
      "repository": {
        "url": "https://github.com/agility/agility-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.agilitycms.com/api/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "41d78708-a8ad-459b-9dd4-d7fd1824c6bc",
          "versionId": "c0d0e773-8e78-437f-a9d5-b417e26aa3fa",
          "publishedAt": "2025-09-15T21:00:43.348780132Z",
          "updatedAt": "2025-09-15T21:00:43.348780132Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.pubnub/mcp-server",
      "description": "PubNub MCP for Real-time messaging. API Access and SDK documentation.",
      "status": "active",
      "repository": {
        "url": "https://github.com/pubnub/pubnub-mcp-server",
        "source": "github"
      },
      "version": "1.0.106",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1319578e-b112-443f-9938-68f2527a10b4",
          "versionId": "c13d8c60-bd55-4837-9f65-2eb2a95d5430",
          "publishedAt": "2025-09-19T21:08:36.523099568Z",
          "updatedAt": "2025-09-19T21:08:36.523099568Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "dev.composio.rube/rube",
      "description": "Connect your AI to 500+ apps like Gmail, Slack, GitHub, and Notion with streamable HTTP transport.",
      "status": "active",
      "repository": {
        "url": "https://github.com/ComposioHQ/Rube",
        "source": "github"
      },
      "version": "0.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://rube.composio.dev/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2a705690-7684-4f32-9c2d-05a9080c5b72",
          "versionId": "c1c6f9d2-07ef-4d93-a5e6-67ddbfbd33bb",
          "publishedAt": "2025-09-22T06:16:36.167908046Z",
          "updatedAt": "2025-09-22T06:16:36.167908046Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "status": "active",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.8",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
          "versionId": "c1cf7f4d-85bc-46c9-8cad-a3e6a88c651e",
          "publishedAt": "2025-09-19T11:38:30.012331726Z",
          "updatedAt": "2025-09-19T12:13:23.265366973Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "364d771b-c515-4071-805d-75513fa308ce",
          "versionId": "c1e3a2ec-14d0-4f26-acf2-7788cf47e553",
          "publishedAt": "2025-09-20T21:30:51.461180027Z",
          "updatedAt": "2025-09-20T22:17:46.118774702Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.CursorTouch/Windows-MCP",
      "description": "An MCP Server for computer-use in Windows OS",
      "status": "active",
      "repository": {
        "url": "https://github.com/CursorTouch/Windows-MCP",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "windows_mcp",
          "version": "0.3.0",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "357d625e-8b12-4ae1-8915-ee77d3dc9a38",
          "versionId": "c20de9bf-9464-472b-8dcb-32503b984d56",
          "publishedAt": "2025-09-17T13:24:08.521350318Z",
          "updatedAt": "2025-09-17T13:24:08.521350318Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.8",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
          "versionId": "c29777b7-3957-42a7-8000-d675c0ecb2b2",
          "publishedAt": "2025-09-12T04:28:40.558477428Z",
          "updatedAt": "2025-09-12T04:48:10.705163493Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.huoshuiai42/huoshui-pdf-converter",
      "description": "An MCP server that provides PDF file conversion",
      "status": "active",
      "repository": {
        "url": "https://github.com/huoshuiai42/huoshui-pdf-converter",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "huoshui-pdf-converter",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "f70f6219-ec6f-4df8-9458-b621fe94e8af",
          "versionId": "c2c0a8ed-6ad8-42fd-97d8-5da83965d302",
          "publishedAt": "2025-09-11T01:34:53.40476072Z",
          "updatedAt": "2025-09-11T01:34:53.40476072Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.zhongweili/nanobanana-mcp-server",
      "description": "An MCP server that provides image generation and editing capabilities",
      "status": "active",
      "repository": {
        "url": "https://github.com/zhongweili/nanobanana-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "nanobanana-mcp-server",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Gemini API key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GEMINI_API_KEY"
            },
            {
              "description": "The image output directory",
              "format": "string",
              "name": "IMAGE_OUTPUT_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "879d5644-ec2a-4627-9918-8043302684a4",
          "versionId": "c339f751-fd5c-487a-b5c2-14971011acb4",
          "publishedAt": "2025-09-09T13:45:29.896269404Z",
          "updatedAt": "2025-09-09T13:45:29.896269404Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-ahoy",
      "description": "Send friendly, personalized greetings by name. Switch to a playful pirate voice for themed salutat…",
      "status": "active",
      "repository": {
        "url": "https://github.com/arjunkmrm/ahoy",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/ahoy/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a835b54b-4d1d-4eb1-98c5-4c7d2b0e0f50",
          "versionId": "c372a906-9758-46ce-8211-602c545dffc3",
          "publishedAt": "2025-09-14T03:11:31.224722296Z",
          "updatedAt": "2025-09-14T03:11:31.224722296Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.minnas/mcp",
      "description": "Share prompts and context with your team and discover community collections.",
      "status": "active",
      "repository": {
        "url": "https://github.com/sensoris/minnas-service",
        "source": "github"
      },
      "version": "1.1.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://api.minnas.io/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "33e1232b-4b00-46fc-9460-452cae6bdcb5",
          "versionId": "c3bda903-da17-48a7-b7ec-e2195c38e78c",
          "publishedAt": "2025-09-18T16:40:24.146729603Z",
          "updatedAt": "2025-09-18T16:40:24.146729603Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.variflight/variflight-mcp",
      "description": "Variflight MCP Server",
      "status": "active",
      "repository": {
        "url": "https://github.com/variflight/variflight-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@variflight-ai/variflight-mcp",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VARIFLIGHT_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "314291ab-1ff5-4c6b-9879-9a236748c272",
          "versionId": "c41fdf1c-b9b0-4101-ba38-7584f2e6135a",
          "publishedAt": "2025-09-09T13:30:29.381063731Z",
          "updatedAt": "2025-09-09T13:43:56.537303875Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/lineex-pubmed-mcp-smithery",
      "description": "Search PubMed with precision using keyword and journal filters and smart sorting. Uncover MeSH ter…",
      "status": "active",
      "repository": {
        "url": "https://github.com/lineex/pubmed-mcp-smithery",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@lineex/pubmed-mcp-smithery/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c6aea640-d696-4be9-b86f-5e789e46d166",
          "versionId": "c477c6e2-388e-43a1-892d-250cbf90120c",
          "publishedAt": "2025-09-16T01:10:37.458958533Z",
          "updatedAt": "2025-09-16T01:10:37.458958533Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/adamamer20-paper-search-mcp-openai",
      "description": "Search and download academic papers from arXiv, PubMed, bioRxiv, medRxiv, Google Scholar, Semantic…",
      "status": "active",
      "repository": {
        "url": "https://github.com/adamamer20/paper-search-mcp-openai",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@adamamer20/paper-search-mcp-openai/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1b9d8596-bc91-4ff3-811e-e3a0d7964759",
          "versionId": "c4eee19a-f32f-4400-b996-0386fb66c46e",
          "publishedAt": "2025-09-18T10:21:35.77628635Z",
          "updatedAt": "2025-09-18T10:21:35.77628635Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.biodnd/agent-ip",
      "description": "Agent IP: MCP server with patents search tools",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/ip"
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-ip.biodnd.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "30c71c78-e9f2-480d-969f-a352e650a85c",
          "versionId": "c5d23469-63b2-4347-8fe8-f3b14875f334",
          "publishedAt": "2025-09-23T08:27:01.316623608Z",
          "updatedAt": "2025-09-23T09:08:13.513992098Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/kodey-ai-mapwise-mcp",
      "description": "Send friendly, personalized greetings on demand. Generate quick salutations with a simple prompt.…",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kodey-ai/mapwise-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "5f480031-7f5d-472d-a622-0e42344857f2",
          "versionId": "c5e7c259-731f-42f5-959c-b2f423acbffc",
          "publishedAt": "2025-09-18T21:55:01.522892141Z",
          "updatedAt": "2025-09-18T21:55:01.522892141Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.OtherVibes/mcp-as-a-judge",
      "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.3.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-as-a-judge",
          "version": "0.3.3",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "e8b7a95e-e0b7-44d1-9830-1ef945eed29d",
          "versionId": "c5f3c013-d154-4bbf-ad6f-f68c247c3371",
          "publishedAt": "2025-09-18T20:23:31.611474327Z",
          "updatedAt": "2025-09-18T21:45:57.098844508Z",
          "isLatest": false
        }
      }
    }
  ]
}