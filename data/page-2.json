{
  "servers": [
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.himorishige/hatago-mcp-hub",
      "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
      "status": "active",
      "repository": {
        "url": "https://github.com/himorishige/hatago-mcp-hub",
        "source": "github"
      },
      "version": "0.0.15",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@himorishige/hatago-mcp-hub",
          "version": "0.0.15",
          "runtime_hint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "2f4d81e5-6933-4117-882b-105c9f0e0da5",
          "published_at": "2025-09-14T10:38:58.007599947Z",
          "updated_at": "2025-09-14T14:57:18.60721393Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "MCP server to read, inspect and troubleshoot codebase symbols",
      "status": "active",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "0.0.12",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@p1va/symbols",
          "version": "0.0.12",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "2f7c96af-4749-405b-9721-8e2651ff347b",
          "published_at": "2025-09-16T10:02:42.424531594Z",
          "updated_at": "2025-09-16T10:02:42.424531594Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.joelverhagen/Knapcode.SampleMcpServer",
      "description": "A sample MCP server using the MCP C# SDK. Generates random numbers and random weather.",
      "repository": {
        "url": "https://github.com/joelverhagen/Knapcode.SampleMcpServer.git",
        "source": "github"
      },
      "version": "0.7.0-beta",
      "packages": [
        {
          "registry_type": "nuget",
          "registry_base_url": "https://api.nuget.org",
          "identifier": "Knapcode.SampleMcpServer",
          "version": "0.7.0-beta",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "value": "mcp",
              "type": "positional",
              "value_hint": "mcp"
            },
            {
              "value": "start",
              "type": "positional",
              "value_hint": "start"
            }
          ],
          "environment_variables": [
            {
              "value": "{weather_choices}",
              "variables": {
                "weather_choices": {
                  "description": "Comma separated list of weather descriptions to randomly select.",
                  "is_required": true
                }
              },
              "name": "WEATHER_CHOICES"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "30080003-fbcd-4552-b40e-a1c192d1f412",
          "published_at": "2025-09-12T15:42:35.512389899Z",
          "updated_at": "2025-09-12T15:42:35.512389899Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.cr7258/elasticsearch-mcp-server",
      "description": "MCP server for interacting with Elasticsearch",
      "status": "active",
      "repository": {
        "url": "https://github.com/cr7258/elasticsearch-mcp-server",
        "source": "github"
      },
      "version": "2.0.15",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "elasticsearch-mcp-server",
          "version": "2.0.15",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Comma-separated list of Elasticsearch hosts (e.g., https://localhost:9200)",
              "format": "string",
              "default": "https://localhost:9200",
              "name": "ELASTICSEARCH_HOSTS"
            },
            {
              "description": "API key for Elasticsearch or Elastic Cloud authentication (recommended)",
              "format": "string",
              "is_secret": true,
              "name": "ELASTICSEARCH_API_KEY"
            },
            {
              "description": "Username for basic authentication (alternative to API key)",
              "format": "string",
              "name": "ELASTICSEARCH_USERNAME"
            },
            {
              "description": "Password for basic authentication (used with ELASTICSEARCH_USERNAME)",
              "format": "string",
              "is_secret": true,
              "name": "ELASTICSEARCH_PASSWORD"
            },
            {
              "description": "Whether to verify SSL certificates (true/false)",
              "format": "boolean",
              "default": "false",
              "name": "ELASTICSEARCH_VERIFY_CERTS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "302ebbc8-8b7f-4952-9706-7ad2ade5fd38",
          "published_at": "2025-09-15T14:34:34.758628029Z",
          "updated_at": "2025-09-15T14:34:34.758628029Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "status": "active",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.8",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.8",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your API key for the service",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "309388c6-8bba-4ece-896f-e5b569597467",
          "published_at": "2025-09-19T11:35:34.688061767Z",
          "updated_at": "2025-09-19T11:51:13.380613812Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.alpic.test/test-mcp-server",
      "description": "Alpic Test MCP Server - great server!",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://test.alpic.ai/"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "309d5dbf-3f27-4235-ae4d-56a1bb0285d1",
          "published_at": "2025-09-10T13:57:43.256738808Z",
          "updated_at": "2025-09-10T13:57:43.256738808Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/pythondev-pro-egw_writings_mcp_server",
      "description": "Search Ellen G. White’s writings by topic or phrase. Retrieve exact references and passages instan…",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pythondev-pro/egw_writings_mcp_server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "30a55449-cad5-46aa-9596-12828d287fa8",
          "published_at": "2025-09-19T16:18:36.558203742Z",
          "updated_at": "2025-09-19T16:18:36.558203742Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.Lyellr88/marm-mcp-server",
      "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
      "repository": {
        "url": "https://github.com/Lyellr88/MARM-Systems",
        "source": "github"
      },
      "version": "2.2.2",
      "packages": [
        {
          "registry_type": "pypi",
          "identifier": "marm-mcp-server",
          "version": "2.2.2",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registry_type": "oci",
          "identifier": "lyellr88/marm-mcp-server",
          "version": "2.2.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "317c4867-14ab-489f-8343-b2ddaa3142a1",
          "published_at": "2025-09-19T04:27:24.435507407Z",
          "updated_at": "2025-09-19T07:39:05.791392866Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.mintmcp/outlook-calendar",
      "description": "A MCP server that works with Outlook Calendar to manage event listing, reading, and updates.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://outlook-calendar.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "31a850e0-2f62-4d61-b128-6c4bca76bdd1",
          "published_at": "2025-09-09T20:03:56.940660247Z",
          "updated_at": "2025-09-09T20:03:56.940660247Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/ImRonAI-mcp-server-browserbase",
      "description": "Automate cloud browsers to navigate websites, interact with elements, and extract structured data.…",
      "status": "active",
      "repository": {
        "url": "https://github.com/ImRonAI/mcp-server-browserbase",
        "source": "github"
      },
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@ImRonAI/mcp-server-browserbase/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "31e8d9b1-e043-4594-8ccc-6cd7b829fa6c",
          "published_at": "2025-09-16T06:05:33.453618608Z",
          "updated_at": "2025-09-16T06:05:33.453618608Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.mintmcp/gcal",
      "description": "A MintMCP server that works with Google Calendar to manage event listing, reading, and updates.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gcal.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3295b540-5655-4ddd-9726-8dd060e7e05a",
          "published_at": "2025-09-09T19:35:28.121701943Z",
          "updated_at": "2025-09-09T19:36:28.010860991Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.huoshuiai42/huoshui-fetch",
      "description": "An MCP server that provides tools for fetching, converting, and extracting data from web pages.",
      "status": "active",
      "repository": {
        "url": "https://github.com/huoshuiai42/huoshui-fetch",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "huoshui-fetch",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "32d74c21-60c3-4dde-afe7-4ade73371301",
          "published_at": "2025-09-11T01:33:53.944848968Z",
          "updated_at": "2025-09-11T01:33:53.944848968Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.bytedance/mcp-server-browser",
      "description": "MCP server for browser use access",
      "status": "active",
      "repository": {
        "url": "https://github.com/bytedance/UI-TARS-desktop",
        "source": "github",
        "subfolder": "packages/agent-infra/mcp-servers/browser"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-browser",
          "version": "latest",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "description": "browser or chrome channel to use, possible values: chrome, edge, firefox.",
              "format": "string",
              "type": "named",
              "name": "browser"
            },
            {
              "description": "Chrome DevTools Protocol endpoint URL",
              "format": "string",
              "type": "named",
              "name": "cdp-endpoint"
            },
            {
              "description": "WebSocket endpoint to connect to, for example",
              "format": "string",
              "type": "named",
              "name": "ws-endpoint"
            },
            {
              "description": "Path to the browser executable",
              "format": "string",
              "type": "named",
              "name": "executable-path"
            },
            {
              "description": "Path to the output directory",
              "format": "string",
              "type": "named",
              "name": "output-dir"
            },
            {
              "description": "Comma-separated list of patterns to bypass the proxy",
              "format": "string",
              "type": "named",
              "name": "proxy-bypass"
            },
            {
              "description": "Proxy server address",
              "format": "string",
              "type": "named",
              "name": "proxy-server"
            },
            {
              "description": "Run server that uses screenshots (Aria snapshots are used by default)",
              "format": "boolean",
              "type": "named",
              "name": "vision"
            }
          ],
          "environment_variables": [
            {
              "description": "DISPLAY environment variable for browser rendering",
              "format": "string",
              "name": "DISPLAY"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-browser",
          "version": "latest",
          "runtime_hint": "npx",
          "transport": {
            "type": "sse",
            "url": "http://127.0.0.1:{port}/sse"
          },
          "package_arguments": [
            {
              "description": "Server port number",
              "is_required": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            },
            {
              "description": "browser or chrome channel to use, possible values: chrome, edge, firefox.",
              "format": "string",
              "type": "named",
              "name": "browser"
            },
            {
              "description": "Chrome DevTools Protocol endpoint URL",
              "format": "string",
              "type": "named",
              "name": "cdp-endpoint"
            },
            {
              "description": "WebSocket endpoint to connect to, for example",
              "format": "string",
              "type": "named",
              "name": "ws-endpoint"
            },
            {
              "description": "Path to the browser executable",
              "format": "string",
              "type": "named",
              "name": "executable-path"
            },
            {
              "description": "Path to the output directory",
              "format": "string",
              "type": "named",
              "name": "output-dir"
            },
            {
              "description": "Comma-separated list of patterns to bypass the proxy",
              "format": "string",
              "type": "named",
              "name": "proxy-bypass"
            },
            {
              "description": "Proxy server address",
              "format": "string",
              "type": "named",
              "name": "proxy-server"
            },
            {
              "description": "Run server that uses screenshots (Aria snapshots are used by default)",
              "format": "boolean",
              "type": "named",
              "name": "vision"
            }
          ],
          "environment_variables": [
            {
              "description": "DISPLAY environment variable for browser rendering",
              "format": "string",
              "name": "DISPLAY"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-browser",
          "version": "latest",
          "runtime_hint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:{port}/mcp"
          },
          "package_arguments": [
            {
              "description": "Server port number",
              "is_required": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            },
            {
              "description": "browser or chrome channel to use, possible values: chrome, edge, firefox.",
              "format": "string",
              "type": "named",
              "name": "browser"
            },
            {
              "description": "Chrome DevTools Protocol endpoint URL",
              "format": "string",
              "type": "named",
              "name": "cdp-endpoint"
            },
            {
              "description": "WebSocket endpoint to connect to, for example",
              "format": "string",
              "type": "named",
              "name": "ws-endpoint"
            },
            {
              "description": "Path to the browser executable",
              "format": "string",
              "type": "named",
              "name": "executable-path"
            },
            {
              "description": "Path to the output directory",
              "format": "string",
              "type": "named",
              "name": "output-dir"
            },
            {
              "description": "Comma-separated list of patterns to bypass the proxy",
              "format": "string",
              "type": "named",
              "name": "proxy-bypass"
            },
            {
              "description": "Proxy server address",
              "format": "string",
              "type": "named",
              "name": "proxy-server"
            },
            {
              "description": "Run server that uses screenshots (Aria snapshots are used by default)",
              "format": "boolean",
              "type": "named",
              "name": "vision"
            }
          ],
          "environment_variables": [
            {
              "description": "DISPLAY environment variable for browser rendering",
              "format": "string",
              "name": "DISPLAY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "34d352da-6c0f-4348-8cb5-f1c44f7eb7dd",
          "published_at": "2025-09-09T06:16:24.728252874Z",
          "updated_at": "2025-09-09T06:16:24.728252874Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/yuna0x0-anilist-mcp",
      "description": "Access and interact with anime and manga data seamlessly. Retrieve detailed information about your…",
      "status": "active",
      "repository": {
        "url": "https://github.com/yuna0x0/anilist-mcp",
        "source": "github"
      },
      "version": "1.3.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@yuna0x0/anilist-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "35516102-2530-4e9f-9c13-4e613c3375f3",
          "published_at": "2025-09-13T08:34:23.401483403Z",
          "updated_at": "2025-09-13T08:34:23.401483403Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.apify/apify-mcp-server",
      "description": "Apify MCP Server providing access to thousands of web scraping and automation tools from Apify Store",
      "status": "active",
      "repository": {
        "url": "https://github.com/apify/apify-mcp-server",
        "source": "github"
      },
      "version": "0.4.10",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apify.com/",
          "headers": [
            {
              "description": "Apify API token for authentication with Apify platform services. For example 'Bearer <apify-api-token>'",
              "is_required": true,
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "36718efb-39b6-41e2-9762-1321ec57bddd",
          "published_at": "2025-09-19T12:42:08.357510933Z",
          "updated_at": "2025-09-19T13:48:15.372766299Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/BigVik193-reddit-ads-mcp-test",
      "description": "Manage Reddit advertising end-to-end: browse ad accounts and payment methods, and organize campaig…",
      "status": "active",
      "repository": {
        "url": "https://github.com/BigVik193/reddit-ads-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BigVik193/reddit-ads-mcp-test/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "36b0da99-4b6f-4d12-b60f-b66950d8600d",
          "published_at": "2025-09-14T21:38:57.98433852Z",
          "updated_at": "2025-09-14T21:38:57.98433852Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://registry.modelcontextprotocol.org/server.schema.json",
      "name": "io.github.croit/mcp-croit-ceph",
      "description": "MCP server for Croit Ceph cluster management with dynamic OpenAPI tool generation",
      "status": "active",
      "repository": {
        "url": "https://github.com/croit/mcp-croit-ceph",
        "source": "github",
        "id": "1058156155"
      },
      "version": "0.2.16",
      "packages": [
        {
          "registry_type": "oci",
          "registry_base_url": "https://docker.io",
          "identifier": "croit/mcp-croit-ceph",
          "version": "0.2.16",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Croit cluster URL (e.g., http://your-cluster.croit.io:8080)",
              "name": "CROIT_HOST"
            },
            {
              "description": "API authentication token for Croit cluster",
              "name": "CROIT_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "36c22c9a-0448-40af-8312-2fb36b8b7cea",
          "published_at": "2025-09-17T09:30:42.325917413Z",
          "updated_at": "2025-09-17T09:30:42.325917413Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.karanb192/reddit-buddy-mcp",
      "description": "Reddit MCP server - browse posts, search content, analyze users.",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.6-test.7",
      "packages": [
        {
          "registry_type": "npm",
          "identifier": "@karanb192/reddit-buddy-mcp",
          "version": "1.0.6-test.7",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "37a73b98-7065-4144-8bd2-9b7aa57340a5",
          "published_at": "2025-09-15T07:27:45.7983415Z",
          "updated_at": "2025-09-15T07:27:45.7983415Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.devcycle/mcp",
      "description": "DevCycle MCP server for feature flag management",
      "repository": {
        "url": "https://github.com/DevCycleHQ/cli",
        "source": "github"
      },
      "version": "6.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.devcycle.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.devcycle.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "37cb7306-1433-4aae-9aa4-79eaedfb7b5a",
          "published_at": "2025-09-17T20:28:36.449466527Z",
          "updated_at": "2025-09-17T20:28:36.449466527Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.localstack/localstack-mcp-server",
      "description": "A LocalStack MCP Server providing essential tools for local cloud development & testing",
      "status": "active",
      "repository": {
        "url": "https://github.com/localstack/localstack-mcp-server",
        "source": "github"
      },
      "version": "0.1.5",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@localstack/localstack-mcp-server",
          "version": "0.1.5",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "LocalStack Auth Token (optional for Pro features)",
              "format": "string",
              "is_secret": true,
              "name": "LOCALSTACK_AUTH_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "37f249dd-58c5-45cf-b2a1-d72f7b2b9ebb",
          "published_at": "2025-09-18T14:38:06.908080633Z",
          "updated_at": "2025-09-18T14:38:06.908080633Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.cr7258/elasticsearch-mcp-server",
      "description": "MCP server for interacting with Elasticsearch",
      "status": "active",
      "repository": {
        "url": "https://github.com/cr7258/elasticsearch-mcp-server",
        "source": "github"
      },
      "version": "2.0.14",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "elasticsearch-mcp-server",
          "version": "2.0.14",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Comma-separated list of Elasticsearch hosts (e.g., https://localhost:9200)",
              "format": "string",
              "default": "https://localhost:9200",
              "name": "ELASTICSEARCH_HOSTS"
            },
            {
              "description": "API key for Elasticsearch or Elastic Cloud authentication (recommended)",
              "format": "string",
              "is_secret": true,
              "name": "ELASTICSEARCH_API_KEY"
            },
            {
              "description": "Username for basic authentication (alternative to API key)",
              "format": "string",
              "name": "ELASTICSEARCH_USERNAME"
            },
            {
              "description": "Password for basic authentication (used with ELASTICSEARCH_USERNAME)",
              "format": "string",
              "is_secret": true,
              "name": "ELASTICSEARCH_PASSWORD"
            },
            {
              "description": "Whether to verify SSL certificates (true/false)",
              "format": "boolean",
              "default": "false",
              "name": "ELASTICSEARCH_VERIFY_CERTS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3ace42d4-426f-4aed-bb97-1ef46d6cdcb5",
          "published_at": "2025-09-11T03:19:12.574630083Z",
          "updated_at": "2025-09-15T14:34:34.785294588Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.nerfels/mind-map",
      "description": "Experimental code intelligence platform for Claude Code with AST parsing and context analysis",
      "status": "active",
      "repository": {
        "url": "https://github.com/nerfels/mind-map",
        "source": "github"
      },
      "version": "1.12.13",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mind-map-mcp",
          "version": "1.12.13",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Project root directory for MCP to analyze (optional - uses current working directory if not specified)",
              "format": "string",
              "name": "MCP_PROJECT_ROOT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3b9a8107-0e4f-4b30-b1af-004ba2e5db16",
          "published_at": "2025-09-16T16:29:26.08179909Z",
          "updated_at": "2025-09-16T16:29:26.08179909Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.9.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3ba07713-0e79-4f16-86c2-7ec00756b0f8",
          "published_at": "2025-09-20T20:30:22.451323441Z",
          "updated_at": "2025-09-20T21:15:59.347284446Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.cmpxchg16/mcp-ethical-hacking",
      "description": "An MCP server that provides LinkedIn & Reddit data",
      "status": "active",
      "repository": {
        "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registry_type": "mcpb",
          "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.3.0/server.mcpb",
          "version": "1.3.0",
          "file_sha256": "294365cbf53a602df093e3757e6a31cca6c50dd6af343fefa4a528ab869d24a0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3ba865b1-cea7-4427-851b-f5ab05a6ace1",
          "published_at": "2025-09-15T12:56:52.957978875Z",
          "updated_at": "2025-09-16T04:55:02.308871938Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.mintmcp/gmail",
      "description": "A MintMCP server for Gmail that lets you search, read, and draft emails and replies.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gmail.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3bd6e07f-df97-48f4-8ae1-58c1682f3255",
          "published_at": "2025-09-09T19:25:39.933995125Z",
          "updated_at": "2025-09-09T19:44:30.666451776Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.lapfelix/xcodemcp",
      "description": "Control Xcode directly via JXA for build, test, debug operations with XCLogParser integration",
      "status": "active",
      "repository": {
        "url": "https://github.com/lapfelix/XcodeMCP",
        "source": "github"
      },
      "version": "2.1.2",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "xcodemcp",
          "version": "2.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3c4fd086-a0bc-46f9-9f71-cb3709dacf33",
          "published_at": "2025-09-16T18:37:57.587730906Z",
          "updated_at": "2025-09-18T03:19:27.899606094Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.OtherVibes/mcp-as-a-judge",
      "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.3.2",
      "packages": [
        {
          "registry_type": "pypi",
          "identifier": "mcp-as-a-judge",
          "version": "0.3.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3c57cfc7-c135-43a8-a3f5-c1c2b95fe020",
          "published_at": "2025-09-18T08:25:43.825449944Z",
          "updated_at": "2025-09-18T20:23:31.617924504Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.abhijitjavelin/javelin-guardrails-mcp-server",
      "description": "An MCP server that provides Javelin Standalone Guardrails",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://abhijitjavelin.github.io/javelin-guardrails-mcp-server/mcp",
          "headers": [
            {
              "description": "Javelin API key for authentication",
              "is_required": true,
              "is_secret": true,
              "name": "x-javelin-apikey"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3cd27f25-a778-4638-a77b-49fee7d9a676",
          "published_at": "2025-09-18T17:34:35.233239012Z",
          "updated_at": "2025-09-18T17:34:35.233239012Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/arjunkmrm-watch2",
      "description": "Get the current time in your chosen timezone. Browse available continents and regions to pick the…",
      "status": "active",
      "repository": {
        "url": "https://github.com/arjunkmrm/clock",
        "source": "github"
      },
      "version": "1.14.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/watch2/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3cf0b534-6629-4f4e-96d1-0cc83262fd40",
          "published_at": "2025-09-19T08:31:21.361327554Z",
          "updated_at": "2025-09-19T08:31:21.361327554Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.variflight/variflight-mcp",
      "description": "Variflight MCP Server",
      "status": "active",
      "repository": {
        "url": "https://github.com/variflight/variflight-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@variflight-ai/variflight-mcp",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your API key for the service",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "VARIFLIGHT_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3d452687-9ce1-4b5e-98b9-2fbf1fb7abb7",
          "published_at": "2025-09-09T13:43:56.480560569Z",
          "updated_at": "2025-09-12T07:06:18.911110007Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/sunub-obsidian-mcp-server",
      "description": "Search your Obsidian vault to quickly find notes by title or keyword, summarize related content, a…",
      "status": "active",
      "repository": {
        "url": "https://github.com/sunub/obsidian-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@sunub/obsidian-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3d457e31-2ee0-4aae-8570-22aed58bb977",
          "published_at": "2025-09-18T13:40:45.500066991Z",
          "updated_at": "2025-09-18T13:40:45.500066991Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.cmpxchg16/mcp-ethical-hacking",
      "description": "An MCP server that provides LinkedIn & Reddit data",
      "status": "active",
      "repository": {
        "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "mcpb",
          "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.0.0/server.mcpb",
          "version": "1.0.0",
          "file_sha256": "fe333e598595000ae021bd27117db32ec69af6987f507ba7a63c90638ff633ce",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3dc93eed-43b9-4a3d-9ed2-c40a39084e56",
          "published_at": "2025-09-13T16:13:29.782164285Z",
          "updated_at": "2025-09-15T11:11:03.326685721Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.savhascelik/meta-api-mcp-server",
      "description": "You can connect any API to LLMs. This enables AI to interact directly with APIs",
      "status": "active",
      "repository": {
        "url": "https://github.com/savhascelik/meta-api-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "meta-api-mcp-server",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "If the api you are connecting to requires api_key, you can use this variable and you can also define different variables",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3e81fe2c-e973-4e0e-8aa1-d4c20b9aa106",
          "published_at": "2025-09-09T04:14:51.983727698Z",
          "updated_at": "2025-09-09T04:14:51.983727698Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-bitbucket",
      "description": "MCP server for Atlassian Bitbucket Data Center - interact with repositories and code",
      "status": "active",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.9",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/bitbucket",
          "version": "0.9.9",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Bitbucket host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "BITBUCKET_HOST"
            },
            {
              "description": "Bitbucket API base path (alternative to BITBUCKET_HOST)",
              "format": "string",
              "name": "BITBUCKET_API_BASE_PATH"
            },
            {
              "description": "Bitbucket Personal Access Token or API token",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "BITBUCKET_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3ea9d856-0c93-4fcd-9d83-ede67968a5f4",
          "published_at": "2025-09-13T13:29:18.888401856Z",
          "updated_at": "2025-09-13T13:29:18.888401856Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.bytedance/mcp-server-search",
      "description": "MCP server for web search operations",
      "status": "active",
      "repository": {
        "url": "https://github.com/bytedance/UI-TARS-desktop",
        "source": "github",
        "subfolder": "packages/agent-infra/mcp-servers/search"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-search",
          "version": "latest",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "description": "Search engine to use for browser search (default: google)",
              "format": "string",
              "default": "google",
              "type": "named",
              "name": "engine"
            },
            {
              "description": "API key for the search provider",
              "format": "string",
              "type": "named",
              "name": "api-key"
            },
            {
              "description": "Base URL for the search provider",
              "format": "string",
              "type": "named",
              "name": "base-url"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-search",
          "version": "latest",
          "runtime_hint": "npx",
          "transport": {
            "type": "sse",
            "url": "http://127.0.0.1:{port}/sse"
          },
          "package_arguments": [
            {
              "description": "Search engine to use for browser search (default: google)",
              "format": "string",
              "default": "google",
              "type": "named",
              "name": "engine"
            },
            {
              "description": "API key for the search provider",
              "format": "string",
              "type": "named",
              "name": "api-key"
            },
            {
              "description": "Base URL for the search provider",
              "format": "string",
              "type": "named",
              "name": "base-url"
            },
            {
              "description": "Server port number",
              "is_required": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-search",
          "version": "latest",
          "runtime_hint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:{port}/mcp"
          },
          "package_arguments": [
            {
              "description": "Search engine to use for browser search (default: google)",
              "format": "string",
              "default": "google",
              "type": "named",
              "name": "engine"
            },
            {
              "description": "API key for the search provider",
              "format": "string",
              "type": "named",
              "name": "api-key"
            },
            {
              "description": "Base URL for the search provider",
              "format": "string",
              "type": "named",
              "name": "base-url"
            },
            {
              "description": "Server port number",
              "is_required": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3ee8a0e0-fb00-4d94-b983-4aa4a9bfdd8f",
          "published_at": "2025-09-09T06:16:40.975101309Z",
          "updated_at": "2025-09-09T06:16:40.975101309Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.ubaumann/mkdocs-mcp",
      "description": "An MCP server that provides serves MkDocs as resources.",
      "status": "active",
      "repository": {
        "url": "https://github.com/ubaumann/mkdocs-mcp",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "mkdocs-mcp",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Path to the MkDocs project",
              "is_required": true,
              "format": "string",
              "name": "MKDOCS_PROJECT_PATH"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "3f341d0b-0cb1-47a6-aedb-6ade17ef5135",
          "published_at": "2025-09-20T19:14:29.939373529Z",
          "updated_at": "2025-09-20T19:14:29.939373529Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.pga/pga-golf",
      "description": "PGA's official MCP Server for all things golf-related. Find a coach, play golf, improve your game.",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.pga.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4025acb1-1da6-40bf-bcea-e8614fabe911",
          "published_at": "2025-09-10T15:44:45.139319366Z",
          "updated_at": "2025-09-10T15:44:45.139319366Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.leshchenko1979/fast-mcp-telegram",
      "description": "Telegram MCP server with search and messaging capabilities",
      "status": "active",
      "repository": {
        "url": "https://github.com/leshchenko1979/fast-mcp-telegram",
        "source": "github"
      },
      "version": "0.4.5",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "fast-mcp-telegram",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Telegram API ID (from https://my.telegram.org/apps)",
              "is_required": true,
              "name": "API_ID"
            },
            {
              "description": "Telegram API Hash (from https://my.telegram.org/apps)",
              "is_required": true,
              "is_secret": true,
              "name": "API_HASH"
            },
            {
              "description": "Server mode: stdio (local), http-no-auth (dev), http-auth (prod)",
              "default": "stdio",
              "choices": [
                "stdio",
                "http-no-auth",
                "http-auth"
              ],
              "name": "SERVER_MODE"
            },
            {
              "description": "Custom session directory (defaults to ~/.config/fast-mcp-telegram/)",
              "name": "SESSION_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "40ab6512-9c86-4a99-b057-84887e27b0a2",
          "published_at": "2025-09-15T08:03:29.248076221Z",
          "updated_at": "2025-09-17T14:08:48.78146357Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.YinTokey/mcp_hackernews",
      "description": "MCP server exposing a simple Hacker News search tool (top stories).",
      "status": "active",
      "repository": {
        "url": "https://github.com/YinTokey/mcp_hackernews",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "mcp-hackernews",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "40ea433f-1885-4151-a331-0f0045fab476",
          "published_at": "2025-09-19T15:56:39.08426801Z",
          "updated_at": "2025-09-19T16:50:55.13033967Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "MCP server to read, inspect and troubleshoot codebase symbols",
      "status": "active",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "0.0.13",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@p1va/symbols",
          "version": "0.0.13",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "40fe13aa-29cb-4524-9230-6878bfde553b",
          "published_at": "2025-09-16T12:14:32.125980136Z",
          "updated_at": "2025-09-16T12:14:32.125980136Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.yuna0x0/anilist-mcp",
      "description": "AniList MCP server for accessing AniList API data",
      "status": "active",
      "repository": {
        "url": "https://github.com/yuna0x0/anilist-mcp",
        "source": "github"
      },
      "version": "1.3.2",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "anilist-mcp",
          "version": "1.3.2",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "is_secret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registry_type": "oci",
          "registry_base_url": "https://docker.io",
          "identifier": "yuna0x0/anilist-mcp",
          "version": "1.3.2",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "is_secret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registry_type": "mcpb",
          "identifier": "https://github.com/yuna0x0/anilist-mcp/releases/download/v1.3.2/anilist-mcp-1.3.2.mcpb",
          "version": "1.3.2",
          "file_sha256": "5d6c9d0b6a420ccdb884ac982e9e1f8140be856012c157e85ab5bacb78a013c8",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "is_secret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4198dc87-4f6b-4470-8d35-691ad9c34771",
          "published_at": "2025-09-13T07:42:46.258254946Z",
          "updated_at": "2025-09-13T07:58:52.384172296Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "status": "active",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.9",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "419f1f04-f00b-49a4-97d6-fb6f6a317004",
          "published_at": "2025-09-19T12:13:23.217247561Z",
          "updated_at": "2025-09-19T13:27:13.291855026Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://modelcontextprotocol.io/schemas/draft/2025-07-09/server.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.49-beta",
      "packages": [
        {
          "registry_type": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.49-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "419fee11-cdf7-4b4e-9dae-fdbc5bcd9844",
          "published_at": "2025-09-19T16:03:41.816983067Z",
          "updated_at": "2025-09-19T21:00:37.915164645Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.marlenezw/publish-mcp-server",
      "description": "An MCP server that helps developers publish their MCP servers to the registry",
      "status": "active",
      "repository": {
        "url": "https://github.com/marlenezw/publish-mcp-server",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "publish-mcp-server",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "41a4f7e2-45d4-413c-b9e5-23272bac4728",
          "published_at": "2025-09-18T21:41:33.141494993Z",
          "updated_at": "2025-09-18T22:42:06.389511199Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.nickzren/opentargets",
      "description": "Open Targets MCP server for targets, diseases, drugs, variants, and evidence",
      "status": "active",
      "repository": {
        "url": "https://github.com/nickzren/opentargets-mcp",
        "source": "github",
        "id": "984363568"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "opentargets-mcp",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "42b4e771-e8d6-4a5d-8988-0707672f922b",
          "published_at": "2025-09-16T22:22:05.051791975Z",
          "updated_at": "2025-09-16T22:22:05.051791975Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.9.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.9.0",
          "runtime_hint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "42d70334-c6a7-48fa-af42-a3aa27340b97",
          "published_at": "2025-09-20T19:44:08.651401017Z",
          "updated_at": "2025-09-20T21:15:29.26617904Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.LinuxSuRen/atest-mcp-server",
      "description": "Auto-download & launch https://github.com/LinuxSuRen/atest-mcp-server",
      "status": "active",
      "repository": {
        "url": "https://github.com/LinuxSuRen/atest-mcp-server",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "atest-mcp-server-launcher",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4356c3f4-4a0c-4d2c-970e-213eef76ce21",
          "published_at": "2025-09-09T07:37:00.342793911Z",
          "updated_at": "2025-09-09T07:37:00.342793911Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "MCP server to read, inspect and troubleshoot codebase symbols",
      "status": "active",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "0.0.14",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@p1va/symbols",
          "version": "0.0.14",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "435db01f-5936-44ac-8165-469b1e3491b6",
          "published_at": "2025-09-17T14:15:12.928928281Z",
          "updated_at": "2025-09-17T14:15:12.928928281Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.mcpanalytics/analytics",
      "description": "MCP Analytics, searchable tools and reports with interactive HTML visualization",
      "repository": {
        "url": "https://github.com/embeddedlayers/mcp-analytics",
        "source": "github"
      },
      "version": "1.0.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.mcpanalytics.ai/auth0"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4385f929-3b4c-4d4a-993f-a59a90d4c2be",
          "published_at": "2025-09-17T03:17:49.595345663Z",
          "updated_at": "2025-09-17T03:17:49.595345663Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.ChiR24/unreal-engine-mcp",
      "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp.git",
        "source": "github"
      },
      "version": "0.4.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "unreal-engine-mcp-server",
          "version": "0.4.0",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Unreal Engine host address",
              "value": "127.0.0.1",
              "name": "UE_HOST"
            },
            {
              "description": "Remote Control HTTP port",
              "value": "30010",
              "name": "UE_RC_HTTP_PORT"
            },
            {
              "description": "Remote Control WebSocket port",
              "value": "30020",
              "name": "UE_RC_WS_PORT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "443e7b8a-779a-45a3-af72-6920083bb317",
          "published_at": "2025-09-20T06:29:35.18499785Z",
          "updated_at": "2025-09-20T06:29:35.18499785Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.YinTokey/mcp_hackernews",
      "description": "MCP server exposing a simple Hacker News search tool (top stories).",
      "status": "active",
      "repository": {
        "url": "https://github.com/YinTokey/mcp_hackernews",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "mcp-hackernews",
          "version": "1.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4543a8e4-14f0-421e-973e-6589b4bd1f22",
          "published_at": "2025-09-19T20:06:35.10356138Z",
          "updated_at": "2025-09-19T20:06:35.10356138Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/BigVik193-reddit-ads-mcp",
      "description": "Manage Reddit advertising across accounts, campaigns, ad groups, posts, and ads. List accounts, fu…",
      "status": "active",
      "repository": {
        "url": "https://github.com/BigVik193/reddit-ads-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BigVik193/reddit-ads-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "455556b3-fce2-42d7-87f5-4fa1ed3db5e1",
          "published_at": "2025-09-14T22:00:51.726310747Z",
          "updated_at": "2025-09-14T22:00:51.726310747Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.waystation/airtable",
      "description": "Access and manage your Airtable bases, tables, and records seamlessly",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/airtable/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/airtable/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "45c4154d-8dbe-4452-aff1-739b8107d11b",
          "published_at": "2025-09-09T14:23:23.086629092Z",
          "updated_at": "2025-09-09T14:23:23.086629092Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "status": "active",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.2.4",
      "packages": [
        {
          "registry_type": "oci",
          "registry_base_url": "https://docker.io",
          "identifier": "teamwork/mcp",
          "version": "v1.2.4",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "is_required": true,
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "is_required": true,
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "45c8d51d-6b71-4f8c-aecd-733f1fc60d75",
          "published_at": "2025-09-12T15:06:41.256512883Z",
          "updated_at": "2025-09-15T12:27:37.741620698Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/fitaf-ai-fitaf-mcp",
      "description": "Track workouts, nutrition, body metrics, habits, and SMART goals with insights and trends. Connect…",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@fitaf-ai/fitaf-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "45dd171d-1cc6-4868-a6a3-e56dab5185ce",
          "published_at": "2025-09-12T20:09:50.974662926Z",
          "updated_at": "2025-09-12T20:09:50.974662926Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/smithery-ai-github",
      "description": "Access the GitHub API, enabling file operations, repository management, search functionality, and…",
      "status": "active",
      "repository": {
        "url": "https://github.com/smithery-ai/mcp-servers",
        "source": "github",
        "subfolder": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery-ai/github/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "467b0011-9334-4913-8a5f-bf597ea09179",
          "published_at": "2025-09-10T18:22:12.93052822Z",
          "updated_at": "2025-09-10T18:22:12.93052822Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.tedfytw1209/mcp-server-EVEfleet",
      "description": "An MCP server that provides tools for EVE Online players to manage their fleets",
      "status": "active",
      "repository": {
        "url": "https://github.com/tedfytw1209/mcp-server-EVEfleet",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "mcp-server-evefleet",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your API key for the service",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "470fe31e-737b-476a-b54a-fb75e5134219",
          "published_at": "2025-09-20T03:21:10.599411209Z",
          "updated_at": "2025-09-20T15:35:31.256350662Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.waystation/mcp",
      "description": "Ultimate toolbox to connect your LLM to popular productivity tools such as Monday, AirTable, Slack",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "48932704-6cfe-4708-b935-50c82afb3d42",
          "published_at": "2025-09-09T12:10:02.487930463Z",
          "updated_at": "2025-09-09T12:10:02.487930463Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.apify/apify-mcp-server",
      "description": "Apify MCP server provides access to a marketplace for web scraping and data extraction tools.",
      "status": "active",
      "repository": {
        "url": "https://github.com/apify/apify-mcp-server",
        "source": "github"
      },
      "version": "0.4.15",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apify.com/",
          "headers": [
            {
              "description": "Apify API token for authentication with Apify platform services. For example 'Bearer <apify-api-token>'",
              "is_required": true,
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "489c7d6e-1b49-4d94-a36a-19bc9de45671",
          "published_at": "2025-09-19T13:48:15.323674338Z",
          "updated_at": "2025-09-19T13:48:15.323674338Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "status": "active",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "0.6.3",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "ipybox",
          "version": "0.6.3",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "489daf00-1b61-4a8d-a421-5aa1e4058360",
          "published_at": "2025-09-13T14:43:00.869172467Z",
          "updated_at": "2025-09-14T09:27:10.09472192Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "dev.rostro/rostro",
      "description": "Turn any LLM multimodal; generate images, voices, videos, 3D models, music, and more.",
      "status": "active",
      "repository": {
        "url": "https://github.com/francis-ros/rostro-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://proto.rostro.dev/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "48f54e2e-d42d-4182-9598-351aa48f7a0c",
          "published_at": "2025-09-10T16:44:28.57398885Z",
          "updated_at": "2025-09-10T16:44:28.57398885Z",
          "is_latest": true
        },
        "io.modelcontextprotocol.registry/publisher-provided": {
          "build_info": {
            "commit": "f7e8d9c2b1a0",
            "deployment_id": "remote-fs-deploy-456",
            "region": "us-west-2",
            "timestamp": "2023-12-05T08:45:00Z"
          },
          "tool": "cloud-deployer",
          "version": "2.4.0"
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.wonderwhy-er/desktop-commander",
      "description": "MCP server for terminal commands, file operations, and process management",
      "status": "active",
      "repository": {
        "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
        "source": "github"
      },
      "version": "0.2.14",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@wonderwhy-er/desktop-commander",
          "version": "0.2.14",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "490703ba-12b3-48d8-81ef-056010280a9a",
          "published_at": "2025-09-12T19:05:34.284609703Z",
          "updated_at": "2025-09-18T13:15:52.412827978Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.Antonytm/mcp-sitecore-server",
      "description": "A Model Context Protocol server for Sitecore",
      "status": "active",
      "repository": {
        "url": "https://github.com/Antonytm/mcp-sitecore-server",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-sitecore-server",
          "version": "1.3.0",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "name": ""
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "491dd4a6-86a5-41d9-8ab0-dafaa3e9d2d0",
          "published_at": "2025-09-17T16:40:08.3256487Z",
          "updated_at": "2025-09-17T16:49:19.079089206Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "status": "active",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registry_type": "oci",
          "registry_base_url": "https://docker.io",
          "identifier": "teamwork/mcp",
          "version": "v1.3.0",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "is_required": true,
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "is_required": true,
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "498f3840-d628-416f-bccd-db23adaf4700",
          "published_at": "2025-09-15T12:27:37.668500509Z",
          "updated_at": "2025-09-17T18:13:49.787673531Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "status": "active",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.7",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4a3dfc88-8bc3-48f3-92b5-0285b455ba46",
          "published_at": "2025-09-19T11:31:50.983916145Z",
          "updated_at": "2025-09-19T11:38:30.02190701Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "MCP server to read, inspect and troubleshoot codebase symbols",
      "status": "active",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "0.0.11",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@p1va/symbols",
          "version": "0.0.11",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4a8da115-afef-47ee-af61-c4fbd1c6b0c4",
          "published_at": "2025-09-16T07:43:34.104606016Z",
          "updated_at": "2025-09-16T07:43:34.104606016Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ch.martinelli/jooq-mcp",
      "description": "An MCP server that provides access to the jOOQ documentation",
      "status": "active",
      "repository": {
        "url": "https://github.com/martinellich/jooq-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://jooq-mcp.martinelli.ch/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4bb00657-4481-44a5-be50-27f6382d0dd2",
          "published_at": "2025-09-12T13:41:08.40707085Z",
          "updated_at": "2025-09-12T13:41:08.40707085Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.devopness.mcp/server",
      "description": "An MCP server that uses Devopness to allow AI Agents to provision infrastructure to any cloud",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.devopness.com/mcp/"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4c009ed4-f329-4a34-b303-a2aa0ae88db0",
          "published_at": "2025-09-18T11:54:55.748612521Z",
          "updated_at": "2025-09-18T17:29:14.634765037Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.andrasfe/vulnicheck",
      "description": "HTTP MCP Server for comprehensive Python vulnerability scanning and security analysis.",
      "status": "active",
      "repository": {
        "url": "https://github.com/andrasfe/vulnicheck",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registry_type": "oci",
          "registry_base_url": "https://docker.io",
          "identifier": "andrasfe/vulnicheck",
          "version": "main",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3000/mcp"
          },
          "environment_variables": [
            {
              "description": "API key for NIST National Vulnerability Database (increases rate limit from 5 to 50 requests per 30 seconds)",
              "format": "string",
              "is_secret": true,
              "name": "NVD_API_KEY"
            },
            {
              "description": "GitHub token for Advisory Database access (increases rate limit to 5000 requests per hour)",
              "format": "string",
              "is_secret": true,
              "name": "GITHUB_TOKEN"
            },
            {
              "description": "OpenAI API key for LLM-based risk assessment in MCP passthrough operations",
              "format": "string",
              "is_secret": true,
              "name": "OPENAI_API_KEY"
            },
            {
              "description": "Anthropic API key for LLM-based risk assessment (alternative to OpenAI)",
              "format": "string",
              "is_secret": true,
              "name": "ANTHROPIC_API_KEY"
            },
            {
              "description": "Port for MCP HTTP server (default: 3000)",
              "format": "number",
              "name": "MCP_PORT"
            },
            {
              "description": "Cache time-to-live in seconds for vulnerability data (default: 900)",
              "format": "number",
              "name": "CACHE_TTL"
            },
            {
              "description": "Enable HTTP-only mode with MCP client delegation (true/false, default: auto-detect)",
              "format": "string",
              "name": "VULNICHECK_HTTP_ONLY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4c904cce-df55-4700-b291-f85739f83cc5",
          "published_at": "2025-09-19T18:01:49.485417802Z",
          "updated_at": "2025-09-19T18:01:49.485417802Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.5",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.5",
          "runtime_hint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4d4c0721-2d19-4f10-a916-46709c45e157",
          "published_at": "2025-09-20T22:45:23.804864603Z",
          "updated_at": "2025-09-20T23:05:10.127913968Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.10.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4e1fce76-3077-4378-95e1-ff0e8ec61516",
          "published_at": "2025-09-20T21:15:59.340300438Z",
          "updated_at": "2025-09-20T21:32:48.552000011Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/hjsh200219-pharminfo-mcp",
      "description": "Look up Korean drug ingredient and product data by HIRA component and product codes via Pilldoc. V…",
      "status": "active",
      "repository": {
        "url": "https://github.com/hjsh200219/pharminfo-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@hjsh200219/pharminfo-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4e8f5697-3584-407f-9988-cafe00fa8ffb",
          "published_at": "2025-09-17T06:55:47.401979389Z",
          "updated_at": "2025-09-17T06:55:47.401979389Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.marianfoo/mcp-sap-docs",
      "description": "Fast MCP server for unified SAP docs search (SAPUI5, CAP, OpenUI5, wdi5) with BM25 full-text search",
      "status": "active",
      "repository": {
        "url": "https://github.com/marianfoo/mcp-sap-docs",
        "source": "github"
      },
      "version": "0.3.9",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-sap-docs",
          "version": "0.3.9",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "4f89957c-7ca9-46a2-82b6-088c1124ffb4",
          "published_at": "2025-09-09T05:59:06.222569167Z",
          "updated_at": "2025-09-09T05:59:06.222569167Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/pinion05-supabase-mcp-lite",
      "description": "Same functionality, consuming only 1/20 of the context window tokens.",
      "status": "active",
      "repository": {
        "url": "https://github.com/pinion05/supabase-mcp-lite",
        "source": "github"
      },
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pinion05/supabase-mcp-lite/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "5034aa1f-3534-4079-8fc5-131563ece72f",
          "published_at": "2025-09-17T13:24:18.881488263Z",
          "updated_at": "2025-09-17T13:24:18.881488263Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.ChiR24/unreal-engine-mcp",
      "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp.git",
        "source": "github"
      },
      "version": "0.3.1",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "unreal-engine-mcp-server",
          "version": "0.3.1",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Unreal Engine host address",
              "value": "127.0.0.1",
              "name": "UE_HOST"
            },
            {
              "description": "Remote Control HTTP port",
              "value": "30010",
              "name": "UE_RC_HTTP_PORT"
            },
            {
              "description": "Remote Control WebSocket port",
              "value": "30020",
              "name": "UE_RC_WS_PORT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "50c79598-1f20-41a4-8c5f-e429a69b6af9",
          "published_at": "2025-09-19T06:41:59.942159455Z",
          "updated_at": "2025-09-20T06:29:35.19162833Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.rfdez/pvpc-mcp-server",
      "description": "Fetch the Voluntary Price for the Small Consumer (PVPC) published daily by Red Eléctrica.",
      "status": "active",
      "repository": {
        "url": "https://github.com/rfdez/pvpc-mcp-server",
        "source": "github"
      },
      "version": "3.2.2",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@rfdez/pvpc-mcp-server",
          "version": "3.2.2",
          "runtime_hint": "npx",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "description": "Use stdio transport type for MCP server",
              "value": "stdio",
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "ESIOS API key for authentication",
              "is_required": true,
              "is_secret": true,
              "type": "named",
              "name": "--api-key"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@rfdez/pvpc-mcp-server",
          "version": "3.2.2",
          "runtime_hint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:8080/mcp",
            "headers": [
              {
                "description": "ESIOS API key for authentication",
                "is_required": true,
                "is_secret": true,
                "name": "X-API-Key"
              }
            ]
          },
          "package_arguments": [
            {
              "description": "Use HTTP transport type for MCP server",
              "value": "http",
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "Port for HTTP transport",
              "default": "8080",
              "type": "named",
              "name": "--port"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "511f2dc8-4b9d-4e80-a0eb-4abb26a36c74",
          "published_at": "2025-09-10T16:28:04.867936223Z",
          "updated_at": "2025-09-10T16:53:23.925845807Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/cpretzinger-ai-assistant-simple",
      "description": "UPDATED 9/1/2025! NEW TOOLS! Use the Redis Stream tools with n8n MCP Client Node for use anywhere!…",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@cpretzinger/ai-assistant-simple/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "51513004-36e9-4683-88d3-91221c43d2f3",
          "published_at": "2025-09-15T00:26:36.144735854Z",
          "updated_at": "2025-09-15T00:26:36.144735854Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.cmpxchg16/mcp-ethical-hacking",
      "description": "An MCP server that provides LinkedIn & Reddit data",
      "status": "active",
      "repository": {
        "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
        "source": "github"
      },
      "version": "1.4.0",
      "packages": [
        {
          "registry_type": "mcpb",
          "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.4.0/server.mcpb",
          "version": "1.4.0",
          "file_sha256": "5e4f25e7f21b62974861f055cff90c1aef80d3b8bd1f32e05db744d1cbd67605",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "5197fe61-3f7f-45dd-9c93-2f43dd37787d",
          "published_at": "2025-09-16T04:55:02.185050652Z",
          "updated_at": "2025-09-16T04:55:02.185050652Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
      "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
      "status": "active",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/confluence",
          "version": "0.9.0",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "CONFLUENCE_HOST"
            },
            {
              "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
              "format": "string",
              "name": "CONFLUENCE_API_BASE_PATH"
            },
            {
              "description": "Confluence Personal Access Token or API token",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "CONFLUENCE_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "52318e0f-56de-406f-8558-4fd4e638060e",
          "published_at": "2025-09-13T11:40:42.156626724Z",
          "updated_at": "2025-09-13T13:17:33.205675704Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.stefanoamorelli/sec-edgar-mcp",
      "description": "SEC EDGAR MCP server that provides access to the US public filings through the US SEC EDGAR API",
      "status": "active",
      "repository": {
        "url": "https://github.com/stefanoamorelli/sec-edgar-mcp",
        "source": "github"
      },
      "version": "1.0.5",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "sec-edgar-mcp",
          "version": "1.0.5",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "The user agent to access the SEC EDGAR API",
              "is_required": true,
              "format": "string",
              "name": "SEC_EDGAR_USER_AGENT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "526b6940-2ff7-4b65-a4b4-03439dd8e4d4",
          "published_at": "2025-09-09T07:06:26.344648212Z",
          "updated_at": "2025-09-09T07:06:26.344648212Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.augee99/mcp-weather",
      "description": "An MCP server that provides [describe what your server does]",
      "status": "active",
      "repository": {
        "url": "https://github.com/augee99/mcp-weather",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "mcp-weather-augee99",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "5289430f-1a42-4a32-a130-7dd851f9a378",
          "published_at": "2025-09-12T13:24:44.527456713Z",
          "updated_at": "2025-09-12T13:24:44.527456713Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "status": "active",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "1.1.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "52c6f0fa-7114-4adc-afae-d48cfbbe97c0",
          "published_at": "2025-09-17T14:15:14.604093039Z",
          "updated_at": "2025-09-17T14:41:53.299387399Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.waystation/miro",
      "description": "Collaborate on visual boards with your team using Miro integration.",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/miro/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/miro/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "54131da0-99e1-4d90-a5d3-e0333a265843",
          "published_at": "2025-09-09T14:32:52.805916164Z",
          "updated_at": "2025-09-09T14:32:52.805916164Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.domdomegg/time-mcp-nuget",
      "description": "Get the current UTC time in RFC 3339 format.",
      "status": "active",
      "repository": {
        "url": "https://github.com/domdomegg/time-mcp-nuget.git",
        "source": "github"
      },
      "version": "1.0.8",
      "packages": [
        {
          "registry_type": "nuget",
          "identifier": "TimeMcpServer",
          "version": "1.0.8",
          "runtime_hint": "dnx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "542b567a-17c2-4a09-905b-313d6ead48d7",
          "published_at": "2025-09-12T02:58:39.843958183Z",
          "updated_at": "2025-09-12T02:58:39.843958183Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.isamu/mulmocast-vision",
      "description": "Easy and stylish presentation slide generator.",
      "status": "active",
      "repository": {
        "url": "https://github.com/receptron/mulmocast-vision",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mulmocast-vision",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "5473ea29-7534-4d74-ad1d-5b8185114052",
          "published_at": "2025-09-12T21:46:16.168898479Z",
          "updated_at": "2025-09-12T21:46:16.168898479Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/anirbanbasu-pymcp",
      "description": "Primarily to be used as a template repository for developing MCP servers with FastMCP in Python, P…",
      "status": "active",
      "repository": {
        "url": "https://github.com/anirbanbasu/pymcp",
        "source": "github"
      },
      "version": "0.1.7",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@anirbanbasu/pymcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "55c2e977-4086-4058-ad5d-6f432f70a2cf",
          "published_at": "2025-09-20T05:41:08.153834913Z",
          "updated_at": "2025-09-20T05:41:08.153834913Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://modelcontextprotocol.io/schemas/draft/2025-07-09/server.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "",
      "packages": [
        {
          "registry_type": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.11-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "55cfffa3-6f27-4010-97ce-7946cd76cad2",
          "published_at": "2025-09-10T13:58:00.558767962Z",
          "updated_at": "2025-09-10T15:31:23.618984633Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.mintmcp/gcal",
      "description": "A MCP server that works with Google Calendar to manage event listing, reading, and updates.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gcal.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "56080a46-21d6-48d2-91ff-ae1b9cb378b5",
          "published_at": "2025-09-09T19:49:54.013255259Z",
          "updated_at": "2025-09-09T19:49:54.013255259Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.karanb192/reddit-mcp-buddy",
      "description": "Reddit MCP server - browse posts, search content, analyze users.",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.1.1",
      "packages": [
        {
          "registry_type": "npm",
          "identifier": "reddit-mcp-buddy",
          "version": "1.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "5677b351-373d-4137-bc58-28f1ba0d105d",
          "published_at": "2025-09-20T10:45:00.297359799Z",
          "updated_at": "2025-09-20T10:45:00.297359799Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/callmybot-domoticz",
      "description": "Greet anyone by name with a friendly hello. Explore the origin of 'Hello, World' for context in de…",
      "status": "active",
      "repository": {
        "url": "https://github.com/callmybot/domoticz",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@callmybot/domoticz/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "568e596f-ed17-4d09-9812-8e3ef60e47ea",
          "published_at": "2025-09-18T10:31:39.650923022Z",
          "updated_at": "2025-09-18T10:31:39.650923022Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "{{VERSION}}",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "56e52d11-1f40-4125-97fe-abaccc9774ea",
          "published_at": "2025-09-20T19:40:51.557718325Z",
          "updated_at": "2025-09-20T20:30:22.469111767Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/yuhuison-mediawiki-mcp-server-auth",
      "description": "Connect to your MediaWiki using simple credentials and manage content without OAuth. Search, read,…",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@yuhuison/mediawiki-mcp-server-auth/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "576220c7-0d51-4d02-bcc6-26c7917a366f",
          "published_at": "2025-09-16T11:19:24.929803426Z",
          "updated_at": "2025-09-16T11:19:24.929803426Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.PV-Bhat/vibe-check-mcp-server",
      "description": "Metacognitive AI agent oversight: adaptive CPI interrupts for alignment, reflection and safety",
      "status": "active",
      "repository": {
        "url": "https://github.com/PV-Bhat/vibe-check-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "npm",
          "identifier": "@pv-bhat/vibe-check-mcp",
          "version": "2.5.1",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your API key for the service",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "57df4a71-6c82-4a88-a20e-985729df0399",
          "published_at": "2025-09-18T12:55:25.166512222Z",
          "updated_at": "2025-09-18T12:55:25.166512222Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-jira",
      "description": "MCP server for Atlassian Jira Data Center - search, view, and create issues",
      "status": "active",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.9",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/jira",
          "version": "0.9.9",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Jira host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "JIRA_HOST"
            },
            {
              "description": "Jira API base path (alternative to JIRA_HOST)",
              "format": "string",
              "name": "JIRA_API_BASE_PATH"
            },
            {
              "description": "Jira Personal Access Token or API token",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "JIRA_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "580738da-9f8f-426c-a690-03e6784e2000",
          "published_at": "2025-09-13T13:29:18.029022573Z",
          "updated_at": "2025-09-13T13:29:18.029022573Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.arielbk/anki-mcp",
      "description": "MCP server for integrating with Anki flashcards through conversational AI",
      "status": "active",
      "repository": {
        "url": "https://github.com/arielbk/anki-mcp",
        "source": "github"
      },
      "version": "0.3.2",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@arielbk/anki-mcp",
          "version": "0.3.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "584c8dd5-4a8c-4a9a-a8a2-2ef350e576a7",
          "published_at": "2025-09-11T12:16:49.682389389Z",
          "updated_at": "2025-09-11T12:16:49.682389389Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.ycjcl868/mcp-server-fear-greed",
      "description": "An MCP server for mcp-server-fear-greed",
      "status": "active",
      "repository": {
        "url": "https://github.com/ycjcl868/mcp-server-fear-greed",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-server-fear-greed",
          "version": "latest",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-server-fear-greed",
          "version": "latest",
          "runtime_hint": "npx",
          "transport": {
            "type": "sse",
            "url": "http://127.0.0.1:{port}/sse"
          },
          "package_arguments": [
            {
              "description": "Server port number",
              "is_required": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-server-fear-greed",
          "version": "latest",
          "runtime_hint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:{port}/mcp"
          },
          "package_arguments": [
            {
              "description": "Server port number",
              "is_required": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "5996e50e-d147-4b9d-ab2e-c771cd7dc73d",
          "published_at": "2025-09-09T04:08:35.601637811Z",
          "updated_at": "2025-09-09T04:08:35.601637811Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.mcpanalytics/analytics",
      "description": "ML statistical analysis platform for data teams",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.mcpanalytics.ai/auth0"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "5a8b6b36-7f28-48df-ae97-31f9a032aad5",
          "published_at": "2025-09-17T02:35:06.675809197Z",
          "updated_at": "2025-09-17T02:38:18.073872009Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.grupo-avispa/dsr_mcp_server",
      "description": "An MCP server that provides tools for interacting with Deep State Representation (DSR) graphs.",
      "status": "active",
      "repository": {
        "url": "https://github.com/grupo-avispa/dsr_mcp_server",
        "source": "github"
      },
      "version": "1.0.1",
      "website_url": "https://grupo-avispa.github.io/dsr_mcp_server/",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "5b031d63-c0be-4663-aa02-43a97a488467",
          "published_at": "2025-09-17T10:22:23.135622672Z",
          "updated_at": "2025-09-17T10:22:23.135622672Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.minnas/mcp",
      "description": "Share prompts and context with your team and discover community collections.",
      "status": "active",
      "repository": {
        "url": "https://github.com/sensoris/minnas-service",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://api.minnas.io/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "5b990a17-1e02-4112-9d51-50e0ce0bc8bd",
          "published_at": "2025-09-10T15:43:19.145095272Z",
          "updated_at": "2025-09-18T16:40:24.246590894Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
      "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
      "status": "active",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.8",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/confluence",
          "version": "0.9.8",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "CONFLUENCE_HOST"
            },
            {
              "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
              "format": "string",
              "name": "CONFLUENCE_API_BASE_PATH"
            },
            {
              "description": "Confluence Personal Access Token or API token",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "CONFLUENCE_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "5b9f4081-5b9b-4790-81e8-0e4003f87912",
          "published_at": "2025-09-13T13:18:50.968631388Z",
          "updated_at": "2025-09-13T13:29:18.545408762Z",
          "is_latest": false
        }
      }
    }
  ]
}