{
  "servers": [
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.3.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.4",
          "runtimeHint": "node",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "stdio",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.4",
          "runtimeHint": "node",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "http",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The host interface for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The HTTP endpoint path for MCP requests.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_STRATEGY"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "69052f97-2b99-4ab4-9d81-0de12a92b966",
          "versionId": "4262c056-422c-44a2-a545-c970216f986d",
          "publishedAt": "2025-09-26T16:34:39.110415456Z",
          "updatedAt": "2025-09-29T23:55:39.60751942Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.biodnd/agent-press",
      "description": "Agent Press: news MCP server streaming company headlines",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/press"
      },
      "version": "0.1.2",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-press.biodnd.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8475fdbb-a38f-4d19-95ad-00e601276b42",
          "versionId": "428a0bb3-7bb6-4ff0-92f6-9636a39299c9",
          "publishedAt": "2025-09-23T09:47:04.193456925Z",
          "updatedAt": "2025-09-23T09:47:04.193456925Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.jztan/redmine-mcp-server",
      "description": "Production-ready MCP server for Redmine with security, pagination, and enterprise features",
      "status": "active",
      "repository": {
        "url": "https://github.com/jztan/redmine-mcp-server",
        "source": "github"
      },
      "version": "0.4.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "redmine-mcp-server",
          "version": "0.4.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL of your Redmine server (e.g., https://your-redmine-server.com)",
              "isRequired": true,
              "format": "string",
              "name": "REDMINE_URL"
            },
            {
              "description": "Redmine username for authentication (alternative to API key)",
              "format": "string",
              "name": "REDMINE_USERNAME"
            },
            {
              "description": "Redmine password for authentication (alternative to API key)",
              "format": "string",
              "isSecret": true,
              "name": "REDMINE_PASSWORD"
            },
            {
              "description": "Redmine API key for authentication (alternative to username/password)",
              "format": "string",
              "isSecret": true,
              "name": "REDMINE_API_KEY"
            },
            {
              "description": "Host address for the MCP server (default: 0.0.0.0)",
              "format": "string",
              "default": "0.0.0.0",
              "name": "SERVER_HOST"
            },
            {
              "description": "Port for the MCP server (default: 8000)",
              "format": "integer",
              "default": "8000",
              "name": "SERVER_PORT"
            },
            {
              "description": "Public hostname for file download URLs (default: localhost)",
              "format": "string",
              "default": "localhost",
              "name": "PUBLIC_HOST"
            },
            {
              "description": "Public port for file download URLs (default: 8000)",
              "format": "integer",
              "default": "8000",
              "name": "PUBLIC_PORT"
            },
            {
              "description": "Directory for storing downloaded attachments (default: ./attachments)",
              "format": "string",
              "default": "./attachments",
              "name": "ATTACHMENTS_DIR"
            },
            {
              "description": "Enable automatic cleanup of expired files (default: true)",
              "format": "boolean",
              "default": "true",
              "name": "AUTO_CLEANUP_ENABLED"
            },
            {
              "description": "Interval between cleanup runs in minutes (default: 10)",
              "format": "integer",
              "default": "10",
              "name": "CLEANUP_INTERVAL_MINUTES"
            },
            {
              "description": "Default expiry time for attachments in minutes (default: 60)",
              "format": "integer",
              "default": "60",
              "name": "ATTACHMENT_EXPIRES_MINUTES"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a583b5d9-530d-4f56-97b4-d061b3aa9a2a",
          "versionId": "429e5de1-9038-4791-9b53-49a2710edfb7",
          "publishedAt": "2025-09-24T12:09:39.852727599Z",
          "updatedAt": "2025-09-24T12:09:39.852727599Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.nickzren/opentargets",
      "description": "Open Targets MCP server for targets, diseases, drugs, variants, and evidence",
      "status": "active",
      "repository": {
        "url": "https://github.com/nickzren/opentargets-mcp",
        "source": "github",
        "id": "984363568"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "opentargets-mcp",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "224e7593-863e-4ec9-8b77-ef5b6b011250",
          "versionId": "42b4e771-e8d6-4a5d-8988-0707672f922b",
          "publishedAt": "2025-09-16T22:22:05.051791975Z",
          "updatedAt": "2025-09-22T16:27:58.093087071Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.9.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.9.0",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "364d771b-c515-4071-805d-75513fa308ce",
          "versionId": "42d70334-c6a7-48fa-af42-a3aa27340b97",
          "publishedAt": "2025-09-20T19:44:08.651401017Z",
          "updatedAt": "2025-09-20T21:15:29.26617904Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.LinuxSuRen/atest-mcp-server",
      "description": "Auto-download & launch https://github.com/LinuxSuRen/atest-mcp-server",
      "status": "active",
      "repository": {
        "url": "https://github.com/LinuxSuRen/atest-mcp-server",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "atest-mcp-server-launcher",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "374be861-2966-4300-934d-a7f47011a94a",
          "versionId": "4356c3f4-4a0c-4d2c-970e-213eef76ce21",
          "publishedAt": "2025-09-09T07:37:00.342793911Z",
          "updatedAt": "2025-09-09T07:37:00.342793911Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "MCP server to read, inspect and troubleshoot codebase symbols",
      "status": "active",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "0.0.14",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@p1va/symbols",
          "version": "0.0.14",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "d827a965-33bc-4262-87df-98ca6eac9a12",
          "versionId": "435db01f-5936-44ac-8165-469b1e3491b6",
          "publishedAt": "2025-09-17T14:15:12.928928281Z",
          "updatedAt": "2025-09-17T14:15:12.928928281Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.mcpanalytics/analytics",
      "description": "MCP Analytics, searchable tools and reports with interactive HTML visualization",
      "repository": {
        "url": "https://github.com/embeddedlayers/mcp-analytics",
        "source": "github"
      },
      "version": "1.0.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.mcpanalytics.ai/auth0"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "219a2fa3-ba26-4574-9c45-44886d4ff9e8",
          "versionId": "4385f929-3b4c-4d4a-993f-a59a90d4c2be",
          "publishedAt": "2025-09-17T03:17:49.595345663Z",
          "updatedAt": "2025-09-17T03:17:49.595345663Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.ChiR24/unreal-engine-mcp",
      "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp.git",
        "source": "github"
      },
      "version": "0.4.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "unreal-engine-mcp-server",
          "version": "0.4.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Unreal Engine host address",
              "value": "127.0.0.1",
              "name": "UE_HOST"
            },
            {
              "description": "Remote Control HTTP port",
              "value": "30010",
              "name": "UE_RC_HTTP_PORT"
            },
            {
              "description": "Remote Control WebSocket port",
              "value": "30020",
              "name": "UE_RC_WS_PORT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "49c64feb-2e4c-406d-b39f-1236bf2212a6",
          "versionId": "443e7b8a-779a-45a3-af72-6920083bb317",
          "publishedAt": "2025-09-20T06:29:35.18499785Z",
          "updatedAt": "2025-09-28T14:25:16.432207323Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.YinTokey/mcp_hackernews",
      "description": "MCP server exposing a simple Hacker News search tool (top stories).",
      "status": "active",
      "repository": {
        "url": "https://github.com/YinTokey/mcp_hackernews",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-hackernews",
          "version": "1.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "24a4ab76-7ab6-4151-8cbb-692e6fe7d470",
          "versionId": "4543a8e4-14f0-421e-973e-6589b4bd1f22",
          "publishedAt": "2025-09-19T20:06:35.10356138Z",
          "updatedAt": "2025-09-19T20:06:35.10356138Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/BigVik193-reddit-ads-mcp",
      "description": "Manage Reddit advertising across accounts, campaigns, ad groups, posts, and ads. List accounts, fu…",
      "status": "active",
      "repository": {
        "url": "https://github.com/BigVik193/reddit-ads-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BigVik193/reddit-ads-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a2b19133-66ab-4184-a31f-90b39887825f",
          "versionId": "455556b3-fce2-42d7-87f5-4fa1ed3db5e1",
          "publishedAt": "2025-09-14T22:00:51.726310747Z",
          "updatedAt": "2025-09-14T22:00:51.726310747Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Snowflake-Labs/mcp",
      "description": "MCP Server for Snowflake from Snowflake Labs",
      "status": "active",
      "repository": {
        "url": "https://github.com/Snowflake-Labs/mcp",
        "source": "github"
      },
      "version": "1.3.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "snowflake-labs-mcp",
          "version": "1.3.3",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Path to service specification file",
              "isRequired": true,
              "type": "named",
              "name": "--service-config-file"
            },
            {
              "description": "Account identifier (e.g. xy12345.us-east-1)",
              "type": "named",
              "name": "--account"
            },
            {
              "description": "Snowflake host URL",
              "type": "named",
              "name": "--host"
            },
            {
              "description": "Username for authentication",
              "type": "named",
              "name": "--user"
            },
            {
              "description": "Password or programmatic access token",
              "type": "named",
              "name": "--password"
            },
            {
              "description": "Role to use for connection",
              "type": "named",
              "name": "--role"
            },
            {
              "description": "Warehouse to use for queries",
              "type": "named",
              "name": "--warehouse"
            },
            {
              "description": "Whether passcode is embedded in password",
              "type": "named",
              "name": "--passcode-in-password"
            },
            {
              "description": "MFA passcode for authentication",
              "type": "named",
              "name": "--passcode"
            },
            {
              "description": "Private key for key pair authentication",
              "type": "named",
              "name": "--private-key"
            },
            {
              "description": "Path to private key file",
              "type": "named",
              "name": "--private-key-file"
            },
            {
              "description": "Password for encrypted private key",
              "type": "named",
              "name": "--private-key-file-pwd"
            },
            {
              "description": "Authentication type",
              "default": "snowflake",
              "type": "named",
              "name": "--authenticator"
            },
            {
              "description": "Name of connection from connections.toml (or config.toml) file",
              "type": "named",
              "name": "--connection-name"
            },
            {
              "description": "Transport for the MCP server",
              "default": "stdio",
              "choices": [
                "stdio",
                "http",
                "sse",
                "streamable-http"
              ],
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "Custom endpoint path for HTTP transports",
              "default": "/mcp",
              "type": "named",
              "name": "--endpoint"
            }
          ],
          "environmentVariables": [
            {
              "description": "Account identifier (e.g. xy12345.us-east-1)",
              "format": "string",
              "name": "SNOWFLAKE_ACCOUNT"
            },
            {
              "description": "Snowflake host URL",
              "format": "string",
              "name": "SNOWFLAKE_HOST"
            },
            {
              "description": "Username for authentication",
              "format": "string",
              "name": "SNOWFLAKE_USER"
            },
            {
              "description": "Password or programmatic access token",
              "format": "string",
              "name": "SNOWFLAKE_PASSWORD"
            },
            {
              "description": "Role to use for connection",
              "format": "string",
              "name": "SNOWFLAKE_ROLE"
            },
            {
              "description": "Warehouse to use for queries",
              "format": "string",
              "name": "SNOWFLAKE_WAREHOUSE"
            },
            {
              "description": "MFA passcode for authentication",
              "format": "string",
              "name": "SNOWFLAKE_PASSCODE"
            },
            {
              "description": "Private key for key pair authentication",
              "format": "string",
              "name": "SNOWFLAKE_PRIVATE_KEY"
            },
            {
              "description": "Path to private key file",
              "format": "string",
              "name": "SNOWFLAKE_PRIVATE_KEY_FILE"
            },
            {
              "description": "Password for encrypted private key",
              "format": "string",
              "name": "SNOWFLAKE_PRIVATE_KEY_FILE_PWD"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "cd9210af-efe4-4112-97c2-32e2a6f25813",
          "versionId": "45a95eb6-1651-44eb-85bd-cf921aa14831",
          "publishedAt": "2025-09-26T18:50:29.355753394Z",
          "updatedAt": "2025-09-26T18:50:29.355753394Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.waystation/airtable",
      "description": "Access and manage your Airtable bases, tables, and records seamlessly",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/airtable/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/airtable/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "161a89b9-90f0-4307-ad04-ebd7e916a760",
          "versionId": "45c4154d-8dbe-4452-aff1-739b8107d11b",
          "publishedAt": "2025-09-09T14:23:23.086629092Z",
          "updatedAt": "2025-09-09T14:23:23.086629092Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "status": "active",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.2.4",
      "packages": [
        {
          "registryType": "oci",
          "registryBaseUrl": "https://docker.io",
          "identifier": "teamwork/mcp",
          "version": "v1.2.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8e1daf12-8a74-4718-93ec-86b05728241d",
          "versionId": "45c8d51d-6b71-4f8c-aecd-733f1fc60d75",
          "publishedAt": "2025-09-12T15:06:41.256512883Z",
          "updatedAt": "2025-09-15T12:27:37.741620698Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/fitaf-ai-fitaf-mcp",
      "description": "Track workouts, nutrition, body metrics, habits, and SMART goals with insights and trends. Connect…",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@fitaf-ai/fitaf-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "40878ab8-8373-4113-8040-fc62619053d4",
          "versionId": "45dd171d-1cc6-4868-a6a3-e56dab5185ce",
          "publishedAt": "2025-09-12T20:09:50.974662926Z",
          "updatedAt": "2025-09-12T20:09:50.974662926Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.srikrishna235/scrimba-teaching-mcp",
      "description": "Unified MCP for Scrimba interactive programming education with visual learning",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "3.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "scrimba-teaching-mcp",
          "version": "3.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "9af8219e-a44d-4cce-a08d-8d5b8b7466fe",
          "versionId": "46761a87-81e6-4126-bc3e-4c0c35decf40",
          "publishedAt": "2025-09-24T14:46:53.165686451Z",
          "updatedAt": "2025-09-24T14:46:53.165686451Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/smithery-ai-github",
      "description": "Access the GitHub API, enabling file operations, repository management, search functionality, and…",
      "status": "active",
      "repository": {
        "url": "https://github.com/smithery-ai/mcp-servers",
        "source": "github",
        "subfolder": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery-ai/github/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "f5bd4398-46bd-4f1a-b6e2-7a175ce401d5",
          "versionId": "467b0011-9334-4913-8a5f-bf597ea09179",
          "publishedAt": "2025-09-10T18:22:12.93052822Z",
          "updatedAt": "2025-09-10T18:22:12.93052822Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.tedfytw1209/mcp-server-EVEfleet",
      "description": "An MCP server that provides tools for EVE Online players to manage their fleets",
      "status": "active",
      "repository": {
        "url": "https://github.com/tedfytw1209/mcp-server-EVEfleet",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-server-evefleet",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "540d0e52-a6cb-4d28-9377-887eca830e5d",
          "versionId": "470fe31e-737b-476a-b54a-fb75e5134219",
          "publishedAt": "2025-09-20T03:21:10.599411209Z",
          "updatedAt": "2025-09-20T15:35:31.256350662Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.brokerchooser/broker-safety",
      "description": "MCP server offering regulator-sourced legitimacy checks on investment entities by name or URL.",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.brokerchooser.com/servers/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2235c4da-512a-4335-9778-d8f972aa149f",
          "versionId": "47b4a28b-8ecd-4ab2-bde1-2e1c7244ec00",
          "publishedAt": "2025-09-29T09:55:15.328084861Z",
          "updatedAt": "2025-09-29T09:55:15.328084861Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.waystation/mcp",
      "description": "Ultimate toolbox to connect your LLM to popular productivity tools such as Monday, AirTable, Slack",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "cfa6ee14-19e7-4d65-b5f5-ac103c484bed",
          "versionId": "48932704-6cfe-4708-b935-50c82afb3d42",
          "publishedAt": "2025-09-09T12:10:02.487930463Z",
          "updatedAt": "2025-09-09T12:10:02.487930463Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.apify/apify-mcp-server",
      "description": "Apify MCP server provides access to a marketplace for web scraping and data extraction tools.",
      "status": "active",
      "repository": {
        "url": "https://github.com/apify/apify-mcp-server",
        "source": "github"
      },
      "version": "0.4.15",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apify.com/",
          "headers": [
            {
              "description": "Apify API token for authentication with Apify platform services. For example 'Bearer <apify-api-token>'",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2bc2f4cd-9894-48ac-9580-ca1ad1ceef26",
          "versionId": "489c7d6e-1b49-4d94-a36a-19bc9de45671",
          "publishedAt": "2025-09-19T13:48:15.323674338Z",
          "updatedAt": "2025-09-19T13:48:15.323674338Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "status": "active",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "0.6.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ipybox",
          "version": "0.6.3",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2310a088-c5ba-429e-84b2-82d92622023b",
          "versionId": "489daf00-1b61-4a8d-a421-5aa1e4058360",
          "publishedAt": "2025-09-13T14:43:00.869172467Z",
          "updatedAt": "2025-09-14T09:27:10.09472192Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.MR901/plots-mcp",
      "description": "MCP server for data visualization with Mermaid charts.",
      "status": "active",
      "repository": {
        "url": "https://github.com/MR901/plots-mcp",
        "source": "github"
      },
      "version": "0.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-plots",
          "version": "0.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "bdbc2c30-2654-4e63-a034-aa20c09e8dbf",
          "versionId": "48d478fe-9fb1-4b8c-9132-3b0e3e22b2ca",
          "publishedAt": "2025-09-22T19:25:51.843169807Z",
          "updatedAt": "2025-09-22T19:25:51.843169807Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "dev.rostro/rostro",
      "description": "Turn any LLM multimodal; generate images, voices, videos, 3D models, music, and more.",
      "status": "active",
      "repository": {
        "url": "https://github.com/francis-ros/rostro-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://proto.rostro.dev/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ad9fa350-fafb-4e58-a075-a28c9d358ed3",
          "versionId": "48f54e2e-d42d-4182-9598-351aa48f7a0c",
          "publishedAt": "2025-09-10T16:44:28.57398885Z",
          "updatedAt": "2025-09-10T16:44:28.57398885Z",
          "isLatest": true
        },
        "io.modelcontextprotocol.registry/publisher-provided": {
          "build_info": {
            "commit": "f7e8d9c2b1a0",
            "deployment_id": "remote-fs-deploy-456",
            "region": "us-west-2",
            "timestamp": "2023-12-05T08:45:00Z"
          },
          "tool": "cloud-deployer",
          "version": "2.4.0"
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.wonderwhy-er/desktop-commander",
      "description": "MCP server for terminal commands, file operations, and process management",
      "status": "active",
      "repository": {
        "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
        "source": "github"
      },
      "version": "0.2.14",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@wonderwhy-er/desktop-commander",
          "version": "0.2.14",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "70b472c6-0bf2-44b2-97fc-be12bfc3cdca",
          "versionId": "490703ba-12b3-48d8-81ef-056010280a9a",
          "publishedAt": "2025-09-12T19:05:34.284609703Z",
          "updatedAt": "2025-09-18T13:15:52.412827978Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Antonytm/mcp-sitecore-server",
      "description": "A Model Context Protocol server for Sitecore",
      "status": "active",
      "repository": {
        "url": "https://github.com/Antonytm/mcp-sitecore-server",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-sitecore-server",
          "version": "1.3.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": ""
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "397fbabe-4af0-4772-84f5-d660b761255c",
          "versionId": "491dd4a6-86a5-41d9-8ab0-dafaa3e9d2d0",
          "publishedAt": "2025-09-17T16:40:08.3256487Z",
          "updatedAt": "2025-09-17T16:49:19.079089206Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/sebastianall1977-gmail-mcp",
      "description": "Manage Gmail end-to-end: search, read, send, draft, label, and organize threads. Automate workflow…",
      "status": "active",
      "repository": {
        "url": "https://github.com/sebastianall1977/gmail-mcp",
        "source": "github"
      },
      "version": "1.7.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@sebastianall1977/gmail-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "fe13d0fe-b6c2-4f4a-bed0-ec3abb215125",
          "versionId": "498785a0-f88a-4442-b3da-26b2bbc738e2",
          "publishedAt": "2025-09-29T13:55:24.480832684Z",
          "updatedAt": "2025-09-29T13:55:24.480832684Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "status": "active",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registryType": "oci",
          "registryBaseUrl": "https://docker.io",
          "identifier": "teamwork/mcp",
          "version": "v1.3.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8e1daf12-8a74-4718-93ec-86b05728241d",
          "versionId": "498f3840-d628-416f-bccd-db23adaf4700",
          "publishedAt": "2025-09-15T12:27:37.668500509Z",
          "updatedAt": "2025-09-17T18:13:49.787673531Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "status": "active",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.7",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
          "versionId": "4a3dfc88-8bc3-48f3-92b5-0285b455ba46",
          "publishedAt": "2025-09-19T11:31:50.983916145Z",
          "updatedAt": "2025-09-19T11:38:30.02190701Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "MCP server to read, inspect and troubleshoot codebase symbols",
      "status": "active",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "0.0.11",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@p1va/symbols",
          "version": "0.0.11",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "d827a965-33bc-4262-87df-98ca6eac9a12",
          "versionId": "4a8da115-afef-47ee-af61-c4fbd1c6b0c4",
          "publishedAt": "2025-09-16T07:43:34.104606016Z",
          "updatedAt": "2025-09-16T07:43:34.104606016Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.iworkist/btcmcp",
      "description": "An MCP server that provides Bitcoin price data from Binance API",
      "status": "active",
      "repository": {
        "url": "https://github.com/iworkist/btcmcp",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "btcmcp",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "00c3fbf9-d8f5-4ee9-9672-d7181c6a6026",
          "versionId": "4b81ac7a-cf9e-4960-9b82-529681ed11b1",
          "publishedAt": "2025-09-23T08:31:39.293571745Z",
          "updatedAt": "2025-09-23T08:31:39.293571745Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ch.martinelli/jooq-mcp",
      "description": "An MCP server that provides access to the jOOQ documentation",
      "status": "active",
      "repository": {
        "url": "https://github.com/martinellich/jooq-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://jooq-mcp.martinelli.ch/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "912ef6fa-adcf-405b-a27d-ab1807b18aad",
          "versionId": "4bb00657-4481-44a5-be50-27f6382d0dd2",
          "publishedAt": "2025-09-12T13:41:08.40707085Z",
          "updatedAt": "2025-09-12T13:41:08.40707085Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.devopness.mcp/server",
      "description": "An MCP server that uses Devopness to allow AI Agents to provision infrastructure to any cloud",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.devopness.com/mcp/"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "bc4ee5b3-ef7a-4c6b-b1b0-f7b248a65512",
          "versionId": "4c009ed4-f329-4a34-b303-a2aa0ae88db0",
          "publishedAt": "2025-09-18T11:54:55.748612521Z",
          "updatedAt": "2025-09-18T17:29:14.634765037Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.andrasfe/vulnicheck",
      "description": "HTTP MCP Server for comprehensive Python vulnerability scanning and security analysis.",
      "status": "active",
      "repository": {
        "url": "https://github.com/andrasfe/vulnicheck",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "oci",
          "registryBaseUrl": "https://docker.io",
          "identifier": "andrasfe/vulnicheck",
          "version": "main",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3000/mcp"
          },
          "environmentVariables": [
            {
              "description": "API key for NIST National Vulnerability Database (increases rate limit from 5 to 50 requests per 30 seconds)",
              "format": "string",
              "isSecret": true,
              "name": "NVD_API_KEY"
            },
            {
              "description": "GitHub token for Advisory Database access (increases rate limit to 5000 requests per hour)",
              "format": "string",
              "isSecret": true,
              "name": "GITHUB_TOKEN"
            },
            {
              "description": "OpenAI API key for LLM-based risk assessment in MCP passthrough operations",
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            },
            {
              "description": "Anthropic API key for LLM-based risk assessment (alternative to OpenAI)",
              "format": "string",
              "isSecret": true,
              "name": "ANTHROPIC_API_KEY"
            },
            {
              "description": "Port for MCP HTTP server (default: 3000)",
              "format": "number",
              "name": "MCP_PORT"
            },
            {
              "description": "Cache time-to-live in seconds for vulnerability data (default: 900)",
              "format": "number",
              "name": "CACHE_TTL"
            },
            {
              "description": "Enable HTTP-only mode with MCP client delegation (true/false, default: auto-detect)",
              "format": "string",
              "name": "VULNICHECK_HTTP_ONLY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ded14e29-abb2-48ca-9ce8-cbe45f521f77",
          "versionId": "4c904cce-df55-4700-b291-f85739f83cc5",
          "publishedAt": "2025-09-19T18:01:49.485417802Z",
          "updatedAt": "2025-09-19T18:01:49.485417802Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.3.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.5",
          "runtimeHint": "node",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "stdio",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.5",
          "runtimeHint": "node",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "http",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The host interface for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The HTTP endpoint path for MCP requests.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_STRATEGY"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "69052f97-2b99-4ab4-9d81-0de12a92b966",
          "versionId": "4c9a6186-7faf-43a7-b519-5178f3bf21d9",
          "publishedAt": "2025-09-29T23:55:39.600169325Z",
          "updatedAt": "2025-09-29T23:55:39.600169325Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.5",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "364d771b-c515-4071-805d-75513fa308ce",
          "versionId": "4d4c0721-2d19-4f10-a916-46709c45e157",
          "publishedAt": "2025-09-20T22:45:23.804864603Z",
          "updatedAt": "2025-09-20T23:05:10.127913968Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "status": "active",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.11",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.1.11",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "e4bf9279-bd3f-43d4-8c82-8b26d237876b",
          "versionId": "4dc1dc55-df88-44ba-826b-411eb2d48d6b",
          "publishedAt": "2025-09-29T14:12:11.322353646Z",
          "updatedAt": "2025-09-29T14:59:11.627225582Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.10.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a10fab8f-cce3-42a0-b3e4-e34e2f71c41c",
          "versionId": "4e1fce76-3077-4378-95e1-ff0e8ec61516",
          "publishedAt": "2025-09-20T21:15:59.340300438Z",
          "updatedAt": "2025-09-20T21:32:48.552000011Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/hjsh200219-pharminfo-mcp",
      "description": "Look up Korean drug ingredient and product data by HIRA component and product codes via Pilldoc. V…",
      "status": "active",
      "repository": {
        "url": "https://github.com/hjsh200219/pharminfo-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@hjsh200219/pharminfo-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ee0f9f6f-7232-4c68-afde-393bef2ec4de",
          "versionId": "4e8f5697-3584-407f-9988-cafe00fa8ffb",
          "publishedAt": "2025-09-17T06:55:47.401979389Z",
          "updatedAt": "2025-09-17T06:55:47.401979389Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.wordlift/mcp-server",
      "description": "WordLift MCP Server: AI-powered content optimization and semantic analysis",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.4",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.wordlift.io/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "197af124-3b34-49be-ab35-e1dace2c3d09",
          "versionId": "4f349a5d-7a33-4e9d-88ed-81185bceb8fe",
          "publishedAt": "2025-09-21T14:24:47.187744796Z",
          "updatedAt": "2025-09-21T14:24:47.187744796Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.marianfoo/mcp-sap-docs",
      "description": "Fast MCP server for unified SAP docs search (SAPUI5, CAP, OpenUI5, wdi5) with BM25 full-text search",
      "status": "active",
      "repository": {
        "url": "https://github.com/marianfoo/mcp-sap-docs",
        "source": "github"
      },
      "version": "0.3.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-sap-docs",
          "version": "0.3.9",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "6d9592fe-b3ec-44ce-b2ce-ad889cdfe291",
          "versionId": "4f89957c-7ca9-46a2-82b6-088c1124ffb4",
          "publishedAt": "2025-09-09T05:59:06.222569167Z",
          "updatedAt": "2025-09-09T05:59:06.222569167Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/pinion05-supabase-mcp-lite",
      "description": "Same functionality, consuming only 1/20 of the context window tokens.",
      "status": "active",
      "repository": {
        "url": "https://github.com/pinion05/supabase-mcp-lite",
        "source": "github"
      },
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pinion05/supabase-mcp-lite/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "d2df22c5-6e10-4670-9847-4dc7ac600520",
          "versionId": "5034aa1f-3534-4079-8fc5-131563ece72f",
          "publishedAt": "2025-09-17T13:24:18.881488263Z",
          "updatedAt": "2025-09-17T13:24:18.881488263Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.ChiR24/unreal-engine-mcp",
      "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp.git",
        "source": "github"
      },
      "version": "0.3.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "unreal-engine-mcp-server",
          "version": "0.3.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Unreal Engine host address",
              "value": "127.0.0.1",
              "name": "UE_HOST"
            },
            {
              "description": "Remote Control HTTP port",
              "value": "30010",
              "name": "UE_RC_HTTP_PORT"
            },
            {
              "description": "Remote Control WebSocket port",
              "value": "30020",
              "name": "UE_RC_WS_PORT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "49c64feb-2e4c-406d-b39f-1236bf2212a6",
          "versionId": "50c79598-1f20-41a4-8c5f-e429a69b6af9",
          "publishedAt": "2025-09-19T06:41:59.942159455Z",
          "updatedAt": "2025-09-20T06:29:35.19162833Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.rfdez/pvpc-mcp-server",
      "description": "Fetch the Voluntary Price for the Small Consumer (PVPC) published daily by Red Eléctrica.",
      "status": "active",
      "repository": {
        "url": "https://github.com/rfdez/pvpc-mcp-server",
        "source": "github"
      },
      "version": "3.2.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@rfdez/pvpc-mcp-server",
          "version": "3.2.2",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Use stdio transport type for MCP server",
              "value": "stdio",
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "ESIOS API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "type": "named",
              "name": "--api-key"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@rfdez/pvpc-mcp-server",
          "version": "3.2.2",
          "runtimeHint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:8080/mcp",
            "headers": [
              {
                "description": "ESIOS API key for authentication",
                "isRequired": true,
                "isSecret": true,
                "name": "X-API-Key"
              }
            ]
          },
          "packageArguments": [
            {
              "description": "Use HTTP transport type for MCP server",
              "value": "http",
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "Port for HTTP transport",
              "default": "8080",
              "type": "named",
              "name": "--port"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "9c2d3dad-6914-4484-b9e2-2393f397e1cf",
          "versionId": "511f2dc8-4b9d-4e80-a0eb-4abb26a36c74",
          "publishedAt": "2025-09-10T16:28:04.867936223Z",
          "updatedAt": "2025-09-10T16:53:23.925845807Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/cpretzinger-ai-assistant-simple",
      "description": "UPDATED 9/1/2025! NEW TOOLS! Use the Redis Stream tools with n8n MCP Client Node for use anywhere!…",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@cpretzinger/ai-assistant-simple/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "19ef2899-58cb-4184-bcd5-43f04db4cc85",
          "versionId": "51513004-36e9-4683-88d3-91221c43d2f3",
          "publishedAt": "2025-09-15T00:26:36.144735854Z",
          "updatedAt": "2025-09-15T00:26:36.144735854Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.cmpxchg16/mcp-ethical-hacking",
      "description": "An MCP server that provides LinkedIn & Reddit data",
      "status": "active",
      "repository": {
        "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
        "source": "github"
      },
      "version": "1.4.0",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.4.0/server.mcpb",
          "version": "1.4.0",
          "fileSha256": "5e4f25e7f21b62974861f055cff90c1aef80d3b8bd1f32e05db744d1cbd67605",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ebe9848e-d092-4007-88bc-09b67823681b",
          "versionId": "5197fe61-3f7f-45dd-9c93-2f43dd37787d",
          "publishedAt": "2025-09-16T04:55:02.185050652Z",
          "updatedAt": "2025-09-16T04:55:02.185050652Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
      "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
      "status": "active",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/confluence",
          "version": "0.9.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "CONFLUENCE_HOST"
            },
            {
              "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
              "format": "string",
              "name": "CONFLUENCE_API_BASE_PATH"
            },
            {
              "description": "Confluence Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CONFLUENCE_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b6e7826e-d1cb-43c9-8c12-391ed0538937",
          "versionId": "52318e0f-56de-406f-8558-4fd4e638060e",
          "publishedAt": "2025-09-13T11:40:42.156626724Z",
          "updatedAt": "2025-09-13T13:17:33.205675704Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.stefanoamorelli/sec-edgar-mcp",
      "description": "SEC EDGAR MCP server that provides access to the US public filings through the US SEC EDGAR API",
      "status": "active",
      "repository": {
        "url": "https://github.com/stefanoamorelli/sec-edgar-mcp",
        "source": "github"
      },
      "version": "1.0.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "sec-edgar-mcp",
          "version": "1.0.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "The user agent to access the SEC EDGAR API",
              "isRequired": true,
              "format": "string",
              "name": "SEC_EDGAR_USER_AGENT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "3f9d168d-8b11-4737-87f4-8397667c84eb",
          "versionId": "526b6940-2ff7-4b65-a4b4-03439dd8e4d4",
          "publishedAt": "2025-09-09T07:06:26.344648212Z",
          "updatedAt": "2025-09-09T07:06:26.344648212Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.augee99/mcp-weather",
      "description": "An MCP server that provides [describe what your server does]",
      "status": "active",
      "repository": {
        "url": "https://github.com/augee99/mcp-weather",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-weather-augee99",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "2df85161-93f2-44e0-b0e3-c2dcfa8ce275",
          "versionId": "5289430f-1a42-4a32-a130-7dd851f9a378",
          "publishedAt": "2025-09-12T13:24:44.527456713Z",
          "updatedAt": "2025-09-12T13:24:44.527456713Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "status": "active",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "1.1.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
          "versionId": "52c6f0fa-7114-4adc-afae-d48cfbbe97c0",
          "publishedAt": "2025-09-17T14:15:14.604093039Z",
          "updatedAt": "2025-09-17T14:41:53.299387399Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.waystation/miro",
      "description": "Collaborate on visual boards with your team using Miro integration.",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/miro/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/miro/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "cb55e211-c76f-4ebd-bc1c-c51de032ec76",
          "versionId": "54131da0-99e1-4d90-a5d3-e0333a265843",
          "publishedAt": "2025-09-09T14:32:52.805916164Z",
          "updatedAt": "2025-09-09T14:32:52.805916164Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.domdomegg/time-mcp-nuget",
      "description": "Get the current UTC time in RFC 3339 format.",
      "status": "active",
      "repository": {
        "url": "https://github.com/domdomegg/time-mcp-nuget.git",
        "source": "github"
      },
      "version": "1.0.8",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimeMcpServer",
          "version": "1.0.8",
          "runtimeHint": "dnx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "648002ec-8d7c-4112-862d-9e8cc114c178",
          "versionId": "542b567a-17c2-4a09-905b-313d6ead48d7",
          "publishedAt": "2025-09-12T02:58:39.843958183Z",
          "updatedAt": "2025-09-12T02:58:39.843958183Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Antonytm/mcp-all",
      "description": "A Model Context Protocol server to run other MCP servers",
      "status": "active",
      "repository": {
        "url": "https://github.com/Antonytm/mcp-all",
        "source": "github"
      },
      "version": "0.1.15",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.15",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.15",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3001/mcp"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "f88dbaa2-7e10-4957-a53b-7ed8b511d77c",
          "versionId": "546e8ec9-7644-4320-a1be-f155a9f708c5",
          "publishedAt": "2025-09-28T10:35:40.355497357Z",
          "updatedAt": "2025-09-28T10:52:04.657619344Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.isamu/mulmocast-vision",
      "description": "Easy and stylish presentation slide generator.",
      "status": "active",
      "repository": {
        "url": "https://github.com/receptron/mulmocast-vision",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mulmocast-vision",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "7c35ddbb-8891-4f3d-bd6e-91bf9357da83",
          "versionId": "5473ea29-7534-4d74-ad1d-5b8185114052",
          "publishedAt": "2025-09-12T21:46:16.168898479Z",
          "updatedAt": "2025-09-12T21:46:16.168898479Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.kevincogan/demo-mcp-server",
      "description": "Demo server entry for local testing",
      "status": "active",
      "repository": {
        "url": "https://github.com/kevincogan/demo-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://kevincogan.github.io/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "78162e28-0738-46be-b2ef-b1c6469a1616",
          "versionId": "54a3da15-1724-4507-b6ba-60f6384d8619",
          "publishedAt": "2025-09-22T11:59:44.974868968Z",
          "updatedAt": "2025-09-22T11:59:44.974868968Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.jgador/websharp",
      "description": "Search the web and extract article text for LLMs.",
      "status": "active",
      "repository": {
        "url": "https://github.com/jgador/websharp",
        "source": "github"
      },
      "version": "v0.99.0-rc2",
      "packages": [
        {
          "registryType": "oci",
          "registryBaseUrl": "https://docker.io",
          "identifier": "jessegador/websharp-mcp",
          "version": "v0.99.0-rc2",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:8081/"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "cf9c7e3f-e774-441d-ac97-56797089e13f",
          "versionId": "551f28ac-4220-4947-9622-369fd6ea55eb",
          "publishedAt": "2025-09-22T09:09:05.052333574Z",
          "updatedAt": "2025-09-22T09:09:05.052333574Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/anirbanbasu-pymcp",
      "description": "Primarily to be used as a template repository for developing MCP servers with FastMCP in Python, P…",
      "status": "active",
      "repository": {
        "url": "https://github.com/anirbanbasu/pymcp",
        "source": "github"
      },
      "version": "0.1.7",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@anirbanbasu/pymcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "d746b7c2-781d-4007-a303-108574ceebdc",
          "versionId": "55c2e977-4086-4058-ad5d-6f432f70a2cf",
          "publishedAt": "2025-09-20T05:41:08.153834913Z",
          "updatedAt": "2025-09-20T05:41:08.153834913Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.11-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
          "versionId": "55cfffa3-6f27-4010-97ce-7946cd76cad2",
          "publishedAt": "2025-09-10T13:58:00.558767962Z",
          "updatedAt": "2025-09-10T15:31:23.618984633Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "status": "active",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.57-beta",
      "packages": [
        {
          "registryType": "nuget",
          "registryBaseUrl": "https://api.nuget.org",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.57-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
          "versionId": "55d97a83-7c7b-4baf-b70f-e1676a8b667a",
          "publishedAt": "2025-09-22T17:04:35.115505274Z",
          "updatedAt": "2025-09-22T17:04:35.115505274Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.mintmcp/gcal",
      "description": "A MCP server that works with Google Calendar to manage event listing, reading, and updates.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gcal.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "7b265ff1-5cd1-43fe-92c4-54cc6a0fd4d7",
          "versionId": "56080a46-21d6-48d2-91ff-ae1b9cb378b5",
          "publishedAt": "2025-09-09T19:49:54.013255259Z",
          "updatedAt": "2025-09-09T19:49:54.013255259Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.karanb192/reddit-mcp-buddy",
      "description": "Reddit MCP server - browse posts, search content, analyze users.",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "reddit-mcp-buddy",
          "version": "1.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "bc98ac4e-cb60-435b-a426-f18a6b1c0076",
          "versionId": "5677b351-373d-4137-bc58-28f1ba0d105d",
          "publishedAt": "2025-09-20T10:45:00.297359799Z",
          "updatedAt": "2025-09-20T10:45:00.297359799Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/callmybot-domoticz",
      "description": "Greet anyone by name with a friendly hello. Explore the origin of 'Hello, World' for context in de…",
      "status": "active",
      "repository": {
        "url": "https://github.com/callmybot/domoticz",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@callmybot/domoticz/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "5b1fc47b-a516-4763-be65-83249e6200b5",
          "versionId": "568e596f-ed17-4d09-9812-8e3ef60e47ea",
          "publishedAt": "2025-09-18T10:31:39.650923022Z",
          "updatedAt": "2025-09-18T10:31:39.650923022Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "{{VERSION}}",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a10fab8f-cce3-42a0-b3e4-e34e2f71c41c",
          "versionId": "56e52d11-1f40-4125-97fe-abaccc9774ea",
          "publishedAt": "2025-09-20T19:40:51.557718325Z",
          "updatedAt": "2025-09-20T20:30:22.469111767Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/yuhuison-mediawiki-mcp-server-auth",
      "description": "Connect to your MediaWiki using simple credentials and manage content without OAuth. Search, read,…",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@yuhuison/mediawiki-mcp-server-auth/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "0cc8d877-87d6-432c-9e4e-26ac831de2a8",
          "versionId": "576220c7-0d51-4d02-bcc6-26c7917a366f",
          "publishedAt": "2025-09-16T11:19:24.929803426Z",
          "updatedAt": "2025-09-16T11:19:24.929803426Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.PV-Bhat/vibe-check-mcp-server",
      "description": "Metacognitive AI agent oversight: adaptive CPI interrupts for alignment, reflection and safety",
      "status": "active",
      "repository": {
        "url": "https://github.com/PV-Bhat/vibe-check-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@pv-bhat/vibe-check-mcp",
          "version": "2.5.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "d1386d04-c82c-4907-ab37-8fa5ba13b21c",
          "versionId": "57df4a71-6c82-4a88-a20e-985729df0399",
          "publishedAt": "2025-09-18T12:55:25.166512222Z",
          "updatedAt": "2025-09-18T12:55:25.166512222Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-jira",
      "description": "MCP server for Atlassian Jira Data Center - search, view, and create issues",
      "status": "active",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/jira",
          "version": "0.9.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Jira host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "JIRA_HOST"
            },
            {
              "description": "Jira API base path (alternative to JIRA_HOST)",
              "format": "string",
              "name": "JIRA_API_BASE_PATH"
            },
            {
              "description": "Jira Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "JIRA_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "775c0931-3153-4181-bada-77b597b58221",
          "versionId": "580738da-9f8f-426c-a690-03e6784e2000",
          "publishedAt": "2025-09-13T13:29:18.029022573Z",
          "updatedAt": "2025-09-13T13:29:18.029022573Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.arielbk/anki-mcp",
      "description": "MCP server for integrating with Anki flashcards through conversational AI",
      "status": "active",
      "repository": {
        "url": "https://github.com/arielbk/anki-mcp",
        "source": "github"
      },
      "version": "0.3.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@arielbk/anki-mcp",
          "version": "0.3.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a5238d4c-bc86-462b-b440-ec133bc3c680",
          "versionId": "584c8dd5-4a8c-4a9a-a8a2-2ef350e576a7",
          "publishedAt": "2025-09-11T12:16:49.682389389Z",
          "updatedAt": "2025-09-11T12:16:49.682389389Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.alex-feel/mcp-context-server",
      "description": "An MCP server that provides persistent multimodal context storage for LLM agents.",
      "status": "active",
      "repository": {
        "url": "https://github.com/alex-feel/mcp-context-server",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-context-server",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Log level",
              "format": "string",
              "name": "LOG_LEVEL"
            },
            {
              "description": "Maximum individual image size in megabytes",
              "format": "number",
              "name": "MAX_IMAGE_SIZE_MB"
            },
            {
              "description": "Maximum total request size in megabytes",
              "format": "number",
              "name": "MAX_TOTAL_SIZE_MB"
            },
            {
              "description": "Custom database file location path",
              "format": "string",
              "name": "DB_PATH"
            },
            {
              "description": "Maximum number of concurrent read connections in the pool",
              "format": "number",
              "name": "POOL_MAX_READERS"
            },
            {
              "description": "Maximum number of concurrent write connections in the pool",
              "format": "number",
              "name": "POOL_MAX_WRITERS"
            },
            {
              "description": "Connection timeout in seconds",
              "format": "number",
              "name": "POOL_CONNECTION_TIMEOUT_S"
            },
            {
              "description": "Idle connection timeout in seconds",
              "format": "number",
              "name": "POOL_IDLE_TIMEOUT_S"
            },
            {
              "description": "Connection health check interval in seconds",
              "format": "number",
              "name": "POOL_HEALTH_CHECK_INTERVAL_S"
            },
            {
              "description": "Maximum number of retry attempts for failed operations",
              "format": "number",
              "name": "RETRY_MAX_RETRIES"
            },
            {
              "description": "Base delay in seconds between retry attempts",
              "format": "number",
              "name": "RETRY_BASE_DELAY_S"
            },
            {
              "description": "Maximum delay in seconds between retry attempts",
              "format": "number",
              "name": "RETRY_MAX_DELAY_S"
            },
            {
              "description": "Enable random jitter in retry delays",
              "format": "boolean",
              "name": "RETRY_JITTER"
            },
            {
              "description": "Exponential backoff multiplication factor for retries",
              "format": "number",
              "name": "RETRY_BACKOFF_FACTOR"
            },
            {
              "description": "Enable SQLite foreign key constraints",
              "format": "boolean",
              "name": "SQLITE_FOREIGN_KEYS"
            },
            {
              "description": "SQLite journal mode (e.g., WAL, DELETE)",
              "format": "string",
              "name": "SQLITE_JOURNAL_MODE"
            },
            {
              "description": "SQLite synchronous mode (e.g., NORMAL, FULL, OFF)",
              "format": "string",
              "name": "SQLITE_SYNCHRONOUS"
            },
            {
              "description": "SQLite temporary storage location (e.g., MEMORY, FILE)",
              "format": "string",
              "name": "SQLITE_TEMP_STORE"
            },
            {
              "description": "SQLite memory-mapped I/O size in bytes",
              "format": "number",
              "name": "SQLITE_MMAP_SIZE"
            },
            {
              "description": "SQLite cache size (negative value for KB, positive for pages)",
              "format": "number",
              "name": "SQLITE_CACHE_SIZE"
            },
            {
              "description": "SQLite page size in bytes",
              "format": "number",
              "name": "SQLITE_PAGE_SIZE"
            },
            {
              "description": "SQLite WAL autocheckpoint threshold in pages",
              "format": "number",
              "name": "SQLITE_WAL_AUTOCHECKPOINT"
            },
            {
              "description": "SQLite busy timeout in milliseconds",
              "format": "number",
              "name": "SQLITE_BUSY_TIMEOUT_MS"
            },
            {
              "description": "SQLite WAL checkpoint mode (e.g., PASSIVE, FULL, RESTART)",
              "format": "string",
              "name": "SQLITE_WAL_CHECKPOINT"
            },
            {
              "description": "Server shutdown timeout in seconds",
              "format": "number",
              "name": "SHUTDOWN_TIMEOUT_S"
            },
            {
              "description": "Test mode shutdown timeout in seconds",
              "format": "number",
              "name": "SHUTDOWN_TIMEOUT_TEST_S"
            },
            {
              "description": "Queue operation timeout in seconds",
              "format": "number",
              "name": "QUEUE_TIMEOUT_S"
            },
            {
              "description": "Test mode queue timeout in seconds",
              "format": "number",
              "name": "QUEUE_TIMEOUT_TEST_S"
            },
            {
              "description": "Circuit breaker failure threshold before opening",
              "format": "number",
              "name": "CIRCUIT_BREAKER_FAILURE_THRESHOLD"
            },
            {
              "description": "Circuit breaker recovery timeout in seconds",
              "format": "number",
              "name": "CIRCUIT_BREAKER_RECOVERY_TIMEOUT_S"
            },
            {
              "description": "Maximum calls allowed in circuit breaker half-open state",
              "format": "number",
              "name": "CIRCUIT_BREAKER_HALF_OPEN_MAX_CALLS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a352f0e9-bd3c-4736-90de-2dce46081c89",
          "versionId": "592e3e2a-dd9d-422c-b427-7365303b314b",
          "publishedAt": "2025-09-25T11:37:36.007594626Z",
          "updatedAt": "2025-09-28T19:00:48.080152325Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.ycjcl868/mcp-server-fear-greed",
      "description": "An MCP server for mcp-server-fear-greed",
      "status": "active",
      "repository": {
        "url": "https://github.com/ycjcl868/mcp-server-fear-greed",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-fear-greed",
          "version": "latest",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-fear-greed",
          "version": "latest",
          "runtimeHint": "npx",
          "transport": {
            "type": "sse",
            "url": "http://127.0.0.1:{port}/sse"
          },
          "packageArguments": [
            {
              "description": "Server port number",
              "isRequired": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-fear-greed",
          "version": "latest",
          "runtimeHint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:{port}/mcp"
          },
          "packageArguments": [
            {
              "description": "Server port number",
              "isRequired": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "44863cea-e132-4d11-a92d-e6f1d531b079",
          "versionId": "5996e50e-d147-4b9d-ab2e-c771cd7dc73d",
          "publishedAt": "2025-09-09T04:08:35.601637811Z",
          "updatedAt": "2025-09-09T04:08:35.601637811Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.mcpanalytics/analytics",
      "description": "ML statistical analysis platform for data teams",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.mcpanalytics.ai/auth0"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "219a2fa3-ba26-4574-9c45-44886d4ff9e8",
          "versionId": "5a8b6b36-7f28-48df-ae97-31f9a032aad5",
          "publishedAt": "2025-09-17T02:35:06.675809197Z",
          "updatedAt": "2025-09-17T02:38:18.073872009Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.grupo-avispa/dsr_mcp_server",
      "description": "An MCP server that provides tools for interacting with Deep State Representation (DSR) graphs.",
      "status": "active",
      "repository": {
        "url": "https://github.com/grupo-avispa/dsr_mcp_server",
        "source": "github"
      },
      "version": "1.0.1",
      "websiteUrl": "https://grupo-avispa.github.io/dsr_mcp_server/",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a7e371ee-5904-46c1-8b7f-8416cc9b5994",
          "versionId": "5b031d63-c0be-4663-aa02-43a97a488467",
          "publishedAt": "2025-09-17T10:22:23.135622672Z",
          "updatedAt": "2025-09-17T10:22:23.135622672Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.minnas/mcp",
      "description": "Share prompts and context with your team and discover community collections.",
      "status": "active",
      "repository": {
        "url": "https://github.com/sensoris/minnas-service",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://api.minnas.io/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "33e1232b-4b00-46fc-9460-452cae6bdcb5",
          "versionId": "5b990a17-1e02-4112-9d51-50e0ce0bc8bd",
          "publishedAt": "2025-09-10T15:43:19.145095272Z",
          "updatedAt": "2025-09-18T16:40:24.246590894Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
      "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
      "status": "active",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/confluence",
          "version": "0.9.8",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "CONFLUENCE_HOST"
            },
            {
              "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
              "format": "string",
              "name": "CONFLUENCE_API_BASE_PATH"
            },
            {
              "description": "Confluence Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CONFLUENCE_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b6e7826e-d1cb-43c9-8c12-391ed0538937",
          "versionId": "5b9f4081-5b9b-4790-81e8-0e4003f87912",
          "publishedAt": "2025-09-13T13:18:50.968631388Z",
          "updatedAt": "2025-09-13T13:29:18.545408762Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.2.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
          "versionId": "5bdce05b-4380-47b4-8757-65fd069c1c07",
          "publishedAt": "2025-09-28T06:10:08.960250008Z",
          "updatedAt": "2025-09-28T06:39:40.271601122Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "co.pipeboard/meta-ads-mcp",
      "description": "Facebook / Meta Ads automation with AI: analyze performance, test creatives, optimize spend.",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.12",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "meta-ads-mcp",
          "version": "1.0.12",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.pipeboard.co/meta-ads-mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "51e23615-8cdd-47f0-84d3-df448e34a4e7",
          "versionId": "5c1fb401-9a73-4396-b243-823ebaf076af",
          "publishedAt": "2025-09-24T16:14:42.437856593Z",
          "updatedAt": "2025-09-24T16:24:17.273562755Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.45-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.45-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
          "versionId": "5c4aade2-e5bf-4633-b09d-5c0a795b8f16",
          "publishedAt": "2025-09-18T21:01:12.606342152Z",
          "updatedAt": "2025-09-18T21:24:07.745680383Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/blbl147-xhs-mcp",
      "description": "搜索笔记、浏览首页推荐、查看笔记内容与评论，并发表你的评论。直接在工作流中与小红书内容互动，高效跟进话题。",
      "status": "active",
      "repository": {
        "url": "https://github.com/blbl147/xhs-mcp",
        "source": "github"
      },
      "version": "1.6.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@blbl147/xhs-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "3d8cb7cd-324f-44ef-a2a1-3ff6c505466a",
          "versionId": "5c567ecc-775d-4b1d-b990-1b14ec02ffe8",
          "publishedAt": "2025-09-15T03:34:24.676762516Z",
          "updatedAt": "2025-09-15T03:34:24.676762516Z",
          "isLatest": true
        }
      }
    },
    {
      "name": "io.github.jkakar/cookwith-mcp",
      "description": "AI-powered recipe generation and transformation tools by Cookwith",
      "repository": {
        "url": "https://github.com/blaideinc/cookwith-mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "ad9ef150-dd99-4913-b5f4-3769ff823300",
          "versionId": "5c7b580d-19dc-45c3-957f-303efdd1f4b7",
          "publishedAt": "2025-09-12T19:27:49.340445667Z",
          "updatedAt": "2025-09-12T19:27:49.340445667Z",
          "isLatest": true
        }
      }
    },
    {
      "name": "io.github.OtherVibes/mcp-as-a-judge",
      "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.3.12",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "e8b7a95e-e0b7-44d1-9830-1ef945eed29d",
          "versionId": "5ccbb7c4-a540-465f-8457-936802e52673",
          "publishedAt": "2025-09-18T21:45:57.092950721Z",
          "updatedAt": "2025-09-18T22:00:36.898440904Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "status": "active",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.9.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.9.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "bd0c41d1-2209-4c3f-8602-d40900053217",
          "versionId": "5cecd3d7-2830-490f-b3bc-ddbf8d068b24",
          "publishedAt": "2025-09-27T13:06:49.494028033Z",
          "updatedAt": "2025-09-27T19:37:16.179620263Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/sasabasara-where_is_my_bus_mcp",
      "description": "Get real-time NYC bus arrivals, live vehicle locations, and service alerts. Plan trips between any…",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@sasabasara/where_is_my_bus_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "41c56cad-c283-459d-a0cf-9b2782569a6d",
          "versionId": "5cf0cf74-f9f5-4c6d-84a2-59529a8a445a",
          "publishedAt": "2025-09-11T03:53:53.151653448Z",
          "updatedAt": "2025-09-11T03:53:53.151653448Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.ruvnet/claude-flow",
      "description": "AI orchestration with hive-mind swarms, neural networks, and 87 MCP tools for enterprise dev.",
      "status": "active",
      "repository": {
        "url": "https://github.com/ruvnet/claude-flow",
        "source": "github",
        "id": "854513237"
      },
      "version": "2.0.0-alpha.107",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "claude-flow",
          "version": "2.0.0-alpha.107",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Anthropic API key for Claude AI models",
              "format": "string",
              "isSecret": true,
              "name": "ANTHROPIC_API_KEY"
            },
            {
              "description": "Operation mode: development, production, or test",
              "format": "string",
              "name": "CLAUDE_FLOW_MODE"
            },
            {
              "description": "Path for persistent memory storage",
              "format": "string",
              "name": "CLAUDE_FLOW_MEMORY_PATH"
            },
            {
              "description": "Maximum number of concurrent agents",
              "format": "string",
              "name": "CLAUDE_FLOW_MAX_AGENTS"
            },
            {
              "description": "MCP server port",
              "format": "string",
              "name": "CLAUDE_FLOW_PORT"
            },
            {
              "description": "GitHub personal access token for repository operations",
              "format": "string",
              "isSecret": true,
              "name": "GITHUB_TOKEN"
            },
            {
              "description": "Flow Nexus cloud platform API key",
              "format": "string",
              "isSecret": true,
              "name": "FLOW_NEXUS_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8362811b-c6cc-401d-92d9-6288295e9104",
          "versionId": "5db5281e-f8b9-49a8-bf3d-b15b911f634a",
          "publishedAt": "2025-09-10T16:59:34.218265771Z",
          "updatedAt": "2025-09-10T16:59:34.218265771Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.srikrishna235/scrimba-teaching-mcp",
      "description": "Unified MCP for Scrimba's interactive programming education with visual learning",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "3.0.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "scrimba-teaching-mcp",
          "version": "3.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "9af8219e-a44d-4cce-a08d-8d5b8b7466fe",
          "versionId": "5eb74f2b-f434-4da6-a776-39e53f84de1c",
          "publishedAt": "2025-09-25T05:38:56.280550336Z",
          "updatedAt": "2025-09-25T05:38:56.280550336Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.human4/mcp",
      "description": "Human4AI: bridging human perception with AI agents for seamless collaborative intelligence.",
      "repository": {
        "url": "https://github.com/Human4AI/MCP",
        "source": "github"
      },
      "version": "",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.human4.ai/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "dd67632c-f1b8-4f39-9fde-4ce82716a8e8",
          "versionId": "5ec94c6d-6b50-42af-bdd9-895a57fe7d38",
          "publishedAt": "2025-09-17T18:51:30.428936188Z",
          "updatedAt": "2025-09-17T18:51:30.428936188Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "status": "active",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.5.6",
      "packages": [
        {
          "registryType": "oci",
          "registryBaseUrl": "https://docker.io",
          "identifier": "teamwork/mcp",
          "version": "v1.5.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "8e1daf12-8a74-4718-93ec-86b05728241d",
          "versionId": "5ee2255a-2cef-4845-ac9b-e328b83e860f",
          "publishedAt": "2025-09-29T16:24:46.685810105Z",
          "updatedAt": "2025-09-29T16:24:46.685810105Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
          "versionId": "5f655162-becc-41bc-b9f6-959e3611e138",
          "publishedAt": "2025-09-12T01:50:59.054896721Z",
          "updatedAt": "2025-09-12T01:53:51.97863881Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.formulahendry/spec-driven-development",
      "description": "MCP Server that facilitates spec-driven development workflows, not just Vibe Coding.",
      "status": "active",
      "repository": {
        "url": "https://github.com/formulahendry/mcp-server-spec-driven-development",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-spec-driven-development",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c8642940-bb9d-4325-9fa2-5eb093eece1e",
          "versionId": "5f774f6f-239b-45a6-a509-b1936e0e2422",
          "publishedAt": "2025-09-26T06:51:26.732082358Z",
          "updatedAt": "2025-09-26T06:51:26.732082358Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.aikts/yandex-tracker-mcp",
      "description": "MCP server for Yandex Tracker API.",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.4.5",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "yandex-tracker-mcp",
          "version": "0.4.5",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c87fee0d-858e-4742-8fb9-d0212c5b6d84",
          "versionId": "5f78e0d6-cb44-4258-8f5e-112777d74459",
          "publishedAt": "2025-09-29T20:19:14.600559601Z",
          "updatedAt": "2025-09-29T20:19:14.600559601Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.variflight/variflight-mcp",
      "description": "VariFlight's official MCP server provides tools to query flight, weather, comfort, and fare data.",
      "status": "active",
      "repository": {
        "url": "https://github.com/variflight/variflight-mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@variflight-ai/variflight-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VARIFLIGHT_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "314291ab-1ff5-4c6b-9879-9a236748c272",
          "versionId": "5f80b1e5-5b3b-437a-99dc-c743cae8a2c7",
          "publishedAt": "2025-09-12T07:06:18.904080025Z",
          "updatedAt": "2025-09-12T07:06:18.904080025Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.tickettailor/mcp",
      "description": "Provides event organisers with tools to interact with a Ticket Tailor box office account.",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.tickettailor.ai/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.tickettailor.ai/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b0042856-e49d-4ba6-b594-f0c09fc246a4",
          "versionId": "5fae66cd-f99b-40e6-a097-3990537cd513",
          "publishedAt": "2025-09-12T10:10:54.1887638Z",
          "updatedAt": "2025-09-12T10:10:54.1887638Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "status": "active",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "364d771b-c515-4071-805d-75513fa308ce",
          "versionId": "604c10d8-566e-4183-85cd-db3778d422bb",
          "publishedAt": "2025-09-20T22:39:33.769198195Z",
          "updatedAt": "2025-09-20T22:45:23.809566997Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.koki-develop/esa-mcp-server",
      "description": "A Model Context Protocol (MCP) server for esa.io",
      "status": "active",
      "repository": {
        "url": "https://github.com/koki-develop/esa-mcp-server.git",
        "source": "github"
      },
      "version": "0.3.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@koki-develop/esa-mcp-server",
          "version": "0.3.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your esa team",
              "isRequired": true,
              "format": "string",
              "name": "ESA_TEAM"
            },
            {
              "description": "Your esa personal access token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ESA_ACCESS_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "c328b976-a7a4-4195-a736-ea281a6c5695",
          "versionId": "60eaa6b1-e687-49a0-a783-95e6033bc0c6",
          "publishedAt": "2025-09-11T00:37:16.035462939Z",
          "updatedAt": "2025-09-11T00:37:16.035462939Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Kim-soung-won-mcp-smithery-exam",
      "description": "Craft quick, personalized greetings by name. Generate ready-to-use greeting prompts for a consiste…",
      "status": "active",
      "repository": {
        "url": "https://github.com/Kim-soung-won/mcp-smithery-exam",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Kim-soung-won/mcp-smithery-exam/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "cd52d87a-57d0-4124-b420-78052f5e723e",
          "versionId": "61190782-7594-4290-a23b-555aeabbf9fb",
          "publishedAt": "2025-09-16T06:32:38.498461921Z",
          "updatedAt": "2025-09-16T06:32:38.498461921Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/BadRooBot-my_test_mcp",
      "description": "Get current weather for any city and create images from your prompts. Streamline planning, reports…",
      "status": "active",
      "repository": {
        "url": "https://github.com/BadRooBot/python_mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BadRooBot/my_test_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "16063a2a-8092-4380-90b1-aeeab2d44b8f",
          "versionId": "62033d66-b83d-4f62-a294-a2c212cb06e6",
          "publishedAt": "2025-09-14T14:25:46.09449626Z",
          "updatedAt": "2025-09-14T14:25:46.09449626Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.antvis/mcp-server-chart",
      "description": "A Model Context Protocol server for generating charts using AntV.",
      "status": "active",
      "repository": {
        "url": "https://github.com/antvis/mcp-server-chart",
        "source": "github"
      },
      "version": "0.9.0-beta.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antv/mcp-server-chart",
          "version": "0.9.0-beta.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Custom chart generation service URL for private deployment",
              "format": "string",
              "default": "https://antv-studio.alipay.com/api/gpt-vis",
              "name": "VIS_REQUEST_SERVER"
            },
            {
              "description": "Service identifier for chart generation records",
              "format": "string",
              "isSecret": true,
              "name": "SERVICE_ID"
            },
            {
              "description": "Comma-separated list of tool names to disable",
              "format": "string",
              "name": "DISABLED_TOOLS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "48c5b241-51ea-42a7-88a7-5c92f6fd3f7a",
          "versionId": "620cd12a-6e28-4390-8f71-d57405b00fd8",
          "publishedAt": "2025-09-29T02:21:18.645027333Z",
          "updatedAt": "2025-09-29T02:21:18.645027333Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.waystation/jira",
      "description": "Track issues, manage projects, and streamline workflows in Jira.",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/jira/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/jira/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "b0896fc4-bb5e-4847-a0bf-7c3f1af17911",
          "versionId": "62854e83-941a-464c-8798-2f3ae4908410",
          "publishedAt": "2025-09-09T14:46:07.210890661Z",
          "updatedAt": "2025-09-09T14:46:07.210890661Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.BenAHammond/code-auditor-mcp",
      "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
      "status": "active",
      "repository": {
        "url": "https://github.com/BenAHammond/code-auditor-mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "code-auditor-mcp",
          "version": "1.17.3",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "da4e7c0a-854f-46b7-86ab-35564aa3069f",
          "versionId": "62a06c91-e521-4077-bac0-8a8746034cbb",
          "publishedAt": "2025-09-28T17:14:16.560687443Z",
          "updatedAt": "2025-09-28T23:04:51.330531739Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "so.jinko/jinko-mcp",
      "description": "Jinko is a travel MCP server that provides hotel search and booking capabilities.",
      "status": "active",
      "repository": {
        "url": "https://github.com/jinkoso/jinko-mcp",
        "source": "github"
      },
      "version": "0.0.27",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp-remote.jinko.so/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a5376b7b-ca2b-45fe-bea4-4daf76b59096",
          "versionId": "62db1a40-2f62-4fc8-97b5-b03186d26b28",
          "publishedAt": "2025-09-16T21:19:26.720481714Z",
          "updatedAt": "2025-09-16T21:19:26.720481714Z",
          "isLatest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "status": "active",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.8.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.8.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "bd0c41d1-2209-4c3f-8602-d40900053217",
          "versionId": "63412105-c23a-4c00-9651-fc721fb12539",
          "publishedAt": "2025-09-10T19:14:35.862874767Z",
          "updatedAt": "2025-09-14T14:57:56.312035195Z",
          "isLatest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.foqal/Foqal",
      "description": "Foqal turns Slack/Teams into efficient support platforms with AI-powered ticketing.",
      "repository": {
        "url": "https://github.com/foqal/mcp",
        "source": "github"
      },
      "version": "2.0.1",
      "websiteUrl": "https://www.foqal.io?utm_source=mcp-registry&utm_medium=registry",
      "remotes": [
        {
          "type": "sse",
          "url": "https://support.foqal.io/api/mcp/[YOUR_GENERATED_TOKEN]"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "serverId": "a277a0e2-e0b1-4653-a01b-f741b4f1e9b1",
          "versionId": "63e72627-e748-4df0-b7c3-69c92076e93e",
          "publishedAt": "2025-09-26T19:31:50.224662326Z",
          "updatedAt": "2025-09-26T19:31:50.224662326Z",
          "isLatest": true
        }
      }
    }
  ]
}