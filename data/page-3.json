{
  "servers": [
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.balldontlie/mcp",
      "description": "Provides access to live sports data and analytics from BALLDONTLIE: The Sports API",
      "status": "active",
      "repository": {
        "url": "https://github.com/balldontlie-api/mcp",
        "source": "github"
      },
      "version": "1.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.balldontlie.io/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "is_required": true,
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "7e642fa7-6eff-4415-98fd-10328586af6a",
          "published_at": "2025-09-18T00:35:55.642004605Z",
          "updated_at": "2025-09-18T00:35:55.642004605Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "status": "active",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "0.6.5",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "ipybox",
          "version": "0.6.5",
          "runtime_hint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "description": "Required MCP server subcommand",
              "is_required": true,
              "value": "mcp",
              "type": "positional"
            },
            {
              "description": "Directory allowed for host filesystem operations",
              "type": "named",
              "name": "--allowed-dir",
              "is_repeated": true,
              "value_hint": "directory_path"
            },
            {
              "description": "Domain, IP address, or CIDR range allowed for outbound network access",
              "type": "named",
              "name": "--allowed-domain",
              "is_repeated": true,
              "value_hint": "domain_or_ip"
            },
            {
              "description": "Docker image tag to use",
              "type": "named",
              "name": "--container-tag",
              "value_hint": "docker_image_tag"
            },
            {
              "description": "Environment variable for container (KEY=VALUE format)",
              "type": "named",
              "name": "--container-env-var",
              "is_repeated": true,
              "value_hint": "env_var"
            },
            {
              "description": "Path to file containing container environment variables",
              "type": "named",
              "name": "--container-env-file",
              "value_hint": "file_path"
            },
            {
              "description": "Bind mount for container (host_path:container_path format)",
              "type": "named",
              "name": "--container-bind",
              "is_repeated": true,
              "value_hint": "bind_mount"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "7ee8d214-db7f-450d-93c7-c941d8196e03",
          "published_at": "2025-09-14T09:27:10.026612503Z",
          "updated_at": "2025-09-14T09:57:57.966657748Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/kwp-lab-rss-reader-mcp",
      "description": "Track and browse RSS feeds with ease. Fetch the latest entries from any feed URL and extract full…",
      "status": "active",
      "repository": {
        "url": "https://github.com/kwp-lab/rss-reader-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kwp-lab/rss-reader-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "7f80c7e7-1906-4315-a639-9a82089224b2",
          "published_at": "2025-09-10T17:02:25.896522471Z",
          "updated_at": "2025-09-10T17:02:25.896522471Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/BigVik193-reddit-user-mcp",
      "description": "Browse and manage Reddit posts, comments, and threads. Fetch user activity, explore hot/new/rising…",
      "status": "active",
      "repository": {
        "url": "https://github.com/BigVik193/reddit-user-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BigVik193/reddit-user-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "80990c6c-9b96-4c8c-ad64-0cc19f78bc8d",
          "published_at": "2025-09-14T21:19:18.649080266Z",
          "updated_at": "2025-09-14T21:19:18.649080266Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.toolprint/hypertool-mcp",
      "description": "Dynamically expose tools from proxied servers based on an Agent Persona",
      "status": "active",
      "repository": {
        "url": "https://github.com/toolprint/hypertool-mcp",
        "source": "github"
      },
      "version": "0.0.42",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@toolprint/hypertool-mcp",
          "version": "0.0.42",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "8177937a-2aa9-4956-8578-5e07976a1e25",
          "published_at": "2025-09-10T22:05:20.655840343Z",
          "updated_at": "2025-09-10T22:05:20.655840343Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.xkelxmc/uranium-mcp",
      "description": "MCP for Uranium NFT tools to mint, list, and manage digital assets on the permaweb.",
      "status": "active",
      "repository": {
        "url": "https://github.com/xkelxmc/uranium-mcp",
        "source": "github"
      },
      "version": "1.0.8",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "uranium-tools-mcp",
          "version": "1.0.8",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "You can generate an API key from your Uranium account settings: https://portal.uranium.pro/dashboard/profile/api-keys",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "URANIUM_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "8296f9ff-65ab-431a-8368-d348330ec141",
          "published_at": "2025-09-12T06:37:08.768329657Z",
          "updated_at": "2025-09-12T06:40:04.125900265Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.ChiR24/unreal-engine-mcp",
      "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp.git",
        "source": "github"
      },
      "version": "0.2.1",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "unreal-engine-mcp-server",
          "version": "0.2.1",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Unreal Engine host address",
              "value": "127.0.0.1",
              "name": "UE_HOST"
            },
            {
              "description": "Remote Control HTTP port",
              "value": "30010",
              "name": "UE_RC_HTTP_PORT"
            },
            {
              "description": "Remote Control WebSocket port",
              "value": "30020",
              "name": "UE_RC_WS_PORT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "831f2f8f-e1fd-42df-a72b-204364d2e08f",
          "published_at": "2025-09-17T08:19:12.108456567Z",
          "updated_at": "2025-09-17T12:43:41.544322203Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.9",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "83673f9d-7093-4f48-b57c-34f21f774802",
          "published_at": "2025-09-12T04:48:10.687272107Z",
          "updated_at": "2025-09-12T05:10:59.819863662Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.xkelxmc/uranium-mcp",
      "description": "MCP for Uranium NFT tools to mint, list, and manage digital assets on the permaweb.",
      "status": "active",
      "repository": {
        "url": "https://github.com/xkelxmc/uranium-mcp",
        "source": "github"
      },
      "version": "1.0.9",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "uranium-tools-mcp",
          "version": "1.0.9",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "You can generate an API key from your Uranium account settings: https://portal.uranium.pro/dashboard/profile/api-keys",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "URANIUM_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "83791fdd-0f24-4050-800c-0eb432e14022",
          "published_at": "2025-09-12T06:40:04.121499157Z",
          "updated_at": "2025-09-12T06:40:04.121499157Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/lukaskostka99-marketing-miner-mcp",
      "description": "Discover high-impact keyword ideas across Central and Eastern European and English markets. Analyz…",
      "status": "active",
      "repository": {
        "url": "https://github.com/lukaskostka99/marketing-miner-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@lukaskostka99/marketing-miner-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "8438de75-ed65-4fbe-9e3e-9570a9f8370d",
          "published_at": "2025-09-16T19:53:18.718565229Z",
          "updated_at": "2025-09-16T19:53:18.718565229Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.ChengJiale150/jupyter-mcp-server",
      "description": "A powerful MCP server for AI-driven Jupyter Notebook management and execution",
      "status": "active",
      "repository": {
        "url": "https://github.com/ChengJiale150/jupyter-mcp-server",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "better-jupyter-mcp-server",
          "version": "1.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "846f2bd9-c60c-4129-8ab2-73d5939c126b",
          "published_at": "2025-09-17T06:19:21.754937017Z",
          "updated_at": "2025-09-17T06:19:21.754937017Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/demomagic-duckchain-mcp",
      "description": "Explore blockchain data across addresses, tokens, blocks, and transactions. Investigate any transa…",
      "status": "active",
      "repository": {
        "url": "https://github.com/demomagic/duckchain-mcp",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@demomagic/duckchain-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "857bf329-eeca-4c11-aeb9-2f82f5a1fa24",
          "published_at": "2025-09-14T05:32:58.075993678Z",
          "updated_at": "2025-09-14T05:32:58.075993678Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.kevint-cerebras/cerebras-code-mcp",
      "description": "Model Context Protocol (MCP) server for Cerebras to make coding faster in AI-first IDEs",
      "status": "active",
      "repository": {
        "url": "https://github.com/kevint-cerebras/cerebras-code-mcp",
        "source": "github"
      },
      "version": "1.3.1",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "cerebras-code-mcp",
          "version": "1.3.1",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your Cerebras API key from cloud.cerebras.ai",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "CEREBRAS_API_KEY"
            },
            {
              "description": "Optional OpenRouter API key for fallback when Cerebras rate limits are hit",
              "format": "string",
              "is_secret": true,
              "name": "OPENROUTER_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "86627f06-52cf-41a8-8121-b1cfbea8f542",
          "published_at": "2025-09-09T19:59:53.502109932Z",
          "updated_at": "2025-09-09T19:59:53.502109932Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.joelverhagen/Knapcode.SampleMcpServer/aot",
      "description": "A sample MCP server using the MCP C# SDK. Generates random numbers and random weather.",
      "repository": {
        "url": "https://github.com/joelverhagen/Knapcode.SampleMcpServer.git",
        "source": "github"
      },
      "version": "0.8.0-beta",
      "packages": [
        {
          "registry_type": "nuget",
          "registry_base_url": "https://api.nuget.org",
          "identifier": "Knapcode.SampleMcpServer",
          "version": "0.8.0-beta",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "value": "mcp",
              "type": "positional",
              "value_hint": "mcp"
            },
            {
              "value": "start",
              "type": "positional",
              "value_hint": "start"
            }
          ],
          "environment_variables": [
            {
              "value": "{weather_choices}",
              "variables": {
                "weather_choices": {
                  "description": "Comma separated list of weather descriptions to randomly select.",
                  "is_required": true
                }
              },
              "name": "WEATHER_CHOICES"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "86667e38-34da-44eb-a0ce-e34112fd98c6",
          "published_at": "2025-09-12T21:54:51.656512708Z",
          "updated_at": "2025-09-12T21:54:51.656512708Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.kkjdaniel/bgg-mcp",
      "description": "BoardGameGeek MCP server providing access to BGG API data through standardized tools",
      "status": "active",
      "repository": {
        "url": "https://github.com/kkjdaniel/bgg-mcp",
        "source": "github"
      },
      "version": "1.3.2",
      "packages": [
        {
          "registry_type": "oci",
          "registry_base_url": "https://docker.io",
          "identifier": "kdaniel/bgg-mcp",
          "version": "1.3.2",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your BoardGameGeek username for references such as ME or MY in prompts",
              "format": "string",
              "name": "BGG_USERNAME"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "868fcbf0-a0d5-40fc-ab05-90150f408d12",
          "published_at": "2025-09-15T00:05:40.274408146Z",
          "updated_at": "2025-09-16T01:51:47.036829827Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/Hint-Services-obsidian-github-mcp",
      "description": "Connect AI assistants to your GitHub-hosted Obsidian vault to seamlessly access, search, and analy…",
      "status": "active",
      "repository": {
        "url": "https://github.com/Hint-Services/obsidian-github-mcp",
        "source": "github"
      },
      "version": "0.4.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Hint-Services/obsidian-github-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "86a34c13-67d8-4c36-9b29-47fee0e72635",
          "published_at": "2025-09-14T15:20:36.371442208Z",
          "updated_at": "2025-09-14T15:20:36.371442208Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.ritzademo/acme-todo",
      "description": "An MCP server for a simple todo list",
      "status": "active",
      "repository": {
        "url": "https://github.com/ritza-co/acme-todo",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.ritzademo.com/mcp/ritza-rzx-our91"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "86d5e960-a135-427a-ab53-046209080b2e",
          "published_at": "2025-09-15T16:48:08.379170462Z",
          "updated_at": "2025-09-15T16:48:08.379170462Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "net.gepuro.mcp-company-lens-v1/company-lens-mcp-registry",
      "description": "Search Japanese company database",
      "status": "active",
      "repository": {
        "url": "https://github.com/gepuro/company-lens-mcp-registry",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp-company-lens-v1.gepuro.net/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "87793efe-79b4-4e91-8012-6a5cc6abe61e",
          "published_at": "2025-09-13T02:14:01.9221662Z",
          "updated_at": "2025-09-13T02:14:01.9221662Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/smithery-ai-slack",
      "description": "Enable interaction with Slack workspaces. Supports subscribing to Slack events through Resources.",
      "status": "active",
      "repository": {
        "url": "https://github.com/smithery-ai/mcp-servers",
        "source": "github",
        "subfolder": "slack"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery-ai/slack/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "87df9cc3-6c2b-40c4-8087-7644b05f005d",
          "published_at": "2025-09-10T20:56:36.643850073Z",
          "updated_at": "2025-09-10T20:56:36.643850073Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ci.git/mymlh-mcp-server",
      "description": "OAuth-enabled MyMLH MCP server for accessing MyMLH data.",
      "repository": {
        "url": "https://github.com/wei/mymlh-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mymlh-mcp.git.ci/mcp"
        },
        {
          "type": "sse",
          "url": "https://mymlh-mcp.git.ci/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "87e529f5-a17d-45ef-a189-86bf64e42fb1",
          "published_at": "2025-09-18T01:20:01.35205977Z",
          "updated_at": "2025-09-18T01:20:01.35205977Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.mintmcp/outlook-email",
      "description": "A MCP server for Outlook email that lets you search, read, and draft emails and replies.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://outlook-email.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "881c11dc-c6c4-4bdb-8baf-17c32f1e611b",
          "published_at": "2025-09-09T19:59:31.832251453Z",
          "updated_at": "2025-09-09T20:02:38.029140257Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.containers/kubernetes-mcp-server",
      "description": "An MCP server that provides [describe what your server does]",
      "status": "active",
      "repository": {
        "url": "https://github.com/containers/kubernetes-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "8858e484-2e5e-4166-b39f-7f1002fa27a4",
          "published_at": "2025-09-16T13:06:55.742929857Z",
          "updated_at": "2025-09-16T13:06:55.742929857Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.getunblocked/unblocked-mcp",
      "description": "Unblocked MCP Server",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://getunblocked.com/api/mcpsse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "88833a2c-b1b8-4a0f-ba12-43193b270796",
          "published_at": "2025-09-17T17:32:31.670692124Z",
          "updated_at": "2025-09-17T17:32:31.670692124Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.mobile-next/mobile-mcp",
      "description": "MCP server for iOS and Android Mobile Development, Automation and Testing",
      "status": "active",
      "repository": {
        "url": "https://github.com/mobile-next/mobile-mcp",
        "source": "github"
      },
      "version": "0.0.26",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@mobilenext/mobile-mcp",
          "version": "0.0.26",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "name": ""
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "89304685-3f90-4915-9b41-7742cf94b56a",
          "published_at": "2025-09-09T06:51:49.988573415Z",
          "updated_at": "2025-09-09T06:51:49.988573415Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.surendranb/google-analytics-mcp",
      "description": "An MCP server that provides [describe what your server does]",
      "status": "active",
      "repository": {
        "url": "https://github.com/surendranb/google-analytics-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "google-analytics-mcp",
          "version": "1.2.0",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your API key for the service",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "89606265-25b6-4e44-8c36-0988fd23211c",
          "published_at": "2025-09-09T06:10:41.49026764Z",
          "updated_at": "2025-09-09T06:10:41.49026764Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.mintmcp/gcal",
      "description": "A MCP server that works with Google Calendar to manage event listing, reading, and updates.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gcal.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "899391c2-e787-4df6-9788-0fcb0e1f086d",
          "published_at": "2025-09-09T19:36:27.962358954Z",
          "updated_at": "2025-09-09T19:42:00.468110436Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "status": "active",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "0.6.3-p2",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "ipybox",
          "version": "0.6.3-p2",
          "runtime_hint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "description": "Required MCP server subcommand",
              "is_required": true,
              "value": "mcp",
              "type": "positional"
            },
            {
              "description": "Directory allowed for host filesystem operations",
              "type": "named",
              "name": "--allowed-dir",
              "is_repeated": true,
              "value_hint": "directory_path"
            },
            {
              "description": "Domain, IP address, or CIDR range allowed for outbound network access",
              "type": "named",
              "name": "--allowed-domain",
              "is_repeated": true,
              "value_hint": "domain_or_ip"
            },
            {
              "description": "Docker image tag to use",
              "type": "named",
              "name": "--container-tag",
              "value_hint": "docker_image_tag"
            },
            {
              "description": "Environment variable for container (KEY=VALUE format)",
              "type": "named",
              "name": "--container-env-var",
              "is_repeated": true,
              "value_hint": "env_var"
            },
            {
              "description": "Path to file containing container environment variables",
              "type": "named",
              "name": "--container-env-file",
              "value_hint": "file_path"
            },
            {
              "description": "Bind mount for container (host_path:container_path format)",
              "type": "named",
              "name": "--container-bind",
              "is_repeated": true,
              "value_hint": "bind_mount"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "89da352b-cb6c-4940-89bd-45b58a4740d3",
          "published_at": "2025-09-14T08:12:36.178778068Z",
          "updated_at": "2025-09-14T08:12:36.178778068Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "dev.lingo/main",
      "description": "Lingo.dev MCP Server - World-class i18n implementation with ICU MessageFormat.",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.lingo.dev/main"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "8bb26bcc-ecea-433a-ac25-ad9a370a4617",
          "published_at": "2025-09-17T08:32:24.189924177Z",
          "updated_at": "2025-09-17T08:32:24.189924177Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/DynamicEndpoints-autogen_mcp",
      "description": "Create and manage AI agents that collaborate and solve problems through natural language interacti…",
      "status": "active",
      "repository": {
        "url": "https://github.com/DynamicEndpoints/Autogen_MCP",
        "source": "github"
      },
      "version": "0.3.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@DynamicEndpoints/autogen_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "8d07348b-fc98-4ddd-8fa3-31502600c39c",
          "published_at": "2025-09-11T13:57:38.185529674Z",
          "updated_at": "2025-09-11T13:57:38.185529674Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.savhascelik/meta-api-mcp-server",
      "description": "A configuration-driven Meta API Gateway server for the Model Context Protocol (MCP).",
      "status": "active",
      "repository": {
        "url": "https://github.com/savhascelik/meta-api-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "meta-api-mcp-server",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "If the api you are connecting to requires api_key, you can use this variable and you can also define different variables",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "8d2ec6b3-7e55-40b9-8d76-7e45f5063e29",
          "published_at": "2025-09-09T04:02:19.493255754Z",
          "updated_at": "2025-09-09T04:14:51.989316259Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.GLips/Figma-Context-MCP",
      "description": "Give your coding agent access to your Figma data. Implement designs in any framework in one-shot.",
      "status": "active",
      "repository": {
        "url": "https://github.com/GLips/Figma-Context-MCP",
        "source": "github"
      },
      "version": "0.6.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "figma-developer-mcp",
          "version": "0.6.0",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "value": "--stdio",
              "type": "positional"
            }
          ],
          "environment_variables": [
            {
              "description": "Your Figma Personal Access Token, learn more here: https://www.figma.com/developers/api#access-tokens",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "FIGMA_API_KEY"
            },
            {
              "description": "Start the server in stdio mode, keep as CLI",
              "default": "cli",
              "name": "NODE_ENV"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "8e307ce2-4847-4aa9-952f-22017f14f7ef",
          "published_at": "2025-09-09T16:40:36.136529165Z",
          "updated_at": "2025-09-09T16:40:36.136529165Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-bitbucket",
      "description": "MCP server for Atlassian Bitbucket Data Center - interact with repositories and code",
      "status": "active",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.8",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/bitbucket",
          "version": "0.9.8",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Bitbucket host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "BITBUCKET_HOST"
            },
            {
              "description": "Bitbucket API base path (alternative to BITBUCKET_HOST)",
              "format": "string",
              "name": "BITBUCKET_API_BASE_PATH"
            },
            {
              "description": "Bitbucket Personal Access Token or API token",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "BITBUCKET_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "8f91d610-22eb-4116-9fb7-413af6d27c0a",
          "published_at": "2025-09-13T13:18:51.361262856Z",
          "updated_at": "2025-09-13T13:29:18.892466109Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.shawndurrani/mcp-registry",
      "description": "Search the public MCP Registry; discover servers and copy SSE URLs.",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp-registry.shawndurrani.ai/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "8fc6704f-44b1-4c4b-9046-40bf54316419",
          "published_at": "2025-09-15T03:11:16.637453593Z",
          "updated_at": "2025-09-15T04:01:11.068068105Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/Kryptoskatt-mcp-server",
      "description": "Enable AI assistants to interact seamlessly with the DefiLlama API by translating MCP tool calls i…",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Kryptoskatt/mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "902233d1-24e6-48d2-8461-d652edecdd2d",
          "published_at": "2025-09-17T10:41:17.40297863Z",
          "updated_at": "2025-09-17T10:41:17.40297863Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.pulsemcp.servers/pulse-fetch",
      "description": "MCP server that extracts clean, structured content from web pages with anti-bot bypass capabilities.",
      "status": "active",
      "repository": {
        "url": "https://github.com/pulsemcp/mcp-servers",
        "source": "github",
        "subfolder": "productionized/pulse-fetch"
      },
      "version": "0.2.14",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@pulsemcp/pulse-fetch",
          "version": "0.2.14",
          "runtime_hint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "API key for Firecrawl service to bypass anti-bot measures",
              "is_secret": true,
              "name": "FIRECRAWL_API_KEY"
            },
            {
              "description": "Bearer token for BrightData Web Unlocker service",
              "is_secret": true,
              "name": "BRIGHTDATA_API_KEY"
            },
            {
              "description": "Path to markdown file containing scraping strategy configuration",
              "default": "/tmp/pulse-fetch/strategy.md",
              "name": "STRATEGY_CONFIG_PATH"
            },
            {
              "description": "Optimization strategy for scraping: cost or speed",
              "default": "cost",
              "choices": [
                "cost",
                "speed"
              ],
              "name": "OPTIMIZE_FOR"
            },
            {
              "description": "Storage backend for saved resources: memory or filesystem",
              "default": "memory",
              "choices": [
                "memory",
                "filesystem"
              ],
              "name": "MCP_RESOURCE_STORAGE"
            },
            {
              "description": "Directory for filesystem storage (only used with filesystem type)",
              "default": "/tmp/pulse-fetch/resources",
              "name": "MCP_RESOURCE_FILESYSTEM_ROOT"
            },
            {
              "description": "Skip API authentication health checks at startup",
              "format": "boolean",
              "default": "false",
              "name": "SKIP_HEALTH_CHECKS"
            },
            {
              "description": "LLM provider for extract feature: anthropic, openai, openai-compatible",
              "choices": [
                "anthropic",
                "openai",
                "openai-compatible"
              ],
              "name": "LLM_PROVIDER"
            },
            {
              "description": "API key for the chosen LLM provider",
              "is_secret": true,
              "name": "LLM_API_KEY"
            },
            {
              "description": "Base URL for OpenAI-compatible providers",
              "name": "LLM_API_BASE_URL"
            },
            {
              "description": "Specific model to use for extraction",
              "name": "LLM_MODEL"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "91091a5c-39bf-499b-a706-7036631faff1",
          "published_at": "2025-09-09T00:19:19.119117909Z",
          "updated_at": "2025-09-09T00:19:19.119117909Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.jkawamoto/mcp-youtube-transcript",
      "description": "An MCP server retrieving transcripts of YouTube videos",
      "status": "active",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-youtube-transcript",
        "source": "github"
      },
      "version": "0.5.0",
      "packages": [
        {
          "registry_type": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-youtube-transcript/releases/download/v0.5.0/mcp-youtube-transcript.mcpb",
          "version": "0.5.0",
          "file_sha256": "d44842be1e8029c9eaa4412668d06825d668b4eeb645a70386b1c98ab9de49ec",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "91ce777a-4be7-4d0a-a084-ed4c5419e97d",
          "published_at": "2025-09-17T07:27:14.970033687Z",
          "updated_at": "2025-09-17T08:10:03.905251986Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.agentailor/slimcontext-mcp-server",
      "description": "MCP Server for SlimContext - AI chat history compression tools",
      "status": "active",
      "repository": {
        "url": "https://github.com/agentailor/slimcontext-mcp-server",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "slimcontext-mcp-server",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "92f5d42d-76de-461d-bbc0-51316831f6a9",
          "published_at": "2025-09-16T07:56:23.181995741Z",
          "updated_at": "2025-09-16T07:56:23.181995741Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/BigVik193-reddit-ads-mcp-api",
      "description": "Manage Reddit advertising end to end across accounts, funding methods, campaigns, ad groups, and a…",
      "status": "active",
      "repository": {
        "url": "https://github.com/BigVik193/reddit-ads-mcp-api",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BigVik193/reddit-ads-mcp-api/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "92fb64f2-8006-4551-bb6d-ed2b87b65887",
          "published_at": "2025-09-14T22:40:30.852738154Z",
          "updated_at": "2025-09-14T22:40:30.852738154Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.0.3",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.2",
          "runtime_hint": "bun",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environment_variables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.2",
          "runtime_hint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "package_arguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environment_variables": [
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "93bdbdfb-3c54-4757-bebf-3a0041945d68",
          "published_at": "2025-09-15T13:43:27.494335026Z",
          "updated_at": "2025-09-15T13:43:27.494335026Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.yuna0x0/hackmd-mcp",
      "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
      "status": "active",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github"
      },
      "version": "1.4.2",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "hackmd-mcp",
          "version": "1.4.2",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your HackMD API token for API authentication",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registry_type": "oci",
          "registry_base_url": "https://docker.io",
          "identifier": "yuna0x0/hackmd-mcp",
          "version": "1.4.2",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your HackMD API token for API authentication",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registry_type": "mcpb",
          "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.4.2/hackmd-mcp-1.4.2.mcpb",
          "version": "1.4.2",
          "file_sha256": "7b6ee105271d8595e3e5a0a3e4f9075ab3a2b7b373f529f4c3e99d1f93dead62",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your HackMD API token for API authentication",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "93c43441-0cd8-4fad-b46d-28887997e1d2",
          "published_at": "2025-09-13T08:20:45.650204026Z",
          "updated_at": "2025-09-15T03:10:53.114708285Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.waystation/office",
      "description": "Create, edit, and collaborate on Office documents and spreadsheets.",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/office/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/office/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "94689419-d526-4008-b0df-d79635930fa1",
          "published_at": "2025-09-09T14:32:54.33420243Z",
          "updated_at": "2025-09-09T14:32:54.33420243Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-jira",
      "description": "MCP server for Atlassian Jira Data Center - search, view, and create issues",
      "status": "active",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/jira",
          "version": "0.9.0",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Jira host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "JIRA_HOST"
            },
            {
              "description": "Jira API base path (alternative to JIRA_HOST)",
              "format": "string",
              "name": "JIRA_API_BASE_PATH"
            },
            {
              "description": "Jira Personal Access Token or API token",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "JIRA_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "94c0be03-60cf-45e3-9f6e-db4ad643f243",
          "published_at": "2025-09-13T11:40:51.735988794Z",
          "updated_at": "2025-09-13T13:17:32.83365354Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.himorishige/hatago-mcp-hub",
      "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
      "status": "active",
      "repository": {
        "url": "https://github.com/himorishige/hatago-mcp-hub",
        "source": "github"
      },
      "version": "0.0.13",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@himorishige/hatago-mcp-hub",
          "version": "0.0.13",
          "runtime_hint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "94cfdee1-6a62-4d40-8bf4-dab7646d4548",
          "published_at": "2025-09-13T14:40:04.386322089Z",
          "updated_at": "2025-09-14T07:53:18.719599831Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.priyankark/lighthouse-mcp",
      "description": "MCP server for Google Lighthouse performance metrics",
      "status": "active",
      "repository": {
        "url": "https://github.com/priyankark/lighthouse-mcp",
        "source": "github"
      },
      "version": "0.1.9",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "lighthouse-mcp",
          "version": "0.1.9",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "94d6b736-48d0-46f1-909f-9ce1dd82851e",
          "published_at": "2025-09-09T10:02:57.086660409Z",
          "updated_at": "2025-09-09T10:02:57.086660409Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.jkakar/recipe-mcp",
      "description": "Generate and remix recipes using cookwith.co",
      "status": "active",
      "repository": {
        "url": "https://github.com/blaideinc/recipe-mcp",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@cookwith/recipe-mcp",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "94e6cd5b-6def-4054-bf2d-91c8c31205a5",
          "published_at": "2025-09-11T18:30:58.5302013Z",
          "updated_at": "2025-09-11T18:33:51.807883948Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "md.install/try",
      "description": "Create guides to instruct coding agents to use your software (SDK, library, framework, API, etc).",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://install.md/mcp/try"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "95109f0a-8fb4-45ef-93d1-8c38874c2be7",
          "published_at": "2025-09-09T07:04:48.602631925Z",
          "updated_at": "2025-09-09T07:10:11.210375884Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "MCP server to read, inspect and troubleshoot codebase symbols",
      "status": "active",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@p1va/symbols",
          "version": "0.0.10",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "95837ebe-5fcd-4692-8020-5920d760d47c",
          "published_at": "2025-09-12T16:29:27.100278154Z",
          "updated_at": "2025-09-12T16:29:27.100278154Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.onkernel/kernel-mcp-server",
      "description": "Access Kernel's cloud-based browsers and app actions via MCP (remote HTTP + OAuth).",
      "status": "active",
      "repository": {
        "url": "https://github.com/onkernel/kernel-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.onkernel.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "95fc358c-7c94-4f0f-ad50-e7e516940dba",
          "published_at": "2025-09-09T18:04:37.61770657Z",
          "updated_at": "2025-09-09T18:04:37.61770657Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.ruvnet/claude-flow",
      "description": "AI orchestration with hive-mind swarms, neural networks, and 87 MCP tools for enterprise dev.",
      "status": "active",
      "repository": {
        "url": "https://github.com/ruvnet/claude-flow",
        "source": "github"
      },
      "version": "2.0.0-alpha.106",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "claude-flow",
          "version": "2.0.0-alpha.106",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Anthropic API key for Claude AI models",
              "format": "string",
              "is_secret": true,
              "name": "ANTHROPIC_API_KEY"
            },
            {
              "description": "Operation mode: development, production, or test",
              "format": "string",
              "name": "CLAUDE_FLOW_MODE"
            },
            {
              "description": "Path for persistent memory storage",
              "format": "string",
              "name": "CLAUDE_FLOW_MEMORY_PATH"
            },
            {
              "description": "Maximum number of concurrent agents",
              "format": "string",
              "name": "CLAUDE_FLOW_MAX_AGENTS"
            },
            {
              "description": "MCP server port",
              "format": "string",
              "name": "CLAUDE_FLOW_PORT"
            },
            {
              "description": "GitHub personal access token for repository operations",
              "format": "string",
              "is_secret": true,
              "name": "GITHUB_TOKEN"
            },
            {
              "description": "Flow Nexus cloud platform API key",
              "format": "string",
              "is_secret": true,
              "name": "FLOW_NEXUS_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "9623b70e-af1d-48ac-8338-e37ef96ca8cf",
          "published_at": "2025-09-10T16:55:33.070739114Z",
          "updated_at": "2025-09-10T16:59:34.223138386Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.shawndurrani/mcp-registry",
      "description": "Search the public MCP Registry; discover servers and copy SSE URLs.",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.1.3",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp-registry.shawndurrani.ai/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "967249f6-33c1-430d-a5b2-a1064337384d",
          "published_at": "2025-09-16T23:02:09.73866209Z",
          "updated_at": "2025-09-16T23:02:09.73866209Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.leshchenko1979/fast-mcp-telegram",
      "description": "Telegram MCP server with search and messaging capabilities",
      "status": "active",
      "repository": {
        "url": "https://github.com/leshchenko1979/fast-mcp-telegram",
        "source": "github"
      },
      "version": "0.5.0",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "fast-mcp-telegram",
          "version": "0.5.0",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Telegram API ID (from https://my.telegram.org/apps)",
              "is_required": true,
              "name": "API_ID"
            },
            {
              "description": "Telegram API Hash (from https://my.telegram.org/apps)",
              "is_required": true,
              "is_secret": true,
              "name": "API_HASH"
            },
            {
              "description": "Server mode: stdio (local), http-no-auth (dev), http-auth (prod)",
              "default": "stdio",
              "choices": [
                "stdio",
                "http-no-auth",
                "http-auth"
              ],
              "name": "SERVER_MODE"
            },
            {
              "description": "Custom session directory (defaults to ~/.config/fast-mcp-telegram/)",
              "name": "SESSION_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "96a8497f-6246-4326-9394-a28ff6908fe2",
          "published_at": "2025-09-17T14:08:48.770808907Z",
          "updated_at": "2025-09-17T14:08:48.770808907Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.shinpr/mcp-image",
      "description": "AI image generation MCP server using Nano Banana with intelligent prompt enhancement",
      "status": "active",
      "repository": {
        "url": "https://github.com/shinpr/mcp-image",
        "source": "github"
      },
      "version": "0.2.3",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-image",
          "version": "0.2.3",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Google Gemini API key for image generation (get from https://aistudio.google.com/apikey)",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "GEMINI_API_KEY"
            },
            {
              "description": "Absolute path to directory where generated images will be saved (defaults to ./output)",
              "format": "string",
              "name": "IMAGE_OUTPUT_DIR"
            },
            {
              "description": "Set to 'true' to disable automatic prompt optimization and use direct prompts",
              "format": "boolean",
              "name": "SKIP_PROMPT_ENHANCEMENT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "96cb8c0c-c096-4fa3-bc84-2e34a14f4f81",
          "published_at": "2025-09-12T00:28:17.174731889Z",
          "updated_at": "2025-09-12T00:28:17.174731889Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.bytedance/mcp-server-commands",
      "description": "An MCP server to run arbitrary commands",
      "status": "active",
      "repository": {
        "url": "https://github.com/bytedance/UI-TARS-desktop",
        "source": "github",
        "subfolder": "packages/agent-infra/mcp-servers/commands"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-commands",
          "version": "latest",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "description": "current working directory",
              "format": "string",
              "type": "named",
              "name": "cwd"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-commands",
          "version": "latest",
          "runtime_hint": "npx",
          "transport": {
            "type": "sse",
            "url": "http://127.0.0.1:{port}/sse"
          },
          "package_arguments": [
            {
              "description": "current working directory",
              "format": "string",
              "type": "named",
              "name": "cwd"
            },
            {
              "description": "Server port number",
              "is_required": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-commands",
          "version": "latest",
          "runtime_hint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:{port}/mcp"
          },
          "runtime_arguments": [
            {
              "description": "current working directory",
              "format": "string",
              "type": "named",
              "name": "cwd"
            }
          ],
          "package_arguments": [
            {
              "description": "Server port number",
              "is_required": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "97337d30-5e47-421e-9599-30487d21ea45",
          "published_at": "2025-09-09T06:16:30.41372415Z",
          "updated_at": "2025-09-09T06:16:30.41372415Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.coupler/remote-mcp-server",
      "description": "Coupler.io remote MCP server",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.coupler.io/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "975e0708-c43d-42ba-a27f-6d69f7c8e91a",
          "published_at": "2025-09-10T16:12:03.417415684Z",
          "updated_at": "2025-09-10T16:12:03.417415684Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/jirispilka-actors-mcp-server",
      "description": "Greet anyone by name with friendly, personalized messages. Explore the origin of Hello, World thro…",
      "status": "active",
      "repository": {
        "url": "https://github.com/jirispilka/actors-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@jirispilka/actors-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "983ebbb0-1365-44c9-9832-edafca128508",
          "published_at": "2025-09-11T11:59:13.452963424Z",
          "updated_at": "2025-09-11T11:59:13.452963424Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.bytedance/mcp-server-filesystem",
      "description": "MCP server for filesystem access",
      "status": "active",
      "repository": {
        "url": "https://github.com/bytedance/UI-TARS-desktop",
        "source": "github",
        "subfolder": "packages/agent-infra/mcp-servers/filesystem"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-filesystem",
          "version": "latest",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "description": "Comma-separated list of allowed directories for file operations",
              "is_required": true,
              "format": "string",
              "type": "named",
              "name": "allowed-directories"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-filesystem",
          "version": "latest",
          "runtime_hint": "npx",
          "transport": {
            "type": "sse",
            "url": "http://127.0.0.1:{port}/sse"
          },
          "package_arguments": [
            {
              "description": "Comma-separated list of allowed directories for file operations",
              "is_required": true,
              "format": "string",
              "type": "named",
              "name": "allowed-directories"
            },
            {
              "description": "Server port number",
              "is_required": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-filesystem",
          "version": "latest",
          "runtime_hint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:{port}/mcp"
          },
          "package_arguments": [
            {
              "description": "Comma-separated list of allowed directories for file operations",
              "is_required": true,
              "format": "string",
              "type": "named",
              "name": "allowed-directories"
            },
            {
              "description": "Server port number",
              "is_required": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "987b074f-a2ca-493d-9830-7ccb0b5bd165",
          "published_at": "2025-09-09T06:16:36.369747535Z",
          "updated_at": "2025-09-09T06:16:36.369747535Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.shalevshalit/image-recongnition-mcp",
      "description": "MCP server for AI-powered image recognition and description using OpenAI vision models.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mcp-s-ai/image-recongnition-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "image-recongnition-mcp",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your OpenAI API key for image recognition and description services",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "OPENAI_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "98c4bba3-1c5d-4981-8ba5-6cda90f78c32",
          "published_at": "2025-09-10T15:01:36.626715571Z",
          "updated_at": "2025-09-10T15:01:36.626715571Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.enigma/enigma-mcp-server",
      "description": "An MCP server that provides access to trusted data about business identity and activity",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.enigma.com/http"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.enigma.com/http-token",
          "headers": [
            {
              "description": "Bearer token of Enigma API key. Used to enable authentication without presenting the user with an oAuth login.",
              "is_required": true,
              "is_secret": true,
              "name": "X-API-Key"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.enigma.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "98f794d9-0a3c-432d-a8d2-3c5cb80eae2d",
          "published_at": "2025-09-10T19:14:36.3625643Z",
          "updated_at": "2025-09-10T19:14:36.3625643Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "dev.promplate/hmr",
      "description": "Docs for hot-module-reload and reactive programming for Python (`hmr` on PyPI)",
      "repository": {
        "url": "https://github.com/promplate/hmr",
        "source": "github"
      },
      "version": "1.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://pyth-on-line.promplate.dev/hmr/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "9978940b-0d97-4ef5-a187-0d5cd56731fb",
          "published_at": "2025-09-17T21:13:12.376456949Z",
          "updated_at": "2025-09-17T21:13:12.376456949Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "info.mosaique/mcp",
      "description": "Search and list latest international news (sources, comments, knowledge graph).",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.mosaique.info",
          "headers": [
            {
              "description": "API key for authentication",
              "is_required": true,
              "is_secret": true,
              "name": "X-API-Key"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "999c8e2e-e96b-460c-9e98-f90a7603145c",
          "published_at": "2025-09-10T18:15:03.198216658Z",
          "updated_at": "2025-09-10T18:15:03.198216658Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/IlyaGusev-academia_mcp",
      "description": "Search arXiv and ACL Anthology, retrieve citations and references, and browse web sources to accel…",
      "status": "active",
      "repository": {
        "url": "https://github.com/IlyaGusev/academia_mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@IlyaGusev/academia_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "99be110f-d865-4733-88b2-97fc2f9750de",
          "published_at": "2025-09-16T12:14:42.162775887Z",
          "updated_at": "2025-09-16T12:14:42.162775887Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.Selenium39/mcp-server-tempmail",
      "description": "MCP server for temporary email management using ChatTempMail API",
      "status": "active",
      "repository": {
        "url": "https://github.com/Selenium39/mcp-server-tempmail",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-server-tempmail",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "API key for ChatTempMail service",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "TEMPMAIL_API_KEY"
            },
            {
              "description": "Base URL for ChatTempMail API (optional, defaults to https://chat-tempmail.com)",
              "format": "string",
              "name": "TEMPMAIL_BASE_URL"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "9b7b9ce9-886b-4281-9e3e-8b5d45998edb",
          "published_at": "2025-09-09T14:44:19.170379822Z",
          "updated_at": "2025-09-09T14:44:19.170379822Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.IvanMurzak/Unity-MCP",
      "description": "Make 3D games in Unity Engine with AI. MCP Server + Plugin for Unity Editor and Unity games.",
      "status": "active",
      "repository": {
        "url": "https://github.com/IvanMurzak/Unity-MCP",
        "source": "github",
        "subfolder": "Unity-MCP-Server"
      },
      "version": "0.17.0",
      "packages": [
        {
          "registry_type": "oci",
          "registry_base_url": "https://docker.io",
          "identifier": "ivanmurzakdev/unity-mcp-server",
          "version": "0.17.0",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Client -> Server <- Plugin connection port (default: 8080)",
              "format": "number",
              "name": "UNITY_MCP_PORT"
            },
            {
              "description": "Plugin -> Server connection timeout (ms) (default: 10000)",
              "format": "number",
              "name": "UNITY_MCP_PLUGIN_TIMEOUT"
            },
            {
              "description": "Client -> Server transport type: stdio or http (default: http)",
              "format": "string",
              "default": "stdio",
              "name": "UNITY_MCP_CLIENT_TRANSPORT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "9c344d55-866d-4aad-8caa-5d08fa1ac54d",
          "published_at": "2025-09-12T10:14:26.342754989Z",
          "updated_at": "2025-09-12T11:41:26.342442162Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.waystation/teams",
      "description": "Collaborate, chat, and manage meetings in Microsoft Teams.",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/teams/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/teams/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "9dcd9a6c-b7b1-45f0-98a7-3fd8d3c49d51",
          "published_at": "2025-09-09T14:46:08.709922175Z",
          "updated_at": "2025-09-09T14:46:08.709922175Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.agentailor/slimcontext-mcp-server",
      "description": "MCP Server for SlimContext - AI chat history compression tools",
      "status": "active",
      "repository": {
        "url": "https://github.com/agentailor/slimcontext-mcp-server",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "slimcontext-mcp-server",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your API key for the service",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "9e289796-16e8-440e-8b01-311e7bbb64cb",
          "published_at": "2025-09-10T15:57:56.189103539Z",
          "updated_at": "2025-09-16T07:56:23.189924643Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "status": "active",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.5.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "9ef1c5fc-0d30-4038-b8c0-93f9aaffd1b2",
          "published_at": "2025-09-17T15:11:26.206910319Z",
          "updated_at": "2025-09-17T15:13:14.51544383Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.0.2",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.1",
          "runtime_hint": "bun",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environment_variables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.1",
          "runtime_hint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "package_arguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environment_variables": [
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a0bcd673-292a-4ba3-8dbc-eaf2ff92e7fc",
          "published_at": "2025-09-14T10:06:30.723296411Z",
          "updated_at": "2025-09-15T13:43:27.500265535Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.balldontlie/mcp",
      "description": "MCP server for BALLDONTLIE API",
      "status": "active",
      "repository": {
        "url": "https://github.com/balldontlie-api/mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.balldontlie.io/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "is_required": true,
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a1338208-2314-4d5d-bf1b-073348067148",
          "published_at": "2025-09-18T00:33:15.822454699Z",
          "updated_at": "2025-09-18T00:35:55.651573674Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/aryankeluskar-poke-video-mcp",
      "description": "Search your Flashback video library with natural language to instantly find relevant moments. Get…",
      "status": "active",
      "repository": {
        "url": "https://github.com/aryankeluskar/poke-video-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@aryankeluskar/poke-video-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a1ca2e8c-20e7-44f7-a0ad-eb2aef2faf78",
          "published_at": "2025-09-14T17:42:05.006813829Z",
          "updated_at": "2025-09-14T17:42:05.006813829Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.linxule/lotus-wisdom",
      "description": "An MCP server for problem-solving using the Lotus Sutra's wisdom framework.",
      "status": "active",
      "repository": {
        "url": "https://github.com/linxule/lotus-wisdom-mcp",
        "source": "github",
        "id": "963596268"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "lotus-wisdom-mcp",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a2e1778e-50cf-4972-a9cb-e31a89068e6f",
          "published_at": "2025-09-16T23:53:10.712981505Z",
          "updated_at": "2025-09-16T23:53:10.712981505Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.leshchenko1979/fast-mcp-telegram",
      "description": "Telegram MCP server with search and messaging capabilities",
      "status": "active",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "0.4.4",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a31f1b64-c682-4771-a4a8-76b0a9d96ec9",
          "published_at": "2025-09-11T16:40:10.557651314Z",
          "updated_at": "2025-09-15T08:03:29.365893275Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.docfork/docfork-mcp",
      "description": "MCP server for Docfork",
      "status": "active",
      "repository": {
        "url": "https://github.com/docfork/docfork-mcp",
        "source": "github"
      },
      "version": "0.7.2",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "docfork",
          "version": "0.7.2",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your API key for the service",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.docfork.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a6ab98ca-2224-4dc5-b7ce-91f97c40cb56",
          "published_at": "2025-09-17T14:44:53.975619664Z",
          "updated_at": "2025-09-17T14:44:53.975619664Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
      "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
      "status": "active",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.7",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/confluence",
          "version": "0.9.7",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "CONFLUENCE_HOST"
            },
            {
              "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
              "format": "string",
              "name": "CONFLUENCE_API_BASE_PATH"
            },
            {
              "description": "Confluence Personal Access Token or API token",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "CONFLUENCE_API_TOKEN"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a77e222c-d64a-4cd2-a44a-b4e46bdcbfed",
          "published_at": "2025-09-13T13:17:33.200471952Z",
          "updated_at": "2025-09-13T13:18:50.974154729Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.yuna0x0/hackmd-mcp",
      "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
      "status": "active",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github"
      },
      "version": "1.5.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "hackmd-mcp",
          "version": "1.5.0",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your HackMD API token for API authentication",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registry_type": "oci",
          "registry_base_url": "https://docker.io",
          "identifier": "yuna0x0/hackmd-mcp",
          "version": "1.5.0",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your HackMD API token for API authentication",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registry_type": "mcpb",
          "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.5.0/hackmd-mcp-1.5.0.mcpb",
          "version": "1.5.0",
          "file_sha256": "6035e3082ffaf5627e1293a2c8a5d7f42496010431c9b026859dae3bbaa9ce38",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your HackMD API token for API authentication",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a793348b-c4ba-457a-aa80-6b7269adc4ce",
          "published_at": "2025-09-15T03:10:52.965842649Z",
          "updated_at": "2025-09-15T03:10:52.965842649Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.mintmcp/gcal",
      "description": "A MintMCP server that works with Google Calendar to manage event listing, reading, and updates.",
      "status": "active",
      "repository": {
        "url": "https://github.com/mintmcp/mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gcal.mintmcp.com/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a7aa8d87-ead3-4ee3-9021-f41edf303f72",
          "published_at": "2025-09-09T19:28:43.15437668Z",
          "updated_at": "2025-09-09T19:35:28.126060102Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.himorishige/hatago-mcp-hub",
      "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
      "status": "active",
      "repository": {
        "url": "https://github.com/himorishige/hatago-mcp-hub",
        "source": "github"
      },
      "version": "0.0.12",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@himorishige/hatago-mcp-hub",
          "version": "0.0.12",
          "runtime_hint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a7fef886-c01c-4752-877e-b0da11049d3d",
          "published_at": "2025-09-13T13:55:18.531630059Z",
          "updated_at": "2025-09-13T14:40:04.494030232Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.chris-schra/mcp-funnel",
      "description": "MCP proxy that aggregates multiple servers with tool filtering and customization",
      "status": "active",
      "repository": {
        "url": "https://github.com/chris-schra/mcp-funnel",
        "source": "github"
      },
      "version": "0.0.6",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-funnel",
          "version": "0.0.6",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a8a5c761-c1dc-4d1d-9100-b57df4c9ec0d",
          "published_at": "2025-09-17T18:33:35.912597Z",
          "updated_at": "2025-09-17T18:55:31.893305521Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/Aman-Amith-Shastry-scientific_computation_mcp",
      "description": "This MCP server enables users to perform scientific computations regarding linear algebra and vect…",
      "status": "active",
      "repository": {
        "url": "https://github.com/Aman-Amith-Shastry/scientific_computation_mcp",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Aman-Amith-Shastry/scientific_computation_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a8f1ddcb-c162-4a50-8295-74ffbfbf76a7",
          "published_at": "2025-09-12T01:14:07.078270174Z",
          "updated_at": "2025-09-12T01:14:07.078270174Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.OpenCageData/opencage-geocoding-mcp",
      "description": "MCP server for OpenCage geocoding API",
      "status": "active",
      "repository": {
        "url": "https://github.com/OpenCageData/opencage-geocoding-mcp",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@opencage/mcp-opencage-server",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Your API key for the service",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a953ea94-b7e7-415c-8766-33c4d5b64b4d",
          "published_at": "2025-09-11T18:24:40.318380733Z",
          "updated_at": "2025-09-11T18:24:40.318380733Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.domdomegg/airtable-mcp-server",
      "description": "Read and write access to Airtable database schemas, tables, and records.",
      "status": "active",
      "repository": {
        "url": "https://github.com/domdomegg/airtable-mcp-server.git",
        "source": "github"
      },
      "version": "1.7.3",
      "packages": [
        {
          "registry_type": "npm",
          "identifier": "airtable-mcp-server",
          "version": "1.7.3",
          "runtime_hint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
              "is_required": true,
              "is_secret": true,
              "name": "AIRTABLE_API_KEY"
            }
          ]
        },
        {
          "registry_type": "oci",
          "identifier": "domdomegg/airtable-mcp-server",
          "version": "1.7.3",
          "runtime_hint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
              "is_required": true,
              "is_secret": true,
              "name": "AIRTABLE_API_KEY"
            }
          ]
        },
        {
          "registry_type": "mcpb",
          "identifier": "https://github.com/domdomegg/airtable-mcp-server/releases/download/v1.7.3/airtable-mcp-server.mcpb",
          "version": "1.7.3",
          "file_sha256": "0f28a9129cfebd262dfb77854c872355d21401bb3e056575b3027081f5d570ca",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "a9ab84c2-d56e-4bf2-8dc2-ad725fdb8d27",
          "published_at": "2025-09-12T03:19:04.49211253Z",
          "updated_at": "2025-09-12T03:19:04.49211253Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/plainyogurt21-sec-edgar-mcp",
      "description": "Provide AI assistants with real-time access to official SEC EDGAR filings and financial data. Enab…",
      "status": "active",
      "repository": {
        "url": "https://github.com/plainyogurt21/sec-edgar-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@plainyogurt21/sec-edgar-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "aa5b856a-de58-4023-b828-489a606c4fba",
          "published_at": "2025-09-13T21:20:44.610657663Z",
          "updated_at": "2025-09-13T21:20:44.610657663Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "status": "active",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "0.6.6",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "ipybox",
          "version": "0.6.6",
          "runtime_hint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "description": "Required MCP server subcommand",
              "is_required": true,
              "value": "mcp",
              "type": "positional"
            },
            {
              "description": "Directory allowed for host filesystem operations",
              "type": "named",
              "name": "--allowed-dir",
              "is_repeated": true,
              "value_hint": "directory_path"
            },
            {
              "description": "Domain, IP address, or CIDR range allowed for outbound network access",
              "type": "named",
              "name": "--allowed-domain",
              "is_repeated": true,
              "value_hint": "domain_or_ip"
            },
            {
              "description": "Docker image tag to use",
              "type": "named",
              "name": "--container-tag",
              "value_hint": "docker_image_tag"
            },
            {
              "description": "Environment variable for container (KEY=VALUE format)",
              "type": "named",
              "name": "--container-env-var",
              "is_repeated": true,
              "value_hint": "env_var"
            },
            {
              "description": "Path to file containing container environment variables",
              "type": "named",
              "name": "--container-env-file",
              "value_hint": "file_path"
            },
            {
              "description": "Bind mount for container (host_path:container_path format)",
              "type": "named",
              "name": "--container-bind",
              "is_repeated": true,
              "value_hint": "bind_mount"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "aa8580fa-a837-4ca7-83b3-181bed182529",
          "published_at": "2025-09-14T09:57:57.864977026Z",
          "updated_at": "2025-09-14T09:57:57.864977026Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.waystation/monday",
      "description": "Access and manage your Monday.com boards, items, and updates seamlessly",
      "status": "active",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/monday/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/monday/mcp/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "aaf0e62a-eaa9-49d9-a6f1-c10cf459274e",
          "published_at": "2025-09-09T14:20:40.836347203Z",
          "updated_at": "2025-09-09T14:20:40.836347203Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.3.3",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.3",
          "runtime_hint": "node",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environment_variables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "is_required": true,
              "format": "string",
              "default": "stdio",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.3",
          "runtime_hint": "node",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:3015/mcp"
          },
          "package_arguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environment_variables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "is_required": true,
              "format": "string",
              "default": "http",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The host interface for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The HTTP endpoint path for MCP requests.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_STRATEGY"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "ab48df60-848e-4f96-b5d0-9fa505deb331",
          "published_at": "2025-09-15T12:59:07.492836786Z",
          "updated_at": "2025-09-15T12:59:07.492836786Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.grupo-avispa/dsr_mcp_server",
      "description": "An MCP server that provides tools for interacting with Deep State Representation (DSR) graphs.",
      "status": "active",
      "repository": {
        "url": "https://github.com/grupo-avispa/dsr_mcp_server",
        "source": "github"
      },
      "version": "1.0.0",
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "aba25196-788f-4923-8fc8-836533ad0745",
          "published_at": "2025-09-17T10:15:32.830670599Z",
          "updated_at": "2025-09-17T10:22:23.142839077Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.abelljs/abell",
      "description": "AI tools related to Abell. Currently includes MCP of Abell",
      "status": "active",
      "repository": {
        "url": "https://github.com/abelljs/abell",
        "source": "github"
      },
      "version": "0.0.9",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "abell-ai",
          "version": "0.0.9",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "ac1b1492-c254-4727-85e5-21c7efaa26f5",
          "published_at": "2025-09-17T14:53:07.562174808Z",
          "updated_at": "2025-09-17T14:53:07.562174808Z",
          "is_latest": true
        }
      }
    },
    {
      "name": "io.github.ruvnet/claude-flow",
      "description": "AI orchestration with hive-mind swarms, neural networks, and 87 MCP tools for enterprise dev.",
      "repository": {
        "url": "",
        "source": ""
      },
      "version": "2.0.0-alpha.105",
      "packages": [
        {
          "registry_type": "npm",
          "identifier": "claude-flow",
          "version": "2.0.0-alpha.105",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "aca46879-069c-4052-99a4-b6941bc6fb26",
          "published_at": "2025-09-10T16:46:39.96638146Z",
          "updated_at": "2025-09-10T16:55:33.075242785Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/MetehanGZL-pokemcp",
      "description": "Provide detailed Pokémon data and information through a standardized MCP interface. Enable LLMs an…",
      "status": "active",
      "repository": {
        "url": "https://github.com/MetehanGZL/PokeMCP",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@MetehanGZL/pokemcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "ace42071-ecbd-472a-9738-a4701d427aef",
          "published_at": "2025-09-15T17:56:16.252320146Z",
          "updated_at": "2025-09-15T17:56:16.252320146Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.jkakar/recipe-mcp",
      "description": "Generate and remix recipes using cookwith.co",
      "status": "active",
      "repository": {
        "url": "https://github.com/blaideinc/recipe-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@cookwith/recipe-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "ad491a05-3439-4f9b-ac52-d3801bdffba4",
          "published_at": "2025-09-11T18:11:49.433940965Z",
          "updated_at": "2025-09-11T18:27:40.596727222Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.notion/mcp",
      "description": "Official Notion MCP server",
      "status": "active",
      "repository": {
        "url": "https://github.com/makenotion/notion-next",
        "source": "github",
        "subfolder": "src/cloudflare-mcp"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.notion.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.notion.com/sse"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "ad85ae5f-c107-4d47-b2c1-af82a1a9a7af",
          "published_at": "2025-09-11T22:19:32.446786781Z",
          "updated_at": "2025-09-11T22:25:50.746839158Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "status": "active",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.8.4",
      "packages": [
        {
          "registry_type": "pypi",
          "registry_base_url": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.8.4",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "URL for the CML Server",
              "is_required": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "is_required": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "is_secret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "is_secret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "add45668-2a60-42e1-aed8-09a9f957c589",
          "published_at": "2025-09-14T14:57:56.266090296Z",
          "updated_at": "2025-09-14T14:57:56.266090296Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://modelcontextprotocol.io/schemas/draft/2025-07-09/server.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.26-beta",
      "packages": [
        {
          "registry_type": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.26-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "ae385caf-a601-48d2-8ff4-eea1cbc424da",
          "published_at": "2025-09-16T22:11:37.310707427Z",
          "updated_at": "2025-09-16T22:30:54.36195718Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.zine/mcp",
      "description": "Your memory, everywhere AI goes. Build knowledge once, access it via MCP anywhere.",
      "status": "active",
      "repository": {
        "url": "https://github.com/graphlit/graphlit-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://www.zine.ai/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "b082814d-7200-439d-9ebf-9683529e2b33",
          "published_at": "2025-09-09T20:16:56.788715831Z",
          "updated_at": "2025-09-10T18:02:28.779912076Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.tuannvm/mcp-trino",
      "description": "MCP server for Trino distributed SQL query engine access",
      "status": "active",
      "repository": {
        "url": "https://github.com/tuannvm/mcp-trino",
        "source": "github"
      },
      "version": "2.2.1",
      "packages": [
        {
          "registry_type": "mcpb",
          "identifier": "https://github.com/tuannvm/mcp-trino/releases/download/v2.2.1/mcp-trino_2.2.1_darwin_arm64.tar.gz",
          "version": "2.2.1",
          "file_sha256": "1a18882ab43243e17420f3562118a4c3e7fff12bc6b145066ae64b90b2dc0159",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Trino server hostname",
              "is_required": true,
              "format": "string",
              "name": "TRINO_HOST"
            },
            {
              "description": "Trino server port",
              "format": "string",
              "name": "TRINO_PORT"
            },
            {
              "description": "Trino username",
              "is_required": true,
              "format": "string",
              "name": "TRINO_USER"
            },
            {
              "description": "Trino password",
              "format": "string",
              "is_secret": true,
              "name": "TRINO_PASSWORD"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "b092f116-9b0c-4ffd-abb2-a3d2e554c4fc",
          "published_at": "2025-09-09T05:26:17.749412364Z",
          "updated_at": "2025-09-09T05:26:17.749412364Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "status": "active",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.0.1",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.1",
          "runtime_hint": "bun",
          "transport": {
            "type": "stdio"
          },
          "package_arguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ]
        },
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.1",
          "runtime_hint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "package_arguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environment_variables": [
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "b0d0defb-6cdd-43ea-bcef-6db41f3906f6",
          "published_at": "2025-09-14T09:08:13.356523069Z",
          "updated_at": "2025-09-14T10:06:30.730167416Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://modelcontextprotocol.io/schemas/draft/2025-07-09/server.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.18-beta",
      "packages": [
        {
          "registry_type": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.18-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "b0d7e2ec-250a-42a7-bc01-198e42672eeb",
          "published_at": "2025-09-10T15:31:23.614864173Z",
          "updated_at": "2025-09-10T16:00:22.19485388Z",
          "is_latest": false
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.github.promplate/hmr",
      "description": "Hot Module Reload (HMR) for Python with reactive programming and MCP tools",
      "repository": {
        "url": "https://github.com/promplate/pyth-on-line",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://promplate.github.io/pyth-on-line/hmr/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "b2342344-c506-4b06-a8e3-931cb18d22ef",
          "published_at": "2025-09-17T20:50:30.150753217Z",
          "updated_at": "2025-09-17T20:50:30.150753217Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.letta/memory-mcp",
      "description": "MCP server for AI memory management using Letta - Standard MCP format",
      "status": "active",
      "repository": {
        "url": "https://github.com/letta-ai/memory-mcp",
        "source": "github"
      },
      "version": "2.0.2",
      "packages": [
        {
          "registry_type": "npm",
          "registry_base_url": "https://registry.npmjs.org",
          "identifier": "@letta-ai/memory-mcp",
          "version": "2.0.2",
          "transport": {
            "type": "stdio"
          },
          "environment_variables": [
            {
              "description": "Letta API key for memory operations",
              "is_required": true,
              "format": "string",
              "is_secret": true,
              "name": "LETTA_API_KEY"
            },
            {
              "description": "Unique user identifier for associated memories",
              "format": "string",
              "name": "LETTA_USER_ID"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "b305e6df-7c51-4067-a28c-d5964c68bd74",
          "published_at": "2025-09-09T06:28:26.340372855Z",
          "updated_at": "2025-09-09T06:28:26.340372855Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "io.globalping/mcp",
      "description": "Interact with a global network measurement platform.Run network commands from any point in the world",
      "status": "active",
      "repository": {
        "url": "https://github.com/jsdelivr/globalping-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.globalping.io/sse"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.globalping.io/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "b30f06c4-c3de-4734-8996-88c9d13ad12c",
          "published_at": "2025-09-09T15:58:08.139458885Z",
          "updated_at": "2025-09-09T15:58:08.139458885Z",
          "is_latest": true
        }
      }
    },
    {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "ai.smithery/browserbasehq-mcp-browserbase",
      "description": "Provides cloud browser automation capabilities using Stagehand and Browserbase, enabling LLMs to i…",
      "status": "active",
      "repository": {
        "url": "https://github.com/browserbase/mcp-server-browserbase",
        "source": "github"
      },
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@browserbasehq/mcp-browserbase/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "is_required": true,
              "value": "Bearer {smithery_api_key}",
              "is_secret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/official": {
          "id": "b35a6287-b91e-4a86-9eaa-776fc7d272dc",
          "published_at": "2025-09-16T17:17:18.587291714Z",
          "updated_at": "2025-09-16T17:17:18.587291714Z",
          "is_latest": true
        }
      }
    }
  ]
}